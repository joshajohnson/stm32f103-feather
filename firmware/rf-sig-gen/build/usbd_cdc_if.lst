ARM GAS  /tmp/ccrLyWqH.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_cdc_if.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.CDC_DeInit_FS,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	CDC_DeInit_FS:
  23              	.LFB70:
  24              		.file 1 "Src/usbd_cdc_if.c"
   1:Src/usbd_cdc_if.c **** /* USER CODE BEGIN Header */
   2:Src/usbd_cdc_if.c **** /**
   3:Src/usbd_cdc_if.c ****   ******************************************************************************
   4:Src/usbd_cdc_if.c ****   * @file           : usbd_cdc_if.c
   5:Src/usbd_cdc_if.c ****   * @version        : v2.0_Cube
   6:Src/usbd_cdc_if.c ****   * @brief          : Usb device for Virtual Com Port.
   7:Src/usbd_cdc_if.c ****   ******************************************************************************
   8:Src/usbd_cdc_if.c ****   * @attention
   9:Src/usbd_cdc_if.c ****   *
  10:Src/usbd_cdc_if.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  11:Src/usbd_cdc_if.c ****   * All rights reserved.</center></h2>
  12:Src/usbd_cdc_if.c ****   *
  13:Src/usbd_cdc_if.c ****   * This software component is licensed by ST under Ultimate Liberty license
  14:Src/usbd_cdc_if.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:Src/usbd_cdc_if.c ****   * the License. You may obtain a copy of the License at:
  16:Src/usbd_cdc_if.c ****   *                             www.st.com/SLA0044
  17:Src/usbd_cdc_if.c ****   *
  18:Src/usbd_cdc_if.c ****   ******************************************************************************
  19:Src/usbd_cdc_if.c ****   */
  20:Src/usbd_cdc_if.c **** /* USER CODE END Header */
  21:Src/usbd_cdc_if.c **** 
  22:Src/usbd_cdc_if.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/usbd_cdc_if.c **** #include "usbd_cdc_if.h"
  24:Src/usbd_cdc_if.c **** 
  25:Src/usbd_cdc_if.c **** /* USER CODE BEGIN INCLUDE */
  26:Src/usbd_cdc_if.c **** #include "dwt_stm32_delay.h"
  27:Src/usbd_cdc_if.c **** /* USER CODE END INCLUDE */
  28:Src/usbd_cdc_if.c **** 
  29:Src/usbd_cdc_if.c **** /* Private typedef -----------------------------------------------------------*/
  30:Src/usbd_cdc_if.c **** /* Private define ------------------------------------------------------------*/
  31:Src/usbd_cdc_if.c **** /* Private macro -------------------------------------------------------------*/
  32:Src/usbd_cdc_if.c **** 
  33:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PV */
  34:Src/usbd_cdc_if.c **** /* Private variables ---------------------------------------------------------*/
ARM GAS  /tmp/ccrLyWqH.s 			page 2


  35:Src/usbd_cdc_if.c **** 
  36:Src/usbd_cdc_if.c **** /* USER CODE END PV */
  37:Src/usbd_cdc_if.c **** 
  38:Src/usbd_cdc_if.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  39:Src/usbd_cdc_if.c ****   * @brief Usb device library.
  40:Src/usbd_cdc_if.c ****   * @{
  41:Src/usbd_cdc_if.c ****   */
  42:Src/usbd_cdc_if.c **** 
  43:Src/usbd_cdc_if.c **** /** @addtogroup USBD_CDC_IF
  44:Src/usbd_cdc_if.c ****   * @{
  45:Src/usbd_cdc_if.c ****   */
  46:Src/usbd_cdc_if.c **** 
  47:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_TypesDefinitions USBD_CDC_IF_Private_TypesDefinitions
  48:Src/usbd_cdc_if.c ****   * @brief Private types.
  49:Src/usbd_cdc_if.c ****   * @{
  50:Src/usbd_cdc_if.c ****   */
  51:Src/usbd_cdc_if.c **** 
  52:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_TYPES */
  53:Src/usbd_cdc_if.c **** 
  54:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_TYPES */
  55:Src/usbd_cdc_if.c **** 
  56:Src/usbd_cdc_if.c **** /**
  57:Src/usbd_cdc_if.c ****   * @}
  58:Src/usbd_cdc_if.c ****   */
  59:Src/usbd_cdc_if.c **** 
  60:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_Defines USBD_CDC_IF_Private_Defines
  61:Src/usbd_cdc_if.c ****   * @brief Private defines.
  62:Src/usbd_cdc_if.c ****   * @{
  63:Src/usbd_cdc_if.c ****   */
  64:Src/usbd_cdc_if.c **** 
  65:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_DEFINES */
  66:Src/usbd_cdc_if.c **** /* Define size for the receive and transmit buffer over CDC */
  67:Src/usbd_cdc_if.c **** /* It's up to user to redefine and/or remove those define */
  68:Src/usbd_cdc_if.c **** #define APP_RX_DATA_SIZE  1000
  69:Src/usbd_cdc_if.c **** #define APP_TX_DATA_SIZE  1000
  70:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_DEFINES */
  71:Src/usbd_cdc_if.c **** 
  72:Src/usbd_cdc_if.c **** /**
  73:Src/usbd_cdc_if.c ****   * @}
  74:Src/usbd_cdc_if.c ****   */
  75:Src/usbd_cdc_if.c **** 
  76:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_Macros USBD_CDC_IF_Private_Macros
  77:Src/usbd_cdc_if.c ****   * @brief Private macros.
  78:Src/usbd_cdc_if.c ****   * @{
  79:Src/usbd_cdc_if.c ****   */
  80:Src/usbd_cdc_if.c **** 
  81:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_MACRO */
  82:Src/usbd_cdc_if.c **** 
  83:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_MACRO */
  84:Src/usbd_cdc_if.c **** 
  85:Src/usbd_cdc_if.c **** /**
  86:Src/usbd_cdc_if.c ****   * @}
  87:Src/usbd_cdc_if.c ****   */
  88:Src/usbd_cdc_if.c **** 
  89:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_Variables USBD_CDC_IF_Private_Variables
  90:Src/usbd_cdc_if.c ****   * @brief Private variables.
  91:Src/usbd_cdc_if.c ****   * @{
ARM GAS  /tmp/ccrLyWqH.s 			page 3


  92:Src/usbd_cdc_if.c ****   */
  93:Src/usbd_cdc_if.c **** /* Create buffer for reception and transmission           */
  94:Src/usbd_cdc_if.c **** /* It's up to user to redefine and/or remove those define */
  95:Src/usbd_cdc_if.c **** /** Received data over USB are stored in this buffer      */
  96:Src/usbd_cdc_if.c **** uint8_t UserRxBufferFS[APP_RX_DATA_SIZE];
  97:Src/usbd_cdc_if.c **** 
  98:Src/usbd_cdc_if.c **** /** Data to send over USB CDC are stored in this buffer   */
  99:Src/usbd_cdc_if.c **** uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
 100:Src/usbd_cdc_if.c **** 
 101:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_VARIABLES */
 102:Src/usbd_cdc_if.c **** 
 103:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_VARIABLES */
 104:Src/usbd_cdc_if.c **** 
 105:Src/usbd_cdc_if.c **** /**
 106:Src/usbd_cdc_if.c ****   * @}
 107:Src/usbd_cdc_if.c ****   */
 108:Src/usbd_cdc_if.c **** 
 109:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Exported_Variables USBD_CDC_IF_Exported_Variables
 110:Src/usbd_cdc_if.c ****   * @brief Public variables.
 111:Src/usbd_cdc_if.c ****   * @{
 112:Src/usbd_cdc_if.c ****   */
 113:Src/usbd_cdc_if.c **** 
 114:Src/usbd_cdc_if.c **** extern USBD_HandleTypeDef hUsbDeviceFS;
 115:Src/usbd_cdc_if.c **** 
 116:Src/usbd_cdc_if.c **** /* USER CODE BEGIN EXPORTED_VARIABLES */
 117:Src/usbd_cdc_if.c **** 
 118:Src/usbd_cdc_if.c **** /* USER CODE END EXPORTED_VARIABLES */
 119:Src/usbd_cdc_if.c **** 
 120:Src/usbd_cdc_if.c **** /**
 121:Src/usbd_cdc_if.c ****   * @}
 122:Src/usbd_cdc_if.c ****   */
 123:Src/usbd_cdc_if.c **** 
 124:Src/usbd_cdc_if.c **** /** @defgroup USBD_CDC_IF_Private_FunctionPrototypes USBD_CDC_IF_Private_FunctionPrototypes
 125:Src/usbd_cdc_if.c ****   * @brief Private functions declaration.
 126:Src/usbd_cdc_if.c ****   * @{
 127:Src/usbd_cdc_if.c ****   */
 128:Src/usbd_cdc_if.c **** 
 129:Src/usbd_cdc_if.c **** static int8_t CDC_Init_FS(void);
 130:Src/usbd_cdc_if.c **** static int8_t CDC_DeInit_FS(void);
 131:Src/usbd_cdc_if.c **** static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
 132:Src/usbd_cdc_if.c **** static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
 133:Src/usbd_cdc_if.c **** 
 134:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
 135:Src/usbd_cdc_if.c **** 
 136:Src/usbd_cdc_if.c **** /* USER CODE END PRIVATE_FUNCTIONS_DECLARATION */
 137:Src/usbd_cdc_if.c **** 
 138:Src/usbd_cdc_if.c **** /**
 139:Src/usbd_cdc_if.c ****   * @}
 140:Src/usbd_cdc_if.c ****   */
 141:Src/usbd_cdc_if.c **** 
 142:Src/usbd_cdc_if.c **** USBD_CDC_ItfTypeDef USBD_Interface_fops_FS =
 143:Src/usbd_cdc_if.c **** {
 144:Src/usbd_cdc_if.c ****   CDC_Init_FS,
 145:Src/usbd_cdc_if.c ****   CDC_DeInit_FS,
 146:Src/usbd_cdc_if.c ****   CDC_Control_FS,
 147:Src/usbd_cdc_if.c ****   CDC_Receive_FS
 148:Src/usbd_cdc_if.c **** };
ARM GAS  /tmp/ccrLyWqH.s 			page 4


 149:Src/usbd_cdc_if.c **** 
 150:Src/usbd_cdc_if.c **** /* Private functions ---------------------------------------------------------*/
 151:Src/usbd_cdc_if.c **** /**
 152:Src/usbd_cdc_if.c ****   * @brief  Initializes the CDC media low layer over the FS USB IP
 153:Src/usbd_cdc_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 154:Src/usbd_cdc_if.c ****   */
 155:Src/usbd_cdc_if.c **** static int8_t CDC_Init_FS(void)
 156:Src/usbd_cdc_if.c **** {
 157:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 3 */
 158:Src/usbd_cdc_if.c ****   /* Set Application Buffers */
 159:Src/usbd_cdc_if.c ****   USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 160:Src/usbd_cdc_if.c ****   USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 161:Src/usbd_cdc_if.c ****   return (USBD_OK);
 162:Src/usbd_cdc_if.c ****   /* USER CODE END 3 */
 163:Src/usbd_cdc_if.c **** }
 164:Src/usbd_cdc_if.c **** 
 165:Src/usbd_cdc_if.c **** /**
 166:Src/usbd_cdc_if.c ****   * @brief  DeInitializes the CDC media low layer
 167:Src/usbd_cdc_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 168:Src/usbd_cdc_if.c ****   */
 169:Src/usbd_cdc_if.c **** static int8_t CDC_DeInit_FS(void)
 170:Src/usbd_cdc_if.c **** {
  25              		.loc 1 170 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
 171:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 4 */
 172:Src/usbd_cdc_if.c ****   return (USBD_OK);
 173:Src/usbd_cdc_if.c ****   /* USER CODE END 4 */
 174:Src/usbd_cdc_if.c **** }
  30              		.loc 1 174 0
  31 0000 0020     		movs	r0, #0
  32 0002 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE70:
  36              		.section	.text.CDC_Control_FS,"ax",%progbits
  37              		.align	1
  38              		.syntax unified
  39              		.thumb
  40              		.thumb_func
  41              		.fpu softvfp
  43              	CDC_Control_FS:
  44              	.LFB71:
 175:Src/usbd_cdc_if.c **** 
 176:Src/usbd_cdc_if.c **** /**
 177:Src/usbd_cdc_if.c ****   * @brief  Manage the CDC class requests
 178:Src/usbd_cdc_if.c ****   * @param  cmd: Command code
 179:Src/usbd_cdc_if.c ****   * @param  pbuf: Buffer containing command data (request parameters)
 180:Src/usbd_cdc_if.c ****   * @param  length: Number of data to be sent (in bytes)
 181:Src/usbd_cdc_if.c ****   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 182:Src/usbd_cdc_if.c ****   */
 183:Src/usbd_cdc_if.c **** static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
 184:Src/usbd_cdc_if.c **** {
  45              		.loc 1 184 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrLyWqH.s 			page 5


  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50              	.LVL0:
 185:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 5 */
 186:Src/usbd_cdc_if.c ****   switch(cmd)
 187:Src/usbd_cdc_if.c ****   {
 188:Src/usbd_cdc_if.c ****     case CDC_SEND_ENCAPSULATED_COMMAND:
 189:Src/usbd_cdc_if.c **** 
 190:Src/usbd_cdc_if.c ****     break;
 191:Src/usbd_cdc_if.c **** 
 192:Src/usbd_cdc_if.c ****     case CDC_GET_ENCAPSULATED_RESPONSE:
 193:Src/usbd_cdc_if.c **** 
 194:Src/usbd_cdc_if.c ****     break;
 195:Src/usbd_cdc_if.c **** 
 196:Src/usbd_cdc_if.c ****     case CDC_SET_COMM_FEATURE:
 197:Src/usbd_cdc_if.c **** 
 198:Src/usbd_cdc_if.c ****     break;
 199:Src/usbd_cdc_if.c **** 
 200:Src/usbd_cdc_if.c ****     case CDC_GET_COMM_FEATURE:
 201:Src/usbd_cdc_if.c **** 
 202:Src/usbd_cdc_if.c ****     break;
 203:Src/usbd_cdc_if.c **** 
 204:Src/usbd_cdc_if.c ****     case CDC_CLEAR_COMM_FEATURE:
 205:Src/usbd_cdc_if.c **** 
 206:Src/usbd_cdc_if.c ****     break;
 207:Src/usbd_cdc_if.c **** 
 208:Src/usbd_cdc_if.c ****   /*******************************************************************************/
 209:Src/usbd_cdc_if.c ****   /* Line Coding Structure                                                       */
 210:Src/usbd_cdc_if.c ****   /*-----------------------------------------------------------------------------*/
 211:Src/usbd_cdc_if.c ****   /* Offset | Field       | Size | Value  | Description                          */
 212:Src/usbd_cdc_if.c ****   /* 0      | dwDTERate   |   4  | Number |Data terminal rate, in bits per second*/
 213:Src/usbd_cdc_if.c ****   /* 4      | bCharFormat |   1  | Number | Stop bits                            */
 214:Src/usbd_cdc_if.c ****   /*                                        0 - 1 Stop bit                       */
 215:Src/usbd_cdc_if.c ****   /*                                        1 - 1.5 Stop bits                    */
 216:Src/usbd_cdc_if.c ****   /*                                        2 - 2 Stop bits                      */
 217:Src/usbd_cdc_if.c ****   /* 5      | bParityType |  1   | Number | Parity                               */
 218:Src/usbd_cdc_if.c ****   /*                                        0 - None                             */
 219:Src/usbd_cdc_if.c ****   /*                                        1 - Odd                              */
 220:Src/usbd_cdc_if.c ****   /*                                        2 - Even                             */
 221:Src/usbd_cdc_if.c ****   /*                                        3 - Mark                             */
 222:Src/usbd_cdc_if.c ****   /*                                        4 - Space                            */
 223:Src/usbd_cdc_if.c ****   /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
 224:Src/usbd_cdc_if.c ****   /*******************************************************************************/
 225:Src/usbd_cdc_if.c ****     case CDC_SET_LINE_CODING:
 226:Src/usbd_cdc_if.c **** 
 227:Src/usbd_cdc_if.c ****     break;
 228:Src/usbd_cdc_if.c **** 
 229:Src/usbd_cdc_if.c ****     case CDC_GET_LINE_CODING:
 230:Src/usbd_cdc_if.c **** 
 231:Src/usbd_cdc_if.c ****     break;
 232:Src/usbd_cdc_if.c **** 
 233:Src/usbd_cdc_if.c ****     case CDC_SET_CONTROL_LINE_STATE:
 234:Src/usbd_cdc_if.c **** 
 235:Src/usbd_cdc_if.c ****     break;
 236:Src/usbd_cdc_if.c **** 
 237:Src/usbd_cdc_if.c ****     case CDC_SEND_BREAK:
 238:Src/usbd_cdc_if.c **** 
ARM GAS  /tmp/ccrLyWqH.s 			page 6


 239:Src/usbd_cdc_if.c ****     break;
 240:Src/usbd_cdc_if.c **** 
 241:Src/usbd_cdc_if.c ****   default:
 242:Src/usbd_cdc_if.c ****     break;
 243:Src/usbd_cdc_if.c ****   }
 244:Src/usbd_cdc_if.c **** 
 245:Src/usbd_cdc_if.c ****   return (USBD_OK);
 246:Src/usbd_cdc_if.c ****   /* USER CODE END 5 */
 247:Src/usbd_cdc_if.c **** }
  51              		.loc 1 247 0
  52 0000 0020     		movs	r0, #0
  53              	.LVL1:
  54 0002 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE71:
  58              		.section	.text.CDC_Init_FS,"ax",%progbits
  59              		.align	1
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu softvfp
  65              	CDC_Init_FS:
  66              	.LFB69:
 156:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 3 */
  67              		.loc 1 156 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71 0000 10B5     		push	{r4, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
 159:Src/usbd_cdc_if.c ****   USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
  76              		.loc 1 159 0
  77 0002 064C     		ldr	r4, .L5
  78 0004 0022     		movs	r2, #0
  79 0006 0649     		ldr	r1, .L5+4
  80 0008 2046     		mov	r0, r4
  81 000a FFF7FEFF 		bl	USBD_CDC_SetTxBuffer
  82              	.LVL2:
 160:Src/usbd_cdc_if.c ****   return (USBD_OK);
  83              		.loc 1 160 0
  84 000e 0549     		ldr	r1, .L5+8
  85 0010 2046     		mov	r0, r4
  86 0012 FFF7FEFF 		bl	USBD_CDC_SetRxBuffer
  87              	.LVL3:
 163:Src/usbd_cdc_if.c **** 
  88              		.loc 1 163 0
  89 0016 0020     		movs	r0, #0
  90 0018 10BD     		pop	{r4, pc}
  91              	.L6:
  92 001a 00BF     		.align	2
  93              	.L5:
  94 001c 00000000 		.word	hUsbDeviceFS
  95 0020 00000000 		.word	UserTxBufferFS
  96 0024 00000000 		.word	UserRxBufferFS
ARM GAS  /tmp/ccrLyWqH.s 			page 7


  97              		.cfi_endproc
  98              	.LFE69:
 100              		.section	.text.CDC_Transmit_FS,"ax",%progbits
 101              		.align	1
 102              		.global	CDC_Transmit_FS
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu softvfp
 108              	CDC_Transmit_FS:
 109              	.LFB73:
 248:Src/usbd_cdc_if.c **** 
 249:Src/usbd_cdc_if.c **** /**
 250:Src/usbd_cdc_if.c ****   * @brief  Data received over USB OUT endpoint are sent over CDC interface
 251:Src/usbd_cdc_if.c ****   *         through this function.
 252:Src/usbd_cdc_if.c ****   *
 253:Src/usbd_cdc_if.c ****   *         @note
 254:Src/usbd_cdc_if.c ****   *         This function will block any OUT packet reception on USB endpoint
 255:Src/usbd_cdc_if.c ****   *         untill exiting this function. If you exit this function before transfer
 256:Src/usbd_cdc_if.c ****   *         is complete on CDC interface (ie. using DMA controller) it will result
 257:Src/usbd_cdc_if.c ****   *         in receiving more data while previous ones are still not sent.
 258:Src/usbd_cdc_if.c ****   *
 259:Src/usbd_cdc_if.c ****   * @param  Buf: Buffer of data to be received
 260:Src/usbd_cdc_if.c ****   * @param  Len: Number of data received (in bytes)
 261:Src/usbd_cdc_if.c ****   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 262:Src/usbd_cdc_if.c ****   */
 263:Src/usbd_cdc_if.c **** static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
 264:Src/usbd_cdc_if.c **** {
 265:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 6 */
 266:Src/usbd_cdc_if.c **** 	    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 267:Src/usbd_cdc_if.c **** 
 268:Src/usbd_cdc_if.c **** 	    uint32_t len = *Len;
 269:Src/usbd_cdc_if.c **** 	    RX_FIFO.dataReady = 0;
 270:Src/usbd_cdc_if.c **** 
 271:Src/usbd_cdc_if.c **** 	    while (len--)
 272:Src/usbd_cdc_if.c **** 	    {
 273:Src/usbd_cdc_if.c **** 	    	if ((FIFO_INCR(RX_FIFO.head)) == RX_FIFO.tail)
 274:Src/usbd_cdc_if.c **** 	    	{
 275:Src/usbd_cdc_if.c **** 	    		printUSB("> Buffer Overrun!\n"); 	// Notify user and reset buffer, not ideal
 276:Src/usbd_cdc_if.c **** 	    		RX_FIFO.head = 0;
 277:Src/usbd_cdc_if.c **** 	    		RX_FIFO.tail = 0;
 278:Src/usbd_cdc_if.c **** 	    		return USBD_FAIL; 				// Buffer overrun
 279:Src/usbd_cdc_if.c **** 	    	}
 280:Src/usbd_cdc_if.c **** 	    	else								// Pack data into user defined circ buffer
 281:Src/usbd_cdc_if.c **** 	    	{
 282:Src/usbd_cdc_if.c **** 	    		RX_FIFO.data[RX_FIFO.head] = *Buf++;
 283:Src/usbd_cdc_if.c **** 	    		RX_FIFO.head = FIFO_INCR(RX_FIFO.head);
 284:Src/usbd_cdc_if.c **** 	    	}
 285:Src/usbd_cdc_if.c **** 	    }
 286:Src/usbd_cdc_if.c **** 	    if ((RX_FIFO).data[RX_FIFO.head-1] == '\n')
 287:Src/usbd_cdc_if.c **** 	    	RX_FIFO.dataReady = 1;					// Set flag to allow data to be read
 288:Src/usbd_cdc_if.c **** 	    return (USBD_OK);
 289:Src/usbd_cdc_if.c ****   /* USER CODE END 6 */
 290:Src/usbd_cdc_if.c **** }
 291:Src/usbd_cdc_if.c **** 
 292:Src/usbd_cdc_if.c **** /**
 293:Src/usbd_cdc_if.c ****   * @brief  CDC_Transmit_FS
ARM GAS  /tmp/ccrLyWqH.s 			page 8


 294:Src/usbd_cdc_if.c ****   *         Data to send over USB IN endpoint are sent over CDC interface
 295:Src/usbd_cdc_if.c ****   *         through this function.
 296:Src/usbd_cdc_if.c ****   *         @note
 297:Src/usbd_cdc_if.c ****   *
 298:Src/usbd_cdc_if.c ****   *
 299:Src/usbd_cdc_if.c ****   * @param  Buf: Buffer of data to be sent
 300:Src/usbd_cdc_if.c ****   * @param  Len: Number of data to be sent (in bytes)
 301:Src/usbd_cdc_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 302:Src/usbd_cdc_if.c ****   */
 303:Src/usbd_cdc_if.c **** uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
 304:Src/usbd_cdc_if.c **** {
 110              		.loc 1 304 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              	.LVL4:
 305:Src/usbd_cdc_if.c ****   uint8_t result = USBD_OK;
 306:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 7 */
 307:Src/usbd_cdc_if.c ****   USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 115              		.loc 1 307 0
 116 0000 094B     		ldr	r3, .L15
 117 0002 D3F8B832 		ldr	r3, [r3, #696]
 118              	.LVL5:
 308:Src/usbd_cdc_if.c ****   if (hcdc->TxState != 0){
 119              		.loc 1 308 0
 120 0006 D3F81432 		ldr	r3, [r3, #532]
 121              	.LVL6:
 122 000a 0BB1     		cbz	r3, .L14
 309:Src/usbd_cdc_if.c **** 	  return USBD_BUSY;
 123              		.loc 1 309 0
 124 000c 0120     		movs	r0, #1
 125              	.LVL7:
 310:Src/usbd_cdc_if.c ****   }
 311:Src/usbd_cdc_if.c ****   USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 312:Src/usbd_cdc_if.c ****   result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 313:Src/usbd_cdc_if.c ****   /* USER CODE END 7 */
 314:Src/usbd_cdc_if.c ****   return result;
 315:Src/usbd_cdc_if.c **** }
 126              		.loc 1 315 0
 127 000e 7047     		bx	lr
 128              	.LVL8:
 129              	.L14:
 304:Src/usbd_cdc_if.c ****   uint8_t result = USBD_OK;
 130              		.loc 1 304 0
 131 0010 10B5     		push	{r4, lr}
 132              	.LCFI1:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 4, -8
 135              		.cfi_offset 14, -4
 136 0012 0A46     		mov	r2, r1
 137 0014 0146     		mov	r1, r0
 138              	.LVL9:
 311:Src/usbd_cdc_if.c ****   result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 139              		.loc 1 311 0
 140 0016 044C     		ldr	r4, .L15
 141              	.LVL10:
 142 0018 2046     		mov	r0, r4
ARM GAS  /tmp/ccrLyWqH.s 			page 9


 143              	.LVL11:
 144 001a FFF7FEFF 		bl	USBD_CDC_SetTxBuffer
 145              	.LVL12:
 312:Src/usbd_cdc_if.c ****   /* USER CODE END 7 */
 146              		.loc 1 312 0
 147 001e 2046     		mov	r0, r4
 148 0020 FFF7FEFF 		bl	USBD_CDC_TransmitPacket
 149              	.LVL13:
 150              		.loc 1 315 0
 151 0024 10BD     		pop	{r4, pc}
 152              	.L16:
 153 0026 00BF     		.align	2
 154              	.L15:
 155 0028 00000000 		.word	hUsbDeviceFS
 156              		.cfi_endproc
 157              	.LFE73:
 159              		.section	.text.printUSB,"ax",%progbits
 160              		.align	1
 161              		.global	printUSB
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu softvfp
 167              	printUSB:
 168              	.LFB74:
 316:Src/usbd_cdc_if.c **** 
 317:Src/usbd_cdc_if.c **** /* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
 318:Src/usbd_cdc_if.c **** 
 319:Src/usbd_cdc_if.c **** void printUSB(char *str)
 320:Src/usbd_cdc_if.c **** {
 169              		.loc 1 320 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              	.LVL14:
 174 0000 38B5     		push	{r3, r4, r5, lr}
 175              	.LCFI2:
 176              		.cfi_def_cfa_offset 16
 177              		.cfi_offset 3, -16
 178              		.cfi_offset 4, -12
 179              		.cfi_offset 5, -8
 180              		.cfi_offset 14, -4
 181 0002 0446     		mov	r4, r0
 321:Src/usbd_cdc_if.c **** 	CDC_Transmit_FS(str, strlen(str));
 182              		.loc 1 321 0
 183 0004 FFF7FEFF 		bl	strlen
 184              	.LVL15:
 185 0008 81B2     		uxth	r1, r0
 186 000a 2046     		mov	r0, r4
 187 000c FFF7FEFF 		bl	CDC_Transmit_FS
 188              	.LVL16:
 189 0010 6424     		movs	r4, #100
 190              	.LVL17:
 191              	.LBB4:
 192              	.LBB5:
 193              		.file 2 "Inc/dwt_stm32_delay.h"
   1:Inc/dwt_stm32_delay.h **** #ifndef DWT_STM32_DELAY_H
ARM GAS  /tmp/ccrLyWqH.s 			page 10


   2:Inc/dwt_stm32_delay.h **** #define DWT_STM32_DELAY_H
   3:Inc/dwt_stm32_delay.h **** 
   4:Inc/dwt_stm32_delay.h **** #ifdef __cplusplus
   5:Inc/dwt_stm32_delay.h **** extern "C" {
   6:Inc/dwt_stm32_delay.h **** #endif
   7:Inc/dwt_stm32_delay.h **** 
   8:Inc/dwt_stm32_delay.h **** #include "stm32f1xx_hal.h"
   9:Inc/dwt_stm32_delay.h **** 
  10:Inc/dwt_stm32_delay.h **** /**
  11:Inc/dwt_stm32_delay.h ****  * @brief  Initializes DWT_Cycle_Count for DWT_Delay_us function
  12:Inc/dwt_stm32_delay.h ****  * @return Error DWT counter
  13:Inc/dwt_stm32_delay.h ****  *         1: DWT counter Error
  14:Inc/dwt_stm32_delay.h ****  *         0: DWT counter works
  15:Inc/dwt_stm32_delay.h ****  */
  16:Inc/dwt_stm32_delay.h **** uint32_t DWT_Delay_Init(void);
  17:Inc/dwt_stm32_delay.h **** 
  18:Inc/dwt_stm32_delay.h **** /**
  19:Inc/dwt_stm32_delay.h ****  * @brief  This function provides a delay (in microseconds)
  20:Inc/dwt_stm32_delay.h ****  * @param  microseconds: delay in microseconds
  21:Inc/dwt_stm32_delay.h ****  */
  22:Inc/dwt_stm32_delay.h **** __STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
  23:Inc/dwt_stm32_delay.h **** {
  24:Inc/dwt_stm32_delay.h ****   uint32_t clk_cycle_start = DWT->CYCCNT;
 194              		.loc 2 24 0
 195 0012 084B     		ldr	r3, .L20
 196 0014 5D68     		ldr	r5, [r3, #4]
 197              	.LVL18:
  25:Inc/dwt_stm32_delay.h **** 
  26:Inc/dwt_stm32_delay.h ****   /* Go to number of cycles for system */
  27:Inc/dwt_stm32_delay.h ****   microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 198              		.loc 2 27 0
 199 0016 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 200              	.LVL19:
 201 001a 074B     		ldr	r3, .L20+4
 202 001c A3FB0030 		umull	r3, r0, r3, r0
 203 0020 800C     		lsrs	r0, r0, #18
 204 0022 04FB00F4 		mul	r4, r4, r0
 205              	.L18:
  28:Inc/dwt_stm32_delay.h **** 
  29:Inc/dwt_stm32_delay.h ****   /* Delay till end */
  30:Inc/dwt_stm32_delay.h ****   while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 206              		.loc 2 30 0
 207 0026 034B     		ldr	r3, .L20
 208 0028 5B68     		ldr	r3, [r3, #4]
 209 002a 5B1B     		subs	r3, r3, r5
 210 002c A342     		cmp	r3, r4
 211 002e FAD3     		bcc	.L18
 212              	.LBE5:
 213              	.LBE4:
 322:Src/usbd_cdc_if.c **** 	DWT_Delay_us(100);
 323:Src/usbd_cdc_if.c **** }
 214              		.loc 1 323 0
 215 0030 38BD     		pop	{r3, r4, r5, pc}
 216              	.LVL20:
 217              	.L21:
 218 0032 00BF     		.align	2
 219              	.L20:
ARM GAS  /tmp/ccrLyWqH.s 			page 11


 220 0034 001000E0 		.word	-536866816
 221 0038 83DE1B43 		.word	1125899907
 222              		.cfi_endproc
 223              	.LFE74:
 225              		.section	.text.CDC_Receive_FS,"ax",%progbits
 226              		.align	1
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu softvfp
 232              	CDC_Receive_FS:
 233              	.LFB72:
 264:Src/usbd_cdc_if.c ****   /* USER CODE BEGIN 6 */
 234              		.loc 1 264 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              	.LVL21:
 239 0000 38B5     		push	{r3, r4, r5, lr}
 240              	.LCFI3:
 241              		.cfi_def_cfa_offset 16
 242              		.cfi_offset 3, -16
 243              		.cfi_offset 4, -12
 244              		.cfi_offset 5, -8
 245              		.cfi_offset 14, -4
 246 0002 0446     		mov	r4, r0
 247 0004 0D46     		mov	r5, r1
 266:Src/usbd_cdc_if.c **** 
 248              		.loc 1 266 0
 249 0006 1948     		ldr	r0, .L32
 250              	.LVL22:
 251 0008 FFF7FEFF 		bl	USBD_CDC_ReceivePacket
 252              	.LVL23:
 268:Src/usbd_cdc_if.c **** 	    RX_FIFO.dataReady = 0;
 253              		.loc 1 268 0
 254 000c 2B68     		ldr	r3, [r5]
 255              	.LVL24:
 269:Src/usbd_cdc_if.c **** 
 256              		.loc 1 269 0
 257 000e 184A     		ldr	r2, .L32+4
 258 0010 0021     		movs	r1, #0
 259 0012 82F88810 		strb	r1, [r2, #136]
 260              	.LVL25:
 261              	.L23:
 271:Src/usbd_cdc_if.c **** 	    {
 262              		.loc 1 271 0
 263 0016 581E     		subs	r0, r3, #1
 264              	.LVL26:
 265 0018 C3B1     		cbz	r3, .L29
 273:Src/usbd_cdc_if.c **** 	    	{
 266              		.loc 1 273 0
 267 001a 1549     		ldr	r1, .L32+4
 268 001c 0A68     		ldr	r2, [r1]
 269 001e 531C     		adds	r3, r2, #1
 270 0020 03F07F03 		and	r3, r3, #127
 271 0024 4968     		ldr	r1, [r1, #4]
 272 0026 8B42     		cmp	r3, r1
ARM GAS  /tmp/ccrLyWqH.s 			page 12


 273 0028 07D0     		beq	.L30
 274              	.LVL27:
 282:Src/usbd_cdc_if.c **** 	    		RX_FIFO.head = FIFO_INCR(RX_FIFO.head);
 275              		.loc 1 282 0
 276 002a 2578     		ldrb	r5, [r4]	@ zero_extendqisi2
 277 002c 1049     		ldr	r1, .L32+4
 278 002e 0A44     		add	r2, r2, r1
 279 0030 1572     		strb	r5, [r2, #8]
 283:Src/usbd_cdc_if.c **** 	    	}
 280              		.loc 1 283 0
 281 0032 0B60     		str	r3, [r1]
 271:Src/usbd_cdc_if.c **** 	    {
 282              		.loc 1 271 0
 283 0034 0346     		mov	r3, r0
 282:Src/usbd_cdc_if.c **** 	    		RX_FIFO.head = FIFO_INCR(RX_FIFO.head);
 284              		.loc 1 282 0
 285 0036 0134     		adds	r4, r4, #1
 286              	.LVL28:
 287 0038 EDE7     		b	.L23
 288              	.L30:
 275:Src/usbd_cdc_if.c **** 	    		RX_FIFO.head = 0;
 289              		.loc 1 275 0
 290 003a 0E48     		ldr	r0, .L32+8
 291              	.LVL29:
 292 003c FFF7FEFF 		bl	printUSB
 293              	.LVL30:
 276:Src/usbd_cdc_if.c **** 	    		RX_FIFO.tail = 0;
 294              		.loc 1 276 0
 295 0040 0B4B     		ldr	r3, .L32+4
 296 0042 0022     		movs	r2, #0
 297 0044 1A60     		str	r2, [r3]
 277:Src/usbd_cdc_if.c **** 	    		return USBD_FAIL; 				// Buffer overrun
 298              		.loc 1 277 0
 299 0046 5A60     		str	r2, [r3, #4]
 278:Src/usbd_cdc_if.c **** 	    	}
 300              		.loc 1 278 0
 301 0048 0220     		movs	r0, #2
 302              	.L25:
 290:Src/usbd_cdc_if.c **** 
 303              		.loc 1 290 0
 304 004a 38BD     		pop	{r3, r4, r5, pc}
 305              	.LVL31:
 306              	.L29:
 286:Src/usbd_cdc_if.c **** 	    	RX_FIFO.dataReady = 1;					// Set flag to allow data to be read
 307              		.loc 1 286 0
 308 004c 084B     		ldr	r3, .L32+4
 309 004e 1A68     		ldr	r2, [r3]
 310 0050 013A     		subs	r2, r2, #1
 311 0052 1344     		add	r3, r3, r2
 312 0054 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 313 0056 0A2B     		cmp	r3, #10
 314 0058 01D0     		beq	.L31
 288:Src/usbd_cdc_if.c ****   /* USER CODE END 6 */
 315              		.loc 1 288 0
 316 005a 0020     		movs	r0, #0
 317              	.LVL32:
 318 005c F5E7     		b	.L25
ARM GAS  /tmp/ccrLyWqH.s 			page 13


 319              	.LVL33:
 320              	.L31:
 287:Src/usbd_cdc_if.c **** 	    return (USBD_OK);
 321              		.loc 1 287 0
 322 005e 044B     		ldr	r3, .L32+4
 323 0060 0122     		movs	r2, #1
 324 0062 83F88820 		strb	r2, [r3, #136]
 288:Src/usbd_cdc_if.c ****   /* USER CODE END 6 */
 325              		.loc 1 288 0
 326 0066 0020     		movs	r0, #0
 327              	.LVL34:
 328 0068 EFE7     		b	.L25
 329              	.L33:
 330 006a 00BF     		.align	2
 331              	.L32:
 332 006c 00000000 		.word	hUsbDeviceFS
 333 0070 00000000 		.word	RX_FIFO
 334 0074 00000000 		.word	.LC0
 335              		.cfi_endproc
 336              	.LFE72:
 338              		.section	.text.scanUSB,"ax",%progbits
 339              		.align	1
 340              		.global	scanUSB
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu softvfp
 346              	scanUSB:
 347              	.LFB75:
 324:Src/usbd_cdc_if.c **** 
 325:Src/usbd_cdc_if.c **** uint8_t scanUSB(uint8_t *userBuf, uint8_t bufSize)
 326:Src/usbd_cdc_if.c **** {
 348              		.loc 1 326 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353              	.LVL35:
 354 0000 10B4     		push	{r4}
 355              	.LCFI4:
 356              		.cfi_def_cfa_offset 4
 357              		.cfi_offset 4, -4
 358              	.L35:
 327:Src/usbd_cdc_if.c **** 
 328:Src/usbd_cdc_if.c ****     while (!RX_FIFO.dataReady)
 359              		.loc 1 328 0 discriminator 1
 360 0002 114B     		ldr	r3, .L41
 361 0004 93F88830 		ldrb	r3, [r3, #136]	@ zero_extendqisi2
 362 0008 002B     		cmp	r3, #0
 363 000a FAD0     		beq	.L35
 364              	.LVL36:
 365              	.LBB6:
 329:Src/usbd_cdc_if.c ****     {
 330:Src/usbd_cdc_if.c ****     	// Wait for data to be ready
 331:Src/usbd_cdc_if.c ****     }
 332:Src/usbd_cdc_if.c **** 
 333:Src/usbd_cdc_if.c **** 
ARM GAS  /tmp/ccrLyWqH.s 			page 14


 334:Src/usbd_cdc_if.c **** 	if (RX_FIFO.dataReady)
 335:Src/usbd_cdc_if.c **** 	{
 336:Src/usbd_cdc_if.c **** 		uint32_t count = 0;
 337:Src/usbd_cdc_if.c **** 		RX_FIFO.dataReady = 0;
 366              		.loc 1 337 0
 367 000c 0023     		movs	r3, #0
 368 000e 0E4A     		ldr	r2, .L41
 369 0010 82F88830 		strb	r3, [r2, #136]
 338:Src/usbd_cdc_if.c **** 
 339:Src/usbd_cdc_if.c **** 		while (RX_FIFO.head != RX_FIFO.tail)
 370              		.loc 1 339 0
 371 0014 09E0     		b	.L36
 372              	.LVL37:
 373              	.L37:
 340:Src/usbd_cdc_if.c **** 		{
 341:Src/usbd_cdc_if.c **** 			count++;
 342:Src/usbd_cdc_if.c **** 			userBuf[count-1] = RX_FIFO.data[RX_FIFO.tail];
 374              		.loc 1 342 0
 375 0016 0C4C     		ldr	r4, .L41
 376 0018 2244     		add	r2, r2, r4
 377 001a 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 378 001c C254     		strb	r2, [r0, r3]
 343:Src/usbd_cdc_if.c **** 			RX_FIFO.tail=FIFO_INCR(RX_FIFO.tail);
 379              		.loc 1 343 0
 380 001e 6268     		ldr	r2, [r4, #4]
 381 0020 0132     		adds	r2, r2, #1
 382 0022 02F07F02 		and	r2, r2, #127
 383 0026 6260     		str	r2, [r4, #4]
 341:Src/usbd_cdc_if.c **** 			userBuf[count-1] = RX_FIFO.data[RX_FIFO.tail];
 384              		.loc 1 341 0
 385 0028 0133     		adds	r3, r3, #1
 386              	.LVL38:
 387              	.L36:
 339:Src/usbd_cdc_if.c **** 		{
 388              		.loc 1 339 0
 389 002a 074A     		ldr	r2, .L41
 390 002c 1468     		ldr	r4, [r2]
 391 002e 5268     		ldr	r2, [r2, #4]
 392 0030 9442     		cmp	r4, r2
 393 0032 F0D1     		bne	.L37
 394 0034 02E0     		b	.L38
 395              	.L39:
 344:Src/usbd_cdc_if.c **** 		}
 345:Src/usbd_cdc_if.c **** 
 346:Src/usbd_cdc_if.c **** 		while (count < bufSize) // Write null terminators to rest of buffer
 347:Src/usbd_cdc_if.c **** 		{
 348:Src/usbd_cdc_if.c **** 			userBuf[count] = '\0';
 396              		.loc 1 348 0
 397 0036 0022     		movs	r2, #0
 398 0038 C254     		strb	r2, [r0, r3]
 349:Src/usbd_cdc_if.c **** 			count++;
 399              		.loc 1 349 0
 400 003a 0133     		adds	r3, r3, #1
 401              	.LVL39:
 402              	.L38:
 346:Src/usbd_cdc_if.c **** 		{
 403              		.loc 1 346 0
ARM GAS  /tmp/ccrLyWqH.s 			page 15


 404 003c 9942     		cmp	r1, r3
 405 003e FAD8     		bhi	.L39
 406              	.LBE6:
 350:Src/usbd_cdc_if.c **** 		}
 351:Src/usbd_cdc_if.c **** 	}
 352:Src/usbd_cdc_if.c **** 
 353:Src/usbd_cdc_if.c **** 	return 1;
 354:Src/usbd_cdc_if.c **** }
 407              		.loc 1 354 0
 408 0040 0120     		movs	r0, #1
 409              	.LVL40:
 410 0042 10BC     		pop	{r4}
 411              	.LCFI5:
 412              		.cfi_restore 4
 413              		.cfi_def_cfa_offset 0
 414 0044 7047     		bx	lr
 415              	.L42:
 416 0046 00BF     		.align	2
 417              	.L41:
 418 0048 00000000 		.word	RX_FIFO
 419              		.cfi_endproc
 420              	.LFE75:
 422              		.global	USBD_Interface_fops_FS
 423              		.comm	UserTxBufferFS,1000,4
 424              		.comm	UserRxBufferFS,1000,4
 425              		.section	.data.USBD_Interface_fops_FS,"aw",%progbits
 426              		.align	2
 429              	USBD_Interface_fops_FS:
 430 0000 00000000 		.word	CDC_Init_FS
 431 0004 00000000 		.word	CDC_DeInit_FS
 432 0008 00000000 		.word	CDC_Control_FS
 433 000c 00000000 		.word	CDC_Receive_FS
 434              		.section	.rodata.CDC_Receive_FS.str1.4,"aMS",%progbits,1
 435              		.align	2
 436              	.LC0:
 437 0000 3E204275 		.ascii	"> Buffer Overrun!\012\000"
 437      66666572 
 437      204F7665 
 437      7272756E 
 437      210A00
 438              		.text
 439              	.Letext0:
 440              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 441              		.file 4 "/usr/include/newlib/sys/lock.h"
 442              		.file 5 "/usr/include/newlib/sys/_types.h"
 443              		.file 6 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 444              		.file 7 "/usr/include/newlib/sys/reent.h"
 445              		.file 8 "/usr/include/newlib/sys/_stdint.h"
 446              		.file 9 "/usr/include/newlib/stdlib.h"
 447              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 448              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 449              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 450              		.file 13 "Inc/main.h"
 451              		.file 14 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 452              		.file 15 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 453              		.file 16 "Inc/usbd_cdc_if.h"
 454              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
ARM GAS  /tmp/ccrLyWqH.s 			page 16


 455              		.file 18 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccrLyWqH.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_cdc_if.c
     /tmp/ccrLyWqH.s:16     .text.CDC_DeInit_FS:0000000000000000 $t
     /tmp/ccrLyWqH.s:22     .text.CDC_DeInit_FS:0000000000000000 CDC_DeInit_FS
     /tmp/ccrLyWqH.s:37     .text.CDC_Control_FS:0000000000000000 $t
     /tmp/ccrLyWqH.s:43     .text.CDC_Control_FS:0000000000000000 CDC_Control_FS
     /tmp/ccrLyWqH.s:59     .text.CDC_Init_FS:0000000000000000 $t
     /tmp/ccrLyWqH.s:65     .text.CDC_Init_FS:0000000000000000 CDC_Init_FS
     /tmp/ccrLyWqH.s:94     .text.CDC_Init_FS:000000000000001c $d
                            *COM*:00000000000003e8 UserTxBufferFS
                            *COM*:00000000000003e8 UserRxBufferFS
     /tmp/ccrLyWqH.s:101    .text.CDC_Transmit_FS:0000000000000000 $t
     /tmp/ccrLyWqH.s:108    .text.CDC_Transmit_FS:0000000000000000 CDC_Transmit_FS
     /tmp/ccrLyWqH.s:155    .text.CDC_Transmit_FS:0000000000000028 $d
     /tmp/ccrLyWqH.s:160    .text.printUSB:0000000000000000 $t
     /tmp/ccrLyWqH.s:167    .text.printUSB:0000000000000000 printUSB
     /tmp/ccrLyWqH.s:220    .text.printUSB:0000000000000034 $d
     /tmp/ccrLyWqH.s:226    .text.CDC_Receive_FS:0000000000000000 $t
     /tmp/ccrLyWqH.s:232    .text.CDC_Receive_FS:0000000000000000 CDC_Receive_FS
     /tmp/ccrLyWqH.s:332    .text.CDC_Receive_FS:000000000000006c $d
     /tmp/ccrLyWqH.s:339    .text.scanUSB:0000000000000000 $t
     /tmp/ccrLyWqH.s:346    .text.scanUSB:0000000000000000 scanUSB
     /tmp/ccrLyWqH.s:418    .text.scanUSB:0000000000000048 $d
     /tmp/ccrLyWqH.s:429    .data.USBD_Interface_fops_FS:0000000000000000 USBD_Interface_fops_FS
     /tmp/ccrLyWqH.s:426    .data.USBD_Interface_fops_FS:0000000000000000 $d
     /tmp/ccrLyWqH.s:435    .rodata.CDC_Receive_FS.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
USBD_CDC_SetTxBuffer
USBD_CDC_SetRxBuffer
hUsbDeviceFS
USBD_CDC_TransmitPacket
strlen
HAL_RCC_GetHCLKFreq
USBD_CDC_ReceivePacket
RX_FIFO
