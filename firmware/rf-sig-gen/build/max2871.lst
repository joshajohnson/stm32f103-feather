ARM GAS  /tmp/ccHEr0ck.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"max2871.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.max2871SpiWrite,"ax",%progbits
  16              		.align	1
  17              		.global	max2871SpiWrite
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	max2871SpiWrite:
  24              	.LFB70:
  25              		.file 1 "Src/max2871.c"
   1:Src/max2871.c **** #include "main.h"
   2:Src/max2871.c **** #include "max2871.h"
   3:Src/max2871.c **** #include "max2871_registers.h"
   4:Src/max2871.c **** #include "dwt_stm32_delay.h"
   5:Src/max2871.c **** #include "usbd_cdc_if.h"
   6:Src/max2871.c **** #include <string.h>
   7:Src/max2871.c **** #include <stdlib.h>
   8:Src/max2871.c **** #include <stdio.h>
   9:Src/max2871.c **** #include <math.h>
  10:Src/max2871.c **** 
  11:Src/max2871.c **** #define MOD 4095
  12:Src/max2871.c **** #define STR1_SIZE 128
  13:Src/max2871.c **** uint8_t str1[STR1_SIZE] = "";
  14:Src/max2871.c **** 
  15:Src/max2871.c **** struct MAX2871Struct max2871Status;
  16:Src/max2871.c **** 
  17:Src/max2871.c **** // Setup of the MAX2871 PLL, 50MHz, output off
  18:Src/max2871.c **** void max2871Setup(struct MAX2871Struct *max2871Status)
  19:Src/max2871.c **** {
  20:Src/max2871.c **** 	// Set to initial known state
  21:Src/max2871.c **** 	max2871ChipEnable(max2871Status);
  22:Src/max2871.c **** 	max2871RFDisable(max2871Status);
  23:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_CLK_GPIO_Port, MAX_CLK_Pin, 0);
  24:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_DAT_GPIO_Port, MAX_DAT_Pin, 0);
  25:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_MUX_GPIO_Port, MAX_MUX_Pin, 0);
  26:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_LE_GPIO_Port, MAX_LE_Pin, 1);
  27:Src/max2871.c **** 
  28:Src/max2871.c **** 	max2871RegsInit();
  29:Src/max2871.c **** 
  30:Src/max2871.c **** 	// Initial writing of registers, with wait time
  31:Src/max2871.c **** 	uint32_t txReg;
  32:Src/max2871.c **** 	for (int j = 1; j >= 0; j--)
  33:Src/max2871.c **** 	{
ARM GAS  /tmp/ccHEr0ck.s 			page 2


  34:Src/max2871.c **** 		for (int i = 5; i >= 0; i--)
  35:Src/max2871.c **** 		{
  36:Src/max2871.c **** 			txReg = max2871GetRegister(i);
  37:Src/max2871.c **** 			max2871SpiWrite(txReg);
  38:Src/max2871.c **** 			if (i == 5) HAL_Delay(20);
  39:Src/max2871.c **** 		}
  40:Src/max2871.c **** 		HAL_Delay(20);
  41:Src/max2871.c **** 	}
  42:Src/max2871.c **** 
  43:Src/max2871.c **** 	// Set initial register values
  44:Src/max2871.c **** 	max2871Set_INT(0); 		// Frac N
  45:Src/max2871.c **** 	max2871Set_N(83);		// Init to 50Mhz
  46:Src/max2871.c **** 	max2871Set_FRAC(1365);
  47:Src/max2871.c **** 	max2871Set_CPOC(0);
  48:Src/max2871.c **** 	max2871Set_CPL(0);
  49:Src/max2871.c **** 	max2871Set_CPT(0);
  50:Src/max2871.c **** 	max2871Set_P(1);
  51:Src/max2871.c **** 	max2871Set_M(4095);
  52:Src/max2871.c **** 	max2871Set_LDS(1);
  53:Src/max2871.c **** 	max2871Set_SDN(0);
  54:Src/max2871.c **** 	max2871Set_MUX(0xC); 	// Reg 6 Readback 0xC
  55:Src/max2871.c **** 	max2871Set_DBR(1);
  56:Src/max2871.c **** 	max2871Set_RDIV2(0);
  57:Src/max2871.c **** 	max2871Set_R(1); 		// 38.4MHz f_PFD
  58:Src/max2871.c **** 	max2871Set_REG4DB(0);
  59:Src/max2871.c **** 	max2871Set_CP(15);
  60:Src/max2871.c **** 	max2871Set_LDF(0);
  61:Src/max2871.c **** 	max2871Set_LDP(0);
  62:Src/max2871.c **** 	max2871Set_PDP(1);
  63:Src/max2871.c **** 	max2871Set_SHDN(0);
  64:Src/max2871.c **** 	max2871Set_TRI(0);
  65:Src/max2871.c **** 	max2871Set_RST(0);
  66:Src/max2871.c **** 	max2871Set_VCO(0);
  67:Src/max2871.c **** 	max2871Set_VAS_SHDN(0);
  68:Src/max2871.c **** 	max2871Set_VAS_TEMP(1);
  69:Src/max2871.c **** 	max2871Set_CSM(0);
  70:Src/max2871.c **** 	max2871Set_MUTEDEL(1);
  71:Src/max2871.c **** 	max2871Set_CDM(0);
  72:Src/max2871.c **** 	max2871Set_CDIV(38);
  73:Src/max2871.c **** 	max2871Set_SDLDO(0);
  74:Src/max2871.c **** 	max2871Set_SDDIV(0);
  75:Src/max2871.c **** 	max2871Set_SDREF(0);
  76:Src/max2871.c **** 	max2871Set_BS(768);		//BS = fPFD / 50KHz
  77:Src/max2871.c **** 	max2871Set_FB(1);
  78:Src/max2871.c **** 	max2871Set_DIVA(6);
  79:Src/max2871.c **** 	max2871Set_SDVCO(0);
  80:Src/max2871.c **** 	max2871Set_MTLD(1);
  81:Src/max2871.c **** 	max2871Set_BDIV(0);
  82:Src/max2871.c **** 	max2871Set_RFB_EN(0);
  83:Src/max2871.c **** 	max2871Set_BPWR(0);
  84:Src/max2871.c **** 	max2871Set_RFA_EN(0);	// Begin with power off
  85:Src/max2871.c **** 	max2871Set_APWR(3);
  86:Src/max2871.c **** 	max2871Set_SDPLL(0);
  87:Src/max2871.c **** 	max2871Set_F01(0);
  88:Src/max2871.c **** 	max2871Set_LD(1);
  89:Src/max2871.c **** 	max2871Set_Reserved();
  90:Src/max2871.c **** 
ARM GAS  /tmp/ccHEr0ck.s 			page 3


  91:Src/max2871.c **** 	// Update info in struct
  92:Src/max2871.c **** 	max2871Status->RFA_EN = 0;
  93:Src/max2871.c **** 	max2871Status->rfPower = 3;
  94:Src/max2871.c **** 	max2871Status->frequency = 50;
  95:Src/max2871.c **** 
  96:Src/max2871.c **** 	// Send updated registers over SPI
  97:Src/max2871.c **** 	max2871WriteRegisters();
  98:Src/max2871.c **** 	HAL_Delay(10);
  99:Src/max2871.c **** 
 100:Src/max2871.c **** 	// Check if the PLL has locked
 101:Src/max2871.c **** 	max2871CheckLD(max2871Status);
 102:Src/max2871.c **** }
 103:Src/max2871.c **** 
 104:Src/max2871.c **** // Writes given register to MAX2871
 105:Src/max2871.c **** void max2871SpiWrite(uint32_t r)
 106:Src/max2871.c **** {
  26              		.loc 1 106 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 0646     		mov	r6, r0
 107:Src/max2871.c **** 	// Ensure LE high
 108:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_LE_GPIO_Port, MAX_LE_Pin, 1);
  39              		.loc 1 108 0
  40 0004 2C4C     		ldr	r4, .L8
  41 0006 0122     		movs	r2, #1
  42 0008 0221     		movs	r1, #2
  43 000a 2046     		mov	r0, r4
  44              	.LVL1:
  45 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL2:
 109:Src/max2871.c **** 
 110:Src/max2871.c **** 	// Start by bringing LE low
 111:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_LE_GPIO_Port, MAX_LE_Pin, 0);
  47              		.loc 1 111 0
  48 0010 0022     		movs	r2, #0
  49 0012 0221     		movs	r1, #2
  50 0014 2046     		mov	r0, r4
  51 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
  52              	.LVL3:
  53              	.LBB9:
 112:Src/max2871.c **** 
 113:Src/max2871.c **** 	// Transmit all the bits!
 114:Src/max2871.c **** 	for (int8_t bit = 32; bit > 0; bit--)
  54              		.loc 1 114 0
  55 001a 2025     		movs	r5, #32
  56 001c 31E0     		b	.L2
  57              	.LVL4:
  58              	.L5:
ARM GAS  /tmp/ccHEr0ck.s 			page 4


 115:Src/max2871.c **** 	{
 116:Src/max2871.c **** 		HAL_GPIO_WritePin(MAX_DAT_GPIO_Port, MAX_DAT_Pin, ((r) & (1 << bit - 1)) ? 1 : 0);
  59              		.loc 1 116 0 discriminator 3
  60 001e 6B1E     		subs	r3, r5, #1
  61 0020 0124     		movs	r4, #1
  62 0022 04FA03F3 		lsl	r3, r4, r3
  63 0026 3342     		tst	r3, r6
  64 0028 14BF     		ite	ne
  65 002a 2246     		movne	r2, r4
  66 002c 0022     		moveq	r2, #0
  67 002e 1021     		movs	r1, #16
  68 0030 2248     		ldr	r0, .L8+4
  69 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL5:
  71              	.LBB10:
  72              	.LBB11:
  73              		.file 2 "Inc/dwt_stm32_delay.h"
   1:Inc/dwt_stm32_delay.h **** #ifndef DWT_STM32_DELAY_H
   2:Inc/dwt_stm32_delay.h **** #define DWT_STM32_DELAY_H
   3:Inc/dwt_stm32_delay.h **** 
   4:Inc/dwt_stm32_delay.h **** #ifdef __cplusplus
   5:Inc/dwt_stm32_delay.h **** extern "C" {
   6:Inc/dwt_stm32_delay.h **** #endif
   7:Inc/dwt_stm32_delay.h **** 
   8:Inc/dwt_stm32_delay.h **** #include "stm32f1xx_hal.h"
   9:Inc/dwt_stm32_delay.h **** 
  10:Inc/dwt_stm32_delay.h **** /**
  11:Inc/dwt_stm32_delay.h ****  * @brief  Initializes DWT_Cycle_Count for DWT_Delay_us function
  12:Inc/dwt_stm32_delay.h ****  * @return Error DWT counter
  13:Inc/dwt_stm32_delay.h ****  *         1: DWT counter Error
  14:Inc/dwt_stm32_delay.h ****  *         0: DWT counter works
  15:Inc/dwt_stm32_delay.h ****  */
  16:Inc/dwt_stm32_delay.h **** uint32_t DWT_Delay_Init(void);
  17:Inc/dwt_stm32_delay.h **** 
  18:Inc/dwt_stm32_delay.h **** /**
  19:Inc/dwt_stm32_delay.h ****  * @brief  This function provides a delay (in microseconds)
  20:Inc/dwt_stm32_delay.h ****  * @param  microseconds: delay in microseconds
  21:Inc/dwt_stm32_delay.h ****  */
  22:Inc/dwt_stm32_delay.h **** __STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
  23:Inc/dwt_stm32_delay.h **** {
  24:Inc/dwt_stm32_delay.h ****   uint32_t clk_cycle_start = DWT->CYCCNT;
  74              		.loc 2 24 0 discriminator 3
  75 0036 224B     		ldr	r3, .L8+8
  76 0038 5C68     		ldr	r4, [r3, #4]
  77              	.LVL6:
  25:Inc/dwt_stm32_delay.h **** 
  26:Inc/dwt_stm32_delay.h ****   /* Go to number of cycles for system */
  27:Inc/dwt_stm32_delay.h ****   microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
  78              		.loc 2 27 0 discriminator 3
  79 003a FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
  80              	.LVL7:
  81 003e 214B     		ldr	r3, .L8+12
  82 0040 A3FB0030 		umull	r3, r0, r3, r0
  83 0044 800C     		lsrs	r0, r0, #18
  84              	.L3:
  28:Inc/dwt_stm32_delay.h **** 
  29:Inc/dwt_stm32_delay.h ****   /* Delay till end */
ARM GAS  /tmp/ccHEr0ck.s 			page 5


  30:Inc/dwt_stm32_delay.h ****   while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
  85              		.loc 2 30 0
  86 0046 1E4B     		ldr	r3, .L8+8
  87 0048 5B68     		ldr	r3, [r3, #4]
  88 004a 1B1B     		subs	r3, r3, r4
  89 004c 8342     		cmp	r3, r0
  90 004e FAD3     		bcc	.L3
  91              	.LVL8:
  92              	.LBE11:
  93              	.LBE10:
 117:Src/max2871.c **** 		DWT_Delay_us(1);
 118:Src/max2871.c **** 		HAL_GPIO_WritePin(MAX_CLK_GPIO_Port, MAX_CLK_Pin, 1);
  94              		.loc 1 118 0 discriminator 3
  95 0050 0122     		movs	r2, #1
  96 0052 2021     		movs	r1, #32
  97 0054 1948     		ldr	r0, .L8+4
  98 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
  99              	.LVL9:
 100              	.LBB12:
 101              	.LBB13:
  24:Inc/dwt_stm32_delay.h **** 
 102              		.loc 2 24 0 discriminator 3
 103 005a 194B     		ldr	r3, .L8+8
 104 005c 5C68     		ldr	r4, [r3, #4]
 105              	.LVL10:
  27:Inc/dwt_stm32_delay.h **** 
 106              		.loc 2 27 0 discriminator 3
 107 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 108              	.LVL11:
 109 0062 184B     		ldr	r3, .L8+12
 110 0064 A3FB0030 		umull	r3, r0, r3, r0
 111 0068 800C     		lsrs	r0, r0, #18
 112              	.L4:
 113              		.loc 2 30 0
 114 006a 154B     		ldr	r3, .L8+8
 115 006c 5B68     		ldr	r3, [r3, #4]
 116 006e 1B1B     		subs	r3, r3, r4
 117 0070 8342     		cmp	r3, r0
 118 0072 FAD3     		bcc	.L4
 119              	.LVL12:
 120              	.LBE13:
 121              	.LBE12:
 119:Src/max2871.c **** 		DWT_Delay_us(1);
 120:Src/max2871.c **** 		HAL_GPIO_WritePin(MAX_CLK_GPIO_Port, MAX_CLK_Pin, 0);
 122              		.loc 1 120 0 discriminator 3
 123 0074 0022     		movs	r2, #0
 124 0076 2021     		movs	r1, #32
 125 0078 1048     		ldr	r0, .L8+4
 126 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 127              	.LVL13:
 114:Src/max2871.c **** 	{
 128              		.loc 1 114 0 discriminator 3
 129 007e 013D     		subs	r5, r5, #1
 130              	.LVL14:
 131 0080 6DB2     		sxtb	r5, r5
 132              	.LVL15:
 133              	.L2:
ARM GAS  /tmp/ccHEr0ck.s 			page 6


 114:Src/max2871.c **** 	{
 134              		.loc 1 114 0 is_stmt 0 discriminator 1
 135 0082 002D     		cmp	r5, #0
 136 0084 CBDC     		bgt	.L5
 137              	.LBE9:
 121:Src/max2871.c **** 	}
 122:Src/max2871.c **** 
 123:Src/max2871.c **** 	// Ensure DAT is low afterwards
 124:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_DAT_GPIO_Port, MAX_DAT_Pin, 0);
 138              		.loc 1 124 0 is_stmt 1
 139 0086 0022     		movs	r2, #0
 140 0088 1021     		movs	r1, #16
 141 008a 0C48     		ldr	r0, .L8+4
 142 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 143              	.LVL16:
 125:Src/max2871.c **** 	// Once Transfer complete, pull LE high
 126:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_LE_GPIO_Port, MAX_LE_Pin, 1);
 144              		.loc 1 126 0
 145 0090 0122     		movs	r2, #1
 146 0092 0221     		movs	r1, #2
 147 0094 0848     		ldr	r0, .L8
 148 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 149              	.LVL17:
 150              	.LBB14:
 151              	.LBB15:
  24:Inc/dwt_stm32_delay.h **** 
 152              		.loc 2 24 0
 153 009a 094B     		ldr	r3, .L8+8
 154 009c 5C68     		ldr	r4, [r3, #4]
 155              	.LVL18:
  27:Inc/dwt_stm32_delay.h **** 
 156              		.loc 2 27 0
 157 009e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 158              	.LVL19:
 159 00a2 084A     		ldr	r2, .L8+12
 160 00a4 A2FB0032 		umull	r3, r2, r2, r0
 161 00a8 920C     		lsrs	r2, r2, #18
 162              	.L6:
 163              		.loc 2 30 0
 164 00aa 054B     		ldr	r3, .L8+8
 165 00ac 5B68     		ldr	r3, [r3, #4]
 166 00ae 1B1B     		subs	r3, r3, r4
 167 00b0 9342     		cmp	r3, r2
 168 00b2 FAD3     		bcc	.L6
 169              	.LBE15:
 170              	.LBE14:
 127:Src/max2871.c **** 	DWT_Delay_us(1);
 128:Src/max2871.c **** }
 171              		.loc 1 128 0
 172 00b4 70BD     		pop	{r4, r5, r6, pc}
 173              	.LVL20:
 174              	.L9:
 175 00b6 00BF     		.align	2
 176              	.L8:
 177 00b8 00080140 		.word	1073809408
 178 00bc 000C0140 		.word	1073810432
 179 00c0 001000E0 		.word	-536866816
ARM GAS  /tmp/ccHEr0ck.s 			page 7


 180 00c4 83DE1B43 		.word	1125899907
 181              		.cfi_endproc
 182              	.LFE70:
 184              		.section	.text.max2871SpiRead,"ax",%progbits
 185              		.align	1
 186              		.global	max2871SpiRead
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 190              		.fpu softvfp
 192              	max2871SpiRead:
 193              	.LFB71:
 129:Src/max2871.c **** 
 130:Src/max2871.c **** // Readback register 6 from MAX2871. Requires MUX to be set in readback mode (0xC)
 131:Src/max2871.c **** uint32_t max2871SpiRead(void)
 132:Src/max2871.c **** {
 194              		.loc 1 132 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198 0000 70B5     		push	{r4, r5, r6, lr}
 199              	.LCFI1:
 200              		.cfi_def_cfa_offset 16
 201              		.cfi_offset 4, -16
 202              		.cfi_offset 5, -12
 203              		.cfi_offset 6, -8
 204              		.cfi_offset 14, -4
 133:Src/max2871.c **** 	uint32_t dataReturn;
 134:Src/max2871.c **** 
 135:Src/max2871.c **** 	max2871SpiWrite(0x06);
 205              		.loc 1 135 0
 206 0002 0620     		movs	r0, #6
 207 0004 FFF7FEFF 		bl	max2871SpiWrite
 208              	.LVL21:
 136:Src/max2871.c **** 
 137:Src/max2871.c **** 	// Ensure LE High
 138:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_LE_GPIO_Port, MAX_LE_Pin, 1);
 209              		.loc 1 138 0
 210 0008 0122     		movs	r2, #1
 211 000a 0221     		movs	r1, #2
 212 000c 1A48     		ldr	r0, .L16
 213 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 214              	.LVL22:
 215              	.LBB21:
 139:Src/max2871.c **** 
 140:Src/max2871.c **** 	// Receive all the bits!
 141:Src/max2871.c **** 	for (int8_t bit = 32; bit > 0; bit--)
 216              		.loc 1 141 0
 217 0012 2024     		movs	r4, #32
 218 0014 2BE0     		b	.L11
 219              	.LVL23:
 220              	.L14:
 142:Src/max2871.c **** 	{
 143:Src/max2871.c **** 		HAL_GPIO_WritePin(MAX_CLK_GPIO_Port, MAX_CLK_Pin, 1);
 221              		.loc 1 143 0 discriminator 3
 222 0016 0122     		movs	r2, #1
 223 0018 2021     		movs	r1, #32
ARM GAS  /tmp/ccHEr0ck.s 			page 8


 224 001a 1848     		ldr	r0, .L16+4
 225 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 226              	.LVL24:
 227              	.LBB22:
 228              	.LBB23:
  24:Inc/dwt_stm32_delay.h **** 
 229              		.loc 2 24 0 discriminator 3
 230 0020 174B     		ldr	r3, .L16+8
 231 0022 5E68     		ldr	r6, [r3, #4]
 232              	.LVL25:
  27:Inc/dwt_stm32_delay.h **** 
 233              		.loc 2 27 0 discriminator 3
 234 0024 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 235              	.LVL26:
 236 0028 164B     		ldr	r3, .L16+12
 237 002a A3FB0030 		umull	r3, r0, r3, r0
 238 002e 800C     		lsrs	r0, r0, #18
 239              	.L12:
 240              		.loc 2 30 0
 241 0030 134B     		ldr	r3, .L16+8
 242 0032 5B68     		ldr	r3, [r3, #4]
 243 0034 9B1B     		subs	r3, r3, r6
 244 0036 8342     		cmp	r3, r0
 245 0038 FAD3     		bcc	.L12
 246              	.LVL27:
 247              	.LBE23:
 248              	.LBE22:
 144:Src/max2871.c **** 		DWT_Delay_us(1);
 145:Src/max2871.c **** 		dataReturn |= HAL_GPIO_ReadPin(MAX_MUX_GPIO_Port, MAX_MUX_Pin) << bit;
 249              		.loc 1 145 0 discriminator 3
 250 003a 8021     		movs	r1, #128
 251 003c 0F48     		ldr	r0, .L16+4
 252 003e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 253              	.LVL28:
 254 0042 A040     		lsls	r0, r0, r4
 255 0044 0543     		orrs	r5, r5, r0
 256              	.LVL29:
 257              	.LBB24:
 258              	.LBB25:
  24:Inc/dwt_stm32_delay.h **** 
 259              		.loc 2 24 0 discriminator 3
 260 0046 0E4B     		ldr	r3, .L16+8
 261 0048 5E68     		ldr	r6, [r3, #4]
 262              	.LVL30:
  27:Inc/dwt_stm32_delay.h **** 
 263              		.loc 2 27 0 discriminator 3
 264 004a FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 265              	.LVL31:
 266 004e 0D4B     		ldr	r3, .L16+12
 267 0050 A3FB0030 		umull	r3, r0, r3, r0
 268 0054 800C     		lsrs	r0, r0, #18
 269              	.L13:
 270              		.loc 2 30 0
 271 0056 0A4B     		ldr	r3, .L16+8
 272 0058 5B68     		ldr	r3, [r3, #4]
 273 005a 9B1B     		subs	r3, r3, r6
 274 005c 8342     		cmp	r3, r0
ARM GAS  /tmp/ccHEr0ck.s 			page 9


 275 005e FAD3     		bcc	.L13
 276              	.LVL32:
 277              	.LBE25:
 278              	.LBE24:
 146:Src/max2871.c **** 		DWT_Delay_us(1);
 147:Src/max2871.c **** 		HAL_GPIO_WritePin(MAX_CLK_GPIO_Port, MAX_CLK_Pin, 0);
 279              		.loc 1 147 0 discriminator 3
 280 0060 0022     		movs	r2, #0
 281 0062 2021     		movs	r1, #32
 282 0064 0548     		ldr	r0, .L16+4
 283 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 284              	.LVL33:
 141:Src/max2871.c **** 	{
 285              		.loc 1 141 0 discriminator 3
 286 006a 013C     		subs	r4, r4, #1
 287              	.LVL34:
 288 006c 64B2     		sxtb	r4, r4
 289              	.LVL35:
 290              	.L11:
 141:Src/max2871.c **** 	{
 291              		.loc 1 141 0 is_stmt 0 discriminator 1
 292 006e 002C     		cmp	r4, #0
 293 0070 D1DC     		bgt	.L14
 294              	.LBE21:
 148:Src/max2871.c **** 	}
 149:Src/max2871.c **** 
 150:Src/max2871.c **** 	return dataReturn;
 151:Src/max2871.c **** }
 295              		.loc 1 151 0 is_stmt 1
 296 0072 2846     		mov	r0, r5
 297 0074 70BD     		pop	{r4, r5, r6, pc}
 298              	.LVL36:
 299              	.L17:
 300 0076 00BF     		.align	2
 301              	.L16:
 302 0078 00080140 		.word	1073809408
 303 007c 000C0140 		.word	1073810432
 304 0080 001000E0 		.word	-536866816
 305 0084 83DE1B43 		.word	1125899907
 306              		.cfi_endproc
 307              	.LFE71:
 309              		.section	.text.max2871WriteRegisters,"ax",%progbits
 310              		.align	1
 311              		.global	max2871WriteRegisters
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 315              		.fpu softvfp
 317              	max2871WriteRegisters:
 318              	.LFB72:
 152:Src/max2871.c **** 
 153:Src/max2871.c **** // Writes registers 5 - 0 to MAX2871
 154:Src/max2871.c **** void max2871WriteRegisters(void)
 155:Src/max2871.c **** {
 319              		.loc 1 155 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccHEr0ck.s 			page 10


 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323 0000 10B5     		push	{r4, lr}
 324              	.LCFI2:
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 4, -8
 327              		.cfi_offset 14, -4
 328              	.LVL37:
 329              	.LBB26:
 156:Src/max2871.c **** 	for (int i = 5; i >= 0; i--)
 330              		.loc 1 156 0
 331 0002 0524     		movs	r4, #5
 332 0004 05E0     		b	.L19
 333              	.LVL38:
 334              	.L20:
 157:Src/max2871.c **** 	{
 158:Src/max2871.c **** 		max2871SpiWrite(max2871GetRegister(i));
 335              		.loc 1 158 0 discriminator 3
 336 0006 E0B2     		uxtb	r0, r4
 337 0008 FFF7FEFF 		bl	max2871GetRegister
 338              	.LVL39:
 339 000c FFF7FEFF 		bl	max2871SpiWrite
 340              	.LVL40:
 156:Src/max2871.c **** 	for (int i = 5; i >= 0; i--)
 341              		.loc 1 156 0 discriminator 3
 342 0010 013C     		subs	r4, r4, #1
 343              	.LVL41:
 344              	.L19:
 156:Src/max2871.c **** 	for (int i = 5; i >= 0; i--)
 345              		.loc 1 156 0 is_stmt 0 discriminator 1
 346 0012 002C     		cmp	r4, #0
 347 0014 F7DA     		bge	.L20
 348              	.LBE26:
 159:Src/max2871.c **** 	}
 160:Src/max2871.c **** }
 349              		.loc 1 160 0 is_stmt 1
 350 0016 10BD     		pop	{r4, pc}
 351              		.cfi_endproc
 352              	.LFE72:
 354              		.global	__aeabi_fcmpge
 355              		.global	__aeabi_fcmplt
 356              		.global	__aeabi_i2f
 357              		.global	__aeabi_fmul
 358              		.global	__aeabi_fdiv
 359              		.global	__aeabi_f2uiz
 360              		.global	__aeabi_ui2f
 361              		.global	__aeabi_fsub
 362              		.global	__aeabi_f2d
 363              		.global	__aeabi_d2f
 364              		.global	__aeabi_fadd
 365              		.global	__aeabi_ui2d
 366              		.global	__aeabi_ddiv
 367              		.section	.text.max2871SetFrequency,"ax",%progbits
 368              		.align	1
 369              		.global	max2871SetFrequency
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
ARM GAS  /tmp/ccHEr0ck.s 			page 11


 373              		.fpu softvfp
 375              	max2871SetFrequency:
 376              	.LFB73:
 161:Src/max2871.c **** 
 162:Src/max2871.c **** // Calculates values for given frequency and INT_N / FRAC_N mode
 163:Src/max2871.c **** void max2871SetFrequency(float mhz, uint8_t intN, struct MAX2871Struct *max2871Status)
 164:Src/max2871.c **** {
 377              		.loc 1 164 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              	.LVL42:
 382 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 383              	.LCFI3:
 384              		.cfi_def_cfa_offset 40
 385              		.cfi_offset 3, -40
 386              		.cfi_offset 4, -36
 387              		.cfi_offset 5, -32
 388              		.cfi_offset 6, -28
 389              		.cfi_offset 7, -24
 390              		.cfi_offset 8, -20
 391              		.cfi_offset 9, -16
 392              		.cfi_offset 10, -12
 393              		.cfi_offset 11, -8
 394              		.cfi_offset 14, -4
 395 0004 0446     		mov	r4, r0
 396 0006 0D46     		mov	r5, r1
 397 0008 1746     		mov	r7, r2
 165:Src/max2871.c **** 	// Determine DIVA
 166:Src/max2871.c **** 	uint8_t  diva;
 167:Src/max2871.c **** 	if ((mhz >= 23.5) &&  (mhz < 46.875))
 398              		.loc 1 167 0
 399 000a 6C49     		ldr	r1, .L46
 400              	.LVL43:
 401 000c FFF7FEFF 		bl	__aeabi_fcmpge
 402              	.LVL44:
 403 0010 28B1     		cbz	r0, .L23
 404              		.loc 1 167 0 is_stmt 0 discriminator 1
 405 0012 6B49     		ldr	r1, .L46+4
 406 0014 2046     		mov	r0, r4
 407 0016 FFF7FEFF 		bl	__aeabi_fcmplt
 408              	.LVL45:
 409 001a 0028     		cmp	r0, #0
 410 001c 2ED1     		bne	.L32
 411              	.L23:
 168:Src/max2871.c **** 		diva = 7;
 169:Src/max2871.c **** 	else if (mhz < 93.75)
 412              		.loc 1 169 0 is_stmt 1
 413 001e 6949     		ldr	r1, .L46+8
 414 0020 2046     		mov	r0, r4
 415 0022 FFF7FEFF 		bl	__aeabi_fcmplt
 416              	.LVL46:
 417 0026 0028     		cmp	r0, #0
 418 0028 2AD1     		bne	.L33
 170:Src/max2871.c **** 		diva = 6;
 171:Src/max2871.c **** 	else if (mhz < 187.5)
 419              		.loc 1 171 0
ARM GAS  /tmp/ccHEr0ck.s 			page 12


 420 002a 6749     		ldr	r1, .L46+12
 421 002c 2046     		mov	r0, r4
 422 002e FFF7FEFF 		bl	__aeabi_fcmplt
 423              	.LVL47:
 424 0032 0028     		cmp	r0, #0
 425 0034 5AD1     		bne	.L34
 172:Src/max2871.c **** 		diva = 5;
 173:Src/max2871.c **** 	else if (mhz < 375)
 426              		.loc 1 173 0
 427 0036 6549     		ldr	r1, .L46+16
 428 0038 2046     		mov	r0, r4
 429 003a FFF7FEFF 		bl	__aeabi_fcmplt
 430              	.LVL48:
 431 003e 0028     		cmp	r0, #0
 432 0040 56D1     		bne	.L35
 174:Src/max2871.c **** 		diva = 4;
 175:Src/max2871.c **** 	else if (mhz < 750)
 433              		.loc 1 175 0
 434 0042 6349     		ldr	r1, .L46+20
 435 0044 2046     		mov	r0, r4
 436 0046 FFF7FEFF 		bl	__aeabi_fcmplt
 437              	.LVL49:
 438 004a 0028     		cmp	r0, #0
 439 004c 52D1     		bne	.L36
 176:Src/max2871.c **** 		diva = 3;
 177:Src/max2871.c **** 	else if (mhz < 1500)
 440              		.loc 1 177 0
 441 004e 6149     		ldr	r1, .L46+24
 442 0050 2046     		mov	r0, r4
 443 0052 FFF7FEFF 		bl	__aeabi_fcmplt
 444              	.LVL50:
 445 0056 0028     		cmp	r0, #0
 446 0058 4ED1     		bne	.L37
 178:Src/max2871.c **** 		diva = 2;
 179:Src/max2871.c **** 	else if (mhz < 3000)
 447              		.loc 1 179 0
 448 005a 5F49     		ldr	r1, .L46+28
 449 005c 2046     		mov	r0, r4
 450 005e FFF7FEFF 		bl	__aeabi_fcmplt
 451              	.LVL51:
 452 0062 0028     		cmp	r0, #0
 453 0064 4AD1     		bne	.L38
 180:Src/max2871.c **** 		diva = 1;
 181:Src/max2871.c **** 	else if (mhz < 6000)
 454              		.loc 1 181 0
 455 0066 5D49     		ldr	r1, .L46+32
 456 0068 2046     		mov	r0, r4
 457 006a FFF7FEFF 		bl	__aeabi_fcmplt
 458              	.LVL52:
 459 006e 08B1     		cbz	r0, .L42
 182:Src/max2871.c **** 		diva = 0;
 460              		.loc 1 182 0
 461 0070 0026     		movs	r6, #0
 462 0072 06E0     		b	.L25
 463              	.L42:
 183:Src/max2871.c **** 	else
 184:Src/max2871.c **** 		printUSB((char *) "> Bad input frequency to max2871SetFrequency");
ARM GAS  /tmp/ccHEr0ck.s 			page 13


 464              		.loc 1 184 0
 465 0074 5A48     		ldr	r0, .L46+36
 466 0076 FFF7FEFF 		bl	printUSB
 467              	.LVL53:
 468 007a 02E0     		b	.L25
 469              	.L32:
 168:Src/max2871.c **** 	else if (mhz < 93.75)
 470              		.loc 1 168 0
 471 007c 0726     		movs	r6, #7
 472 007e 00E0     		b	.L25
 473              	.L33:
 170:Src/max2871.c **** 	else if (mhz < 187.5)
 474              		.loc 1 170 0
 475 0080 0626     		movs	r6, #6
 476              	.L25:
 477              	.LVL54:
 185:Src/max2871.c **** 
 186:Src/max2871.c **** 	// Calculate fOUT
 187:Src/max2871.c **** 	float fComp = 38.4;
 188:Src/max2871.c **** 	float fVCO = mhz * (2 << (diva - 1));
 478              		.loc 1 188 0
 479 0082 701E     		subs	r0, r6, #1
 480 0084 0223     		movs	r3, #2
 481 0086 03FA00F0 		lsl	r0, r3, r0
 482 008a FFF7FEFF 		bl	__aeabi_i2f
 483              	.LVL55:
 484 008e 2146     		mov	r1, r4
 485 0090 FFF7FEFF 		bl	__aeabi_fmul
 486              	.LVL56:
 189:Src/max2871.c **** 	if (diva == 0) fVCO = mhz; // Gets around 2^0 error
 487              		.loc 1 189 0
 488 0094 06B1     		cbz	r6, .L26
 188:Src/max2871.c **** 	if (diva == 0) fVCO = mhz; // Gets around 2^0 error
 489              		.loc 1 188 0
 490 0096 0446     		mov	r4, r0
 491              	.LVL57:
 492              	.L26:
 190:Src/max2871.c **** 	float n = fVCO / fComp;
 493              		.loc 1 190 0
 494 0098 5249     		ldr	r1, .L46+40
 495 009a 2046     		mov	r0, r4
 496 009c FFF7FEFF 		bl	__aeabi_fdiv
 497              	.LVL58:
 498 00a0 8146     		mov	r9, r0
 499              	.LVL59:
 191:Src/max2871.c **** 	uint32_t N = (uint16_t) n;
 500              		.loc 1 191 0
 501 00a2 FFF7FEFF 		bl	__aeabi_f2uiz
 502              	.LVL60:
 503 00a6 1FFA80FA 		uxth	r10, r0
 504              	.LVL61:
 192:Src/max2871.c **** 
 193:Src/max2871.c **** 	float F = round((n - N) * MOD);
 505              		.loc 1 193 0
 506 00aa 5046     		mov	r0, r10
 507 00ac FFF7FEFF 		bl	__aeabi_ui2f
 508              	.LVL62:
ARM GAS  /tmp/ccHEr0ck.s 			page 14


 509 00b0 8046     		mov	r8, r0
 510 00b2 0146     		mov	r1, r0
 511 00b4 4846     		mov	r0, r9
 512 00b6 FFF7FEFF 		bl	__aeabi_fsub
 513              	.LVL63:
 514 00ba 4B49     		ldr	r1, .L46+44
 515 00bc FFF7FEFF 		bl	__aeabi_fmul
 516              	.LVL64:
 517 00c0 FFF7FEFF 		bl	__aeabi_f2d
 518              	.LVL65:
 519 00c4 FFF7FEFF 		bl	round
 520              	.LVL66:
 521 00c8 FFF7FEFF 		bl	__aeabi_d2f
 522              	.LVL67:
 523 00cc 8346     		mov	fp, r0
 524              	.LVL68:
 194:Src/max2871.c **** 
 195:Src/max2871.c **** 	// Determine fVCO
 196:Src/max2871.c **** 	if (intN == 1)
 525              		.loc 1 196 0
 526 00ce 012D     		cmp	r5, #1
 527 00d0 16D0     		beq	.L43
 197:Src/max2871.c **** 		fVCO = N * fComp;
 198:Src/max2871.c **** 	else if (!intN)
 528              		.loc 1 198 0
 529 00d2 D5B9     		cbnz	r5, .L28
 199:Src/max2871.c **** 		fVCO = (N + (F/MOD)) * fComp;
 530              		.loc 1 199 0
 531 00d4 4449     		ldr	r1, .L46+44
 532 00d6 FFF7FEFF 		bl	__aeabi_fdiv
 533              	.LVL69:
 534 00da 0146     		mov	r1, r0
 535 00dc 4046     		mov	r0, r8
 536 00de FFF7FEFF 		bl	__aeabi_fadd
 537              	.LVL70:
 538 00e2 4049     		ldr	r1, .L46+40
 539 00e4 FFF7FEFF 		bl	__aeabi_fmul
 540              	.LVL71:
 541 00e8 0446     		mov	r4, r0
 542              	.LVL72:
 543 00ea 0EE0     		b	.L28
 544              	.LVL73:
 545              	.L34:
 172:Src/max2871.c **** 	else if (mhz < 375)
 546              		.loc 1 172 0
 547 00ec 0526     		movs	r6, #5
 548 00ee C8E7     		b	.L25
 549              	.L35:
 174:Src/max2871.c **** 	else if (mhz < 750)
 550              		.loc 1 174 0
 551 00f0 0426     		movs	r6, #4
 552 00f2 C6E7     		b	.L25
 553              	.L36:
 176:Src/max2871.c **** 	else if (mhz < 1500)
 554              		.loc 1 176 0
 555 00f4 0326     		movs	r6, #3
 556 00f6 C4E7     		b	.L25
ARM GAS  /tmp/ccHEr0ck.s 			page 15


 557              	.L37:
 178:Src/max2871.c **** 	else if (mhz < 3000)
 558              		.loc 1 178 0
 559 00f8 0226     		movs	r6, #2
 560 00fa C2E7     		b	.L25
 561              	.L38:
 180:Src/max2871.c **** 	else if (mhz < 6000)
 562              		.loc 1 180 0
 563 00fc 0126     		movs	r6, #1
 564 00fe C0E7     		b	.L25
 565              	.LVL74:
 566              	.L43:
 197:Src/max2871.c **** 	else if (!intN)
 567              		.loc 1 197 0
 568 0100 3849     		ldr	r1, .L46+40
 569 0102 4046     		mov	r0, r8
 570              	.LVL75:
 571 0104 FFF7FEFF 		bl	__aeabi_fmul
 572              	.LVL76:
 573 0108 0446     		mov	r4, r0
 574              	.LVL77:
 575              	.L28:
 200:Src/max2871.c **** 
 201:Src/max2871.c **** 	float fOUT = fVCO / pow(2,diva);
 576              		.loc 1 201 0
 577 010a 3046     		mov	r0, r6
 578 010c FFF7FEFF 		bl	__aeabi_ui2d
 579              	.LVL78:
 580 0110 0246     		mov	r2, r0
 581 0112 0B46     		mov	r3, r1
 582 0114 0020     		movs	r0, #0
 583 0116 4FF08041 		mov	r1, #1073741824
 584 011a FFF7FEFF 		bl	pow
 585              	.LVL79:
 586 011e 8046     		mov	r8, r0
 587 0120 8946     		mov	r9, r1
 588              	.LVL80:
 589 0122 2046     		mov	r0, r4
 590 0124 FFF7FEFF 		bl	__aeabi_f2d
 591              	.LVL81:
 592 0128 4246     		mov	r2, r8
 593 012a 4B46     		mov	r3, r9
 594 012c FFF7FEFF 		bl	__aeabi_ddiv
 595              	.LVL82:
 596 0130 FFF7FEFF 		bl	__aeabi_d2f
 597              	.LVL83:
 202:Src/max2871.c **** 	if (diva == 0) fOUT = fVCO;
 598              		.loc 1 202 0
 599 0134 06B1     		cbz	r6, .L29
 201:Src/max2871.c **** 	if (diva == 0) fOUT = fVCO;
 600              		.loc 1 201 0
 601 0136 0446     		mov	r4, r0
 602              	.LVL84:
 603              	.L29:
 203:Src/max2871.c **** 
 204:Src/max2871.c **** 	// Set registers for Int-N configuration
 205:Src/max2871.c **** 	if (intN == 1)
ARM GAS  /tmp/ccHEr0ck.s 			page 16


 604              		.loc 1 205 0
 605 0138 012D     		cmp	r5, #1
 606 013a 06D0     		beq	.L44
 206:Src/max2871.c **** 	{
 207:Src/max2871.c **** 		max2871Set_INT(1);
 208:Src/max2871.c **** 		max2871Set_N(N);
 209:Src/max2871.c **** 		max2871Set_FRAC(F);
 210:Src/max2871.c **** 		max2871Set_CPL(0);
 211:Src/max2871.c **** 		max2871Set_M(MOD);
 212:Src/max2871.c **** 		max2871Set_LDF(1);
 213:Src/max2871.c **** 		max2871Set_DIVA(diva);
 214:Src/max2871.c **** 		max2871Set_F01(0);
 215:Src/max2871.c **** 	}
 216:Src/max2871.c **** 	// Set registers for Frac-N configuration
 217:Src/max2871.c **** 	else if (!intN)
 607              		.loc 1 217 0
 608 013c 0DB3     		cbz	r5, .L45
 609              	.L31:
 218:Src/max2871.c **** 	{
 219:Src/max2871.c **** 		max2871Set_INT(0);
 220:Src/max2871.c **** 		max2871Set_N(N);
 221:Src/max2871.c **** 		max2871Set_FRAC(F);
 222:Src/max2871.c **** 		max2871Set_CPL(1);
 223:Src/max2871.c **** 		max2871Set_M(MOD);
 224:Src/max2871.c **** 		max2871Set_LDF(0);
 225:Src/max2871.c **** 		max2871Set_DIVA(diva);
 226:Src/max2871.c **** 		max2871Set_F01(1);
 227:Src/max2871.c **** 	}
 228:Src/max2871.c **** 	max2871Status->intN_nFracN = intN;
 610              		.loc 1 228 0
 611 013e FD72     		strb	r5, [r7, #11]
 229:Src/max2871.c **** 	max2871Status->frequency = fOUT;
 612              		.loc 1 229 0
 613 0140 7C60     		str	r4, [r7, #4]	@ float
 230:Src/max2871.c **** 
 231:Src/max2871.c **** 	// Update MAX registers with new frequency info
 232:Src/max2871.c **** 	max2871WriteRegisters();
 614              		.loc 1 232 0
 615 0142 FFF7FEFF 		bl	max2871WriteRegisters
 616              	.LVL85:
 233:Src/max2871.c **** }
 617              		.loc 1 233 0
 618 0146 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 619              	.LVL86:
 620              	.L44:
 207:Src/max2871.c **** 		max2871Set_N(N);
 621              		.loc 1 207 0
 622 014a 0120     		movs	r0, #1
 623 014c FFF7FEFF 		bl	max2871Set_INT
 624              	.LVL87:
 208:Src/max2871.c **** 		max2871Set_FRAC(F);
 625              		.loc 1 208 0
 626 0150 5046     		mov	r0, r10
 627 0152 FFF7FEFF 		bl	max2871Set_N
 628              	.LVL88:
 209:Src/max2871.c **** 		max2871Set_CPL(0);
 629              		.loc 1 209 0
ARM GAS  /tmp/ccHEr0ck.s 			page 17


 630 0156 5846     		mov	r0, fp
 631 0158 FFF7FEFF 		bl	__aeabi_f2uiz
 632              	.LVL89:
 633 015c FFF7FEFF 		bl	max2871Set_FRAC
 634              	.LVL90:
 210:Src/max2871.c **** 		max2871Set_M(MOD);
 635              		.loc 1 210 0
 636 0160 0020     		movs	r0, #0
 637 0162 FFF7FEFF 		bl	max2871Set_CPL
 638              	.LVL91:
 211:Src/max2871.c **** 		max2871Set_LDF(1);
 639              		.loc 1 211 0
 640 0166 40F6FF70 		movw	r0, #4095
 641 016a FFF7FEFF 		bl	max2871Set_M
 642              	.LVL92:
 212:Src/max2871.c **** 		max2871Set_DIVA(diva);
 643              		.loc 1 212 0
 644 016e 0120     		movs	r0, #1
 645 0170 FFF7FEFF 		bl	max2871Set_LDF
 646              	.LVL93:
 213:Src/max2871.c **** 		max2871Set_F01(0);
 647              		.loc 1 213 0
 648 0174 3046     		mov	r0, r6
 649 0176 FFF7FEFF 		bl	max2871Set_DIVA
 650              	.LVL94:
 214:Src/max2871.c **** 	}
 651              		.loc 1 214 0
 652 017a 0020     		movs	r0, #0
 653 017c FFF7FEFF 		bl	max2871Set_F01
 654              	.LVL95:
 655 0180 DDE7     		b	.L31
 656              	.L45:
 219:Src/max2871.c **** 		max2871Set_N(N);
 657              		.loc 1 219 0
 658 0182 0020     		movs	r0, #0
 659 0184 FFF7FEFF 		bl	max2871Set_INT
 660              	.LVL96:
 220:Src/max2871.c **** 		max2871Set_FRAC(F);
 661              		.loc 1 220 0
 662 0188 5046     		mov	r0, r10
 663 018a FFF7FEFF 		bl	max2871Set_N
 664              	.LVL97:
 221:Src/max2871.c **** 		max2871Set_CPL(1);
 665              		.loc 1 221 0
 666 018e 5846     		mov	r0, fp
 667 0190 FFF7FEFF 		bl	__aeabi_f2uiz
 668              	.LVL98:
 669 0194 FFF7FEFF 		bl	max2871Set_FRAC
 670              	.LVL99:
 222:Src/max2871.c **** 		max2871Set_M(MOD);
 671              		.loc 1 222 0
 672 0198 0120     		movs	r0, #1
 673 019a FFF7FEFF 		bl	max2871Set_CPL
 674              	.LVL100:
 223:Src/max2871.c **** 		max2871Set_LDF(0);
 675              		.loc 1 223 0
 676 019e 40F6FF70 		movw	r0, #4095
ARM GAS  /tmp/ccHEr0ck.s 			page 18


 677 01a2 FFF7FEFF 		bl	max2871Set_M
 678              	.LVL101:
 224:Src/max2871.c **** 		max2871Set_DIVA(diva);
 679              		.loc 1 224 0
 680 01a6 0020     		movs	r0, #0
 681 01a8 FFF7FEFF 		bl	max2871Set_LDF
 682              	.LVL102:
 225:Src/max2871.c **** 		max2871Set_F01(1);
 683              		.loc 1 225 0
 684 01ac 3046     		mov	r0, r6
 685 01ae FFF7FEFF 		bl	max2871Set_DIVA
 686              	.LVL103:
 226:Src/max2871.c **** 	}
 687              		.loc 1 226 0
 688 01b2 0120     		movs	r0, #1
 689 01b4 FFF7FEFF 		bl	max2871Set_F01
 690              	.LVL104:
 691 01b8 C1E7     		b	.L31
 692              	.L47:
 693 01ba 00BF     		.align	2
 694              	.L46:
 695 01bc 0000BC41 		.word	1102839808
 696 01c0 00803B42 		.word	1111195648
 697 01c4 0080BB42 		.word	1119584256
 698 01c8 00803B43 		.word	1127972864
 699 01cc 0080BB43 		.word	1136361472
 700 01d0 00803B44 		.word	1144750080
 701 01d4 0080BB44 		.word	1153138688
 702 01d8 00803B45 		.word	1161527296
 703 01dc 0080BB45 		.word	1169915904
 704 01e0 00000000 		.word	.LC1
 705 01e4 9A991942 		.word	1108973978
 706 01e8 00F07F45 		.word	1166012416
 707              		.cfi_endproc
 708              	.LFE73:
 710              		.section	.text.max2871ChipEnable,"ax",%progbits
 711              		.align	1
 712              		.global	max2871ChipEnable
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 716              		.fpu softvfp
 718              	max2871ChipEnable:
 719              	.LFB74:
 234:Src/max2871.c **** 
 235:Src/max2871.c **** void max2871ChipEnable(struct MAX2871Struct *max2871Status)
 236:Src/max2871.c **** {
 720              		.loc 1 236 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 724              	.LVL105:
 725 0000 10B5     		push	{r4, lr}
 726              	.LCFI4:
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 4, -8
 729              		.cfi_offset 14, -4
ARM GAS  /tmp/ccHEr0ck.s 			page 19


 730 0002 0446     		mov	r4, r0
 237:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_CE_GPIO_Port, MAX_CE_Pin, 1);
 731              		.loc 1 237 0
 732 0004 0122     		movs	r2, #1
 733 0006 0821     		movs	r1, #8
 734 0008 0248     		ldr	r0, .L50
 735              	.LVL106:
 736 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 737              	.LVL107:
 238:Src/max2871.c **** 	max2871Status->CHIP_EN = 1;
 738              		.loc 1 238 0
 739 000e 0123     		movs	r3, #1
 740 0010 2370     		strb	r3, [r4]
 239:Src/max2871.c **** }
 741              		.loc 1 239 0
 742 0012 10BD     		pop	{r4, pc}
 743              	.LVL108:
 744              	.L51:
 745              		.align	2
 746              	.L50:
 747 0014 000C0140 		.word	1073810432
 748              		.cfi_endproc
 749              	.LFE74:
 751              		.section	.text.max2871ChipDisable,"ax",%progbits
 752              		.align	1
 753              		.global	max2871ChipDisable
 754              		.syntax unified
 755              		.thumb
 756              		.thumb_func
 757              		.fpu softvfp
 759              	max2871ChipDisable:
 760              	.LFB75:
 240:Src/max2871.c **** 
 241:Src/max2871.c **** void max2871ChipDisable(struct MAX2871Struct *max2871Status)
 242:Src/max2871.c **** {
 761              		.loc 1 242 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765              	.LVL109:
 766 0000 10B5     		push	{r4, lr}
 767              	.LCFI5:
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 4, -8
 770              		.cfi_offset 14, -4
 771 0002 0446     		mov	r4, r0
 243:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_CE_GPIO_Port, MAX_CE_Pin, 0);
 772              		.loc 1 243 0
 773 0004 0022     		movs	r2, #0
 774 0006 0821     		movs	r1, #8
 775 0008 0248     		ldr	r0, .L54
 776              	.LVL110:
 777 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 778              	.LVL111:
 244:Src/max2871.c **** 	max2871Status->CHIP_EN = 0;
 779              		.loc 1 244 0
 780 000e 0023     		movs	r3, #0
ARM GAS  /tmp/ccHEr0ck.s 			page 20


 781 0010 2370     		strb	r3, [r4]
 245:Src/max2871.c **** }
 782              		.loc 1 245 0
 783 0012 10BD     		pop	{r4, pc}
 784              	.LVL112:
 785              	.L55:
 786              		.align	2
 787              	.L54:
 788 0014 000C0140 		.word	1073810432
 789              		.cfi_endproc
 790              	.LFE75:
 792              		.section	.text.max2871RFEnable,"ax",%progbits
 793              		.align	1
 794              		.global	max2871RFEnable
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
 798              		.fpu softvfp
 800              	max2871RFEnable:
 801              	.LFB76:
 246:Src/max2871.c **** 
 247:Src/max2871.c **** void max2871RFEnable(struct MAX2871Struct *max2871Status)
 248:Src/max2871.c **** {
 802              		.loc 1 248 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              	.LVL113:
 807 0000 10B5     		push	{r4, lr}
 808              	.LCFI6:
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 4, -8
 811              		.cfi_offset 14, -4
 812 0002 0446     		mov	r4, r0
 249:Src/max2871.c **** 	max2871Set_RFA_EN(1);
 813              		.loc 1 249 0
 814 0004 0120     		movs	r0, #1
 815              	.LVL114:
 816 0006 FFF7FEFF 		bl	max2871Set_RFA_EN
 817              	.LVL115:
 250:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_RFOUT_EN_GPIO_Port, MAX_RFOUT_EN_Pin, 1);
 818              		.loc 1 250 0
 819 000a 0122     		movs	r2, #1
 820 000c 0421     		movs	r1, #4
 821 000e 0648     		ldr	r0, .L58
 822 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 823              	.LVL116:
 251:Src/max2871.c **** 	max2871ChipEnable(max2871Status);
 824              		.loc 1 251 0
 825 0014 2046     		mov	r0, r4
 826 0016 FFF7FEFF 		bl	max2871ChipEnable
 827              	.LVL117:
 252:Src/max2871.c **** 	max2871Status->RFA_EN = 1;
 828              		.loc 1 252 0
 829 001a 0123     		movs	r3, #1
 830 001c 2372     		strb	r3, [r4, #8]
 253:Src/max2871.c **** 	max2871Status->RF_CHIP_EN = 1;
ARM GAS  /tmp/ccHEr0ck.s 			page 21


 831              		.loc 1 253 0
 832 001e 6372     		strb	r3, [r4, #9]
 254:Src/max2871.c **** 	max2871WriteRegisters();
 833              		.loc 1 254 0
 834 0020 FFF7FEFF 		bl	max2871WriteRegisters
 835              	.LVL118:
 255:Src/max2871.c **** }
 836              		.loc 1 255 0
 837 0024 10BD     		pop	{r4, pc}
 838              	.LVL119:
 839              	.L59:
 840 0026 00BF     		.align	2
 841              	.L58:
 842 0028 00080140 		.word	1073809408
 843              		.cfi_endproc
 844              	.LFE76:
 846              		.section	.text.max2871RFDisable,"ax",%progbits
 847              		.align	1
 848              		.global	max2871RFDisable
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu softvfp
 854              	max2871RFDisable:
 855              	.LFB77:
 256:Src/max2871.c **** 
 257:Src/max2871.c **** void max2871RFDisable(struct MAX2871Struct *max2871Status)
 258:Src/max2871.c **** {
 856              		.loc 1 258 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860              	.LVL120:
 861 0000 10B5     		push	{r4, lr}
 862              	.LCFI7:
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 4, -8
 865              		.cfi_offset 14, -4
 866 0002 0446     		mov	r4, r0
 259:Src/max2871.c **** 	max2871Set_RFA_EN(0);
 867              		.loc 1 259 0
 868 0004 0020     		movs	r0, #0
 869              	.LVL121:
 870 0006 FFF7FEFF 		bl	max2871Set_RFA_EN
 871              	.LVL122:
 260:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_RFOUT_EN_GPIO_Port, MAX_RFOUT_EN_Pin, 0);
 872              		.loc 1 260 0
 873 000a 0022     		movs	r2, #0
 874 000c 0421     		movs	r1, #4
 875 000e 0448     		ldr	r0, .L62
 876 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 877              	.LVL123:
 261:Src/max2871.c **** 	max2871Status->RFA_EN = 0;
 878              		.loc 1 261 0
 879 0014 0023     		movs	r3, #0
 880 0016 2372     		strb	r3, [r4, #8]
 262:Src/max2871.c **** 	max2871Status->RF_CHIP_EN = 0;
ARM GAS  /tmp/ccHEr0ck.s 			page 22


 881              		.loc 1 262 0
 882 0018 6372     		strb	r3, [r4, #9]
 263:Src/max2871.c **** 	max2871WriteRegisters();
 883              		.loc 1 263 0
 884 001a FFF7FEFF 		bl	max2871WriteRegisters
 885              	.LVL124:
 264:Src/max2871.c **** }
 886              		.loc 1 264 0
 887 001e 10BD     		pop	{r4, pc}
 888              	.LVL125:
 889              	.L63:
 890              		.align	2
 891              	.L62:
 892 0020 00080140 		.word	1073809408
 893              		.cfi_endproc
 894              	.LFE77:
 896              		.section	.text.max2871SetPower,"ax",%progbits
 897              		.align	1
 898              		.global	max2871SetPower
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 902              		.fpu softvfp
 904              	max2871SetPower:
 905              	.LFB78:
 265:Src/max2871.c **** 
 266:Src/max2871.c **** void max2871SetPower(int8_t dbm, struct MAX2871Struct *max2871Status)
 267:Src/max2871.c **** {
 906              		.loc 1 267 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              	.LVL126:
 911 0000 10B5     		push	{r4, lr}
 912              	.LCFI8:
 913              		.cfi_def_cfa_offset 8
 914              		.cfi_offset 4, -8
 915              		.cfi_offset 14, -4
 916 0002 0C46     		mov	r4, r1
 268:Src/max2871.c **** 	switch (dbm)
 917              		.loc 1 268 0
 918 0004 0430     		adds	r0, r0, #4
 919              	.LVL127:
 920 0006 0928     		cmp	r0, #9
 921 0008 17D8     		bhi	.L65
 922 000a DFE800F0 		tbb	[pc, r0]
 923              	.L67:
 924 000e 05       		.byte	(.L66-.L67)/2
 925 000f 16       		.byte	(.L65-.L67)/2
 926 0010 16       		.byte	(.L65-.L67)/2
 927 0011 0D       		.byte	(.L68-.L67)/2
 928 0012 16       		.byte	(.L65-.L67)/2
 929 0013 16       		.byte	(.L65-.L67)/2
 930 0014 10       		.byte	(.L69-.L67)/2
 931 0015 16       		.byte	(.L65-.L67)/2
 932 0016 16       		.byte	(.L65-.L67)/2
 933 0017 13       		.byte	(.L70-.L67)/2
ARM GAS  /tmp/ccHEr0ck.s 			page 23


 934              		.p2align 1
 935              	.L66:
 269:Src/max2871.c **** 	{
 270:Src/max2871.c **** 		case -4:
 271:Src/max2871.c **** 			max2871Status->rfPower = 0;
 936              		.loc 1 271 0
 937 0018 0023     		movs	r3, #0
 938 001a 8B72     		strb	r3, [r1, #10]
 939              	.LVL128:
 940              	.L71:
 272:Src/max2871.c **** 			break;
 273:Src/max2871.c **** 
 274:Src/max2871.c **** 		case -1:
 275:Src/max2871.c **** 			max2871Status->rfPower = 1;
 276:Src/max2871.c **** 			break;
 277:Src/max2871.c **** 
 278:Src/max2871.c **** 		case 2:
 279:Src/max2871.c **** 			max2871Status->rfPower = 2;
 280:Src/max2871.c **** 			break;
 281:Src/max2871.c **** 
 282:Src/max2871.c **** 		case 5:
 283:Src/max2871.c **** 			max2871Status->rfPower = 3;
 284:Src/max2871.c **** 			break;
 285:Src/max2871.c **** 		default:
 286:Src/max2871.c **** 			printUSB((uint8_t *) "> Bad input power to max2871SetPower");
 287:Src/max2871.c **** 	}
 288:Src/max2871.c **** 
 289:Src/max2871.c **** 	max2871Set_APWR(max2871Status->rfPower);
 941              		.loc 1 289 0
 942 001c A07A     		ldrb	r0, [r4, #10]	@ zero_extendqisi2
 943 001e FFF7FEFF 		bl	max2871Set_APWR
 944              	.LVL129:
 290:Src/max2871.c **** 	max2871WriteRegisters();
 945              		.loc 1 290 0
 946 0022 FFF7FEFF 		bl	max2871WriteRegisters
 947              	.LVL130:
 291:Src/max2871.c **** }
 948              		.loc 1 291 0
 949 0026 10BD     		pop	{r4, pc}
 950              	.LVL131:
 951              	.L68:
 275:Src/max2871.c **** 			break;
 952              		.loc 1 275 0
 953 0028 0123     		movs	r3, #1
 954 002a 8B72     		strb	r3, [r1, #10]
 276:Src/max2871.c **** 
 955              		.loc 1 276 0
 956 002c F6E7     		b	.L71
 957              	.L69:
 279:Src/max2871.c **** 			break;
 958              		.loc 1 279 0
 959 002e 0223     		movs	r3, #2
 960 0030 8B72     		strb	r3, [r1, #10]
 280:Src/max2871.c **** 
 961              		.loc 1 280 0
 962 0032 F3E7     		b	.L71
 963              	.L70:
ARM GAS  /tmp/ccHEr0ck.s 			page 24


 283:Src/max2871.c **** 			break;
 964              		.loc 1 283 0
 965 0034 0323     		movs	r3, #3
 966 0036 8B72     		strb	r3, [r1, #10]
 284:Src/max2871.c **** 		default:
 967              		.loc 1 284 0
 968 0038 F0E7     		b	.L71
 969              	.L65:
 286:Src/max2871.c **** 	}
 970              		.loc 1 286 0
 971 003a 0248     		ldr	r0, .L73
 972 003c FFF7FEFF 		bl	printUSB
 973              	.LVL132:
 974 0040 ECE7     		b	.L71
 975              	.L74:
 976 0042 00BF     		.align	2
 977              	.L73:
 978 0044 00000000 		.word	.LC2
 979              		.cfi_endproc
 980              	.LFE78:
 982              		.section	.text.max2871CheckLD,"ax",%progbits
 983              		.align	1
 984              		.global	max2871CheckLD
 985              		.syntax unified
 986              		.thumb
 987              		.thumb_func
 988              		.fpu softvfp
 990              	max2871CheckLD:
 991              	.LFB79:
 292:Src/max2871.c **** 
 293:Src/max2871.c **** int8_t max2871CheckLD(struct MAX2871Struct *max2871Status)
 294:Src/max2871.c **** {
 992              		.loc 1 294 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 0
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 996              	.LVL133:
 997 0000 10B5     		push	{r4, lr}
 998              	.LCFI9:
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 4, -8
 1001              		.cfi_offset 14, -4
 1002 0002 0446     		mov	r4, r0
 295:Src/max2871.c **** 	max2871Status->ldState = HAL_GPIO_ReadPin(MAX_LD_GPIO_Port, MAX_LD_Pin);
 1003              		.loc 1 295 0
 1004 0004 0821     		movs	r1, #8
 1005 0006 0548     		ldr	r0, .L79
 1006              	.LVL134:
 1007 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1008              	.LVL135:
 1009 000c 6070     		strb	r0, [r4, #1]
 296:Src/max2871.c **** 
 297:Src/max2871.c **** 	if (max2871Status->ldState)
 1010              		.loc 1 297 0
 1011 000e 08B1     		cbz	r0, .L77
 298:Src/max2871.c **** 		return 1;
 1012              		.loc 1 298 0
ARM GAS  /tmp/ccHEr0ck.s 			page 25


 1013 0010 0120     		movs	r0, #1
 1014              	.L76:
 299:Src/max2871.c **** 	else
 300:Src/max2871.c **** 		return -1;
 301:Src/max2871.c **** }
 1015              		.loc 1 301 0
 1016 0012 10BD     		pop	{r4, pc}
 1017              	.LVL136:
 1018              	.L77:
 300:Src/max2871.c **** }
 1019              		.loc 1 300 0
 1020 0014 4FF0FF30 		mov	r0, #-1
 1021 0018 FBE7     		b	.L76
 1022              	.L80:
 1023 001a 00BF     		.align	2
 1024              	.L79:
 1025 001c 00080140 		.word	1073809408
 1026              		.cfi_endproc
 1027              	.LFE79:
 1029              		.section	.text.max2871Setup,"ax",%progbits
 1030              		.align	1
 1031              		.global	max2871Setup
 1032              		.syntax unified
 1033              		.thumb
 1034              		.thumb_func
 1035              		.fpu softvfp
 1037              	max2871Setup:
 1038              	.LFB69:
  19:Src/max2871.c **** 	// Set to initial known state
 1039              		.loc 1 19 0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 0
 1042              		@ frame_needed = 0, uses_anonymous_args = 0
 1043              	.LVL137:
 1044 0000 70B5     		push	{r4, r5, r6, lr}
 1045              	.LCFI10:
 1046              		.cfi_def_cfa_offset 16
 1047              		.cfi_offset 4, -16
 1048              		.cfi_offset 5, -12
 1049              		.cfi_offset 6, -8
 1050              		.cfi_offset 14, -4
 1051 0002 0646     		mov	r6, r0
  21:Src/max2871.c **** 	max2871RFDisable(max2871Status);
 1052              		.loc 1 21 0
 1053 0004 FFF7FEFF 		bl	max2871ChipEnable
 1054              	.LVL138:
  22:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_CLK_GPIO_Port, MAX_CLK_Pin, 0);
 1055              		.loc 1 22 0
 1056 0008 3046     		mov	r0, r6
 1057 000a FFF7FEFF 		bl	max2871RFDisable
 1058              	.LVL139:
  23:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_DAT_GPIO_Port, MAX_DAT_Pin, 0);
 1059              		.loc 1 23 0
 1060 000e 654C     		ldr	r4, .L90
 1061 0010 0022     		movs	r2, #0
 1062 0012 2021     		movs	r1, #32
 1063 0014 2046     		mov	r0, r4
ARM GAS  /tmp/ccHEr0ck.s 			page 26


 1064 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1065              	.LVL140:
  24:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_MUX_GPIO_Port, MAX_MUX_Pin, 0);
 1066              		.loc 1 24 0
 1067 001a 0022     		movs	r2, #0
 1068 001c 1021     		movs	r1, #16
 1069 001e 2046     		mov	r0, r4
 1070 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1071              	.LVL141:
  25:Src/max2871.c **** 	HAL_GPIO_WritePin(MAX_LE_GPIO_Port, MAX_LE_Pin, 1);
 1072              		.loc 1 25 0
 1073 0024 0022     		movs	r2, #0
 1074 0026 8021     		movs	r1, #128
 1075 0028 2046     		mov	r0, r4
 1076 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1077              	.LVL142:
  26:Src/max2871.c **** 
 1078              		.loc 1 26 0
 1079 002e 0122     		movs	r2, #1
 1080 0030 0221     		movs	r1, #2
 1081 0032 5D48     		ldr	r0, .L90+4
 1082 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1083              	.LVL143:
  28:Src/max2871.c **** 
 1084              		.loc 1 28 0
 1085 0038 FFF7FEFF 		bl	max2871RegsInit
 1086              	.LVL144:
 1087              	.LBB27:
  32:Src/max2871.c **** 	{
 1088              		.loc 1 32 0
 1089 003c 0125     		movs	r5, #1
 1090 003e 11E0     		b	.L82
 1091              	.LVL145:
 1092              	.L83:
 1093              	.LBB28:
  34:Src/max2871.c **** 		{
 1094              		.loc 1 34 0 discriminator 2
 1095 0040 013C     		subs	r4, r4, #1
 1096              	.LVL146:
 1097              	.L85:
  34:Src/max2871.c **** 		{
 1098              		.loc 1 34 0 is_stmt 0 discriminator 1
 1099 0042 002C     		cmp	r4, #0
 1100 0044 0ADB     		blt	.L88
  36:Src/max2871.c **** 			max2871SpiWrite(txReg);
 1101              		.loc 1 36 0 is_stmt 1
 1102 0046 E0B2     		uxtb	r0, r4
 1103 0048 FFF7FEFF 		bl	max2871GetRegister
 1104              	.LVL147:
  37:Src/max2871.c **** 			if (i == 5) HAL_Delay(20);
 1105              		.loc 1 37 0
 1106 004c FFF7FEFF 		bl	max2871SpiWrite
 1107              	.LVL148:
  38:Src/max2871.c **** 		}
 1108              		.loc 1 38 0
 1109 0050 052C     		cmp	r4, #5
 1110 0052 F5D1     		bne	.L83
ARM GAS  /tmp/ccHEr0ck.s 			page 27


  38:Src/max2871.c **** 		}
 1111              		.loc 1 38 0 is_stmt 0 discriminator 1
 1112 0054 1420     		movs	r0, #20
 1113 0056 FFF7FEFF 		bl	HAL_Delay
 1114              	.LVL149:
 1115 005a F1E7     		b	.L83
 1116              	.L88:
 1117              	.LBE28:
  40:Src/max2871.c **** 	}
 1118              		.loc 1 40 0 is_stmt 1 discriminator 2
 1119 005c 1420     		movs	r0, #20
 1120 005e FFF7FEFF 		bl	HAL_Delay
 1121              	.LVL150:
  32:Src/max2871.c **** 	{
 1122              		.loc 1 32 0 discriminator 2
 1123 0062 013D     		subs	r5, r5, #1
 1124              	.LVL151:
 1125              	.L82:
  32:Src/max2871.c **** 	{
 1126              		.loc 1 32 0 is_stmt 0 discriminator 1
 1127 0064 002D     		cmp	r5, #0
 1128 0066 01DB     		blt	.L89
 1129              	.LBB29:
  34:Src/max2871.c **** 		{
 1130              		.loc 1 34 0 is_stmt 1
 1131 0068 0524     		movs	r4, #5
 1132 006a EAE7     		b	.L85
 1133              	.L89:
 1134              	.LBE29:
 1135              	.LBE27:
  44:Src/max2871.c **** 	max2871Set_N(83);		// Init to 50Mhz
 1136              		.loc 1 44 0
 1137 006c 0020     		movs	r0, #0
 1138 006e FFF7FEFF 		bl	max2871Set_INT
 1139              	.LVL152:
  45:Src/max2871.c **** 	max2871Set_FRAC(1365);
 1140              		.loc 1 45 0
 1141 0072 5320     		movs	r0, #83
 1142 0074 FFF7FEFF 		bl	max2871Set_N
 1143              	.LVL153:
  46:Src/max2871.c **** 	max2871Set_CPOC(0);
 1144              		.loc 1 46 0
 1145 0078 40F25550 		movw	r0, #1365
 1146 007c FFF7FEFF 		bl	max2871Set_FRAC
 1147              	.LVL154:
  47:Src/max2871.c **** 	max2871Set_CPL(0);
 1148              		.loc 1 47 0
 1149 0080 0020     		movs	r0, #0
 1150 0082 FFF7FEFF 		bl	max2871Set_CPOC
 1151              	.LVL155:
  48:Src/max2871.c **** 	max2871Set_CPT(0);
 1152              		.loc 1 48 0
 1153 0086 0020     		movs	r0, #0
 1154 0088 FFF7FEFF 		bl	max2871Set_CPL
 1155              	.LVL156:
  49:Src/max2871.c **** 	max2871Set_P(1);
 1156              		.loc 1 49 0
ARM GAS  /tmp/ccHEr0ck.s 			page 28


 1157 008c 0020     		movs	r0, #0
 1158 008e FFF7FEFF 		bl	max2871Set_CPT
 1159              	.LVL157:
  50:Src/max2871.c **** 	max2871Set_M(4095);
 1160              		.loc 1 50 0
 1161 0092 0120     		movs	r0, #1
 1162 0094 FFF7FEFF 		bl	max2871Set_P
 1163              	.LVL158:
  51:Src/max2871.c **** 	max2871Set_LDS(1);
 1164              		.loc 1 51 0
 1165 0098 40F6FF70 		movw	r0, #4095
 1166 009c FFF7FEFF 		bl	max2871Set_M
 1167              	.LVL159:
  52:Src/max2871.c **** 	max2871Set_SDN(0);
 1168              		.loc 1 52 0
 1169 00a0 0120     		movs	r0, #1
 1170 00a2 FFF7FEFF 		bl	max2871Set_LDS
 1171              	.LVL160:
  53:Src/max2871.c **** 	max2871Set_MUX(0xC); 	// Reg 6 Readback 0xC
 1172              		.loc 1 53 0
 1173 00a6 0020     		movs	r0, #0
 1174 00a8 FFF7FEFF 		bl	max2871Set_SDN
 1175              	.LVL161:
  54:Src/max2871.c **** 	max2871Set_DBR(1);
 1176              		.loc 1 54 0
 1177 00ac 0C20     		movs	r0, #12
 1178 00ae FFF7FEFF 		bl	max2871Set_MUX
 1179              	.LVL162:
  55:Src/max2871.c **** 	max2871Set_RDIV2(0);
 1180              		.loc 1 55 0
 1181 00b2 0120     		movs	r0, #1
 1182 00b4 FFF7FEFF 		bl	max2871Set_DBR
 1183              	.LVL163:
  56:Src/max2871.c **** 	max2871Set_R(1); 		// 38.4MHz f_PFD
 1184              		.loc 1 56 0
 1185 00b8 0020     		movs	r0, #0
 1186 00ba FFF7FEFF 		bl	max2871Set_RDIV2
 1187              	.LVL164:
  57:Src/max2871.c **** 	max2871Set_REG4DB(0);
 1188              		.loc 1 57 0
 1189 00be 0120     		movs	r0, #1
 1190 00c0 FFF7FEFF 		bl	max2871Set_R
 1191              	.LVL165:
  58:Src/max2871.c **** 	max2871Set_CP(15);
 1192              		.loc 1 58 0
 1193 00c4 0020     		movs	r0, #0
 1194 00c6 FFF7FEFF 		bl	max2871Set_REG4DB
 1195              	.LVL166:
  59:Src/max2871.c **** 	max2871Set_LDF(0);
 1196              		.loc 1 59 0
 1197 00ca 0F20     		movs	r0, #15
 1198 00cc FFF7FEFF 		bl	max2871Set_CP
 1199              	.LVL167:
  60:Src/max2871.c **** 	max2871Set_LDP(0);
 1200              		.loc 1 60 0
 1201 00d0 0020     		movs	r0, #0
 1202 00d2 FFF7FEFF 		bl	max2871Set_LDF
ARM GAS  /tmp/ccHEr0ck.s 			page 29


 1203              	.LVL168:
  61:Src/max2871.c **** 	max2871Set_PDP(1);
 1204              		.loc 1 61 0
 1205 00d6 0020     		movs	r0, #0
 1206 00d8 FFF7FEFF 		bl	max2871Set_LDP
 1207              	.LVL169:
  62:Src/max2871.c **** 	max2871Set_SHDN(0);
 1208              		.loc 1 62 0
 1209 00dc 0120     		movs	r0, #1
 1210 00de FFF7FEFF 		bl	max2871Set_PDP
 1211              	.LVL170:
  63:Src/max2871.c **** 	max2871Set_TRI(0);
 1212              		.loc 1 63 0
 1213 00e2 0020     		movs	r0, #0
 1214 00e4 FFF7FEFF 		bl	max2871Set_SHDN
 1215              	.LVL171:
  64:Src/max2871.c **** 	max2871Set_RST(0);
 1216              		.loc 1 64 0
 1217 00e8 0020     		movs	r0, #0
 1218 00ea FFF7FEFF 		bl	max2871Set_TRI
 1219              	.LVL172:
  65:Src/max2871.c **** 	max2871Set_VCO(0);
 1220              		.loc 1 65 0
 1221 00ee 0020     		movs	r0, #0
 1222 00f0 FFF7FEFF 		bl	max2871Set_RST
 1223              	.LVL173:
  66:Src/max2871.c **** 	max2871Set_VAS_SHDN(0);
 1224              		.loc 1 66 0
 1225 00f4 0020     		movs	r0, #0
 1226 00f6 FFF7FEFF 		bl	max2871Set_VCO
 1227              	.LVL174:
  67:Src/max2871.c **** 	max2871Set_VAS_TEMP(1);
 1228              		.loc 1 67 0
 1229 00fa 0020     		movs	r0, #0
 1230 00fc FFF7FEFF 		bl	max2871Set_VAS_SHDN
 1231              	.LVL175:
  68:Src/max2871.c **** 	max2871Set_CSM(0);
 1232              		.loc 1 68 0
 1233 0100 0120     		movs	r0, #1
 1234 0102 FFF7FEFF 		bl	max2871Set_VAS_TEMP
 1235              	.LVL176:
  69:Src/max2871.c **** 	max2871Set_MUTEDEL(1);
 1236              		.loc 1 69 0
 1237 0106 0020     		movs	r0, #0
 1238 0108 FFF7FEFF 		bl	max2871Set_CSM
 1239              	.LVL177:
  70:Src/max2871.c **** 	max2871Set_CDM(0);
 1240              		.loc 1 70 0
 1241 010c 0120     		movs	r0, #1
 1242 010e FFF7FEFF 		bl	max2871Set_MUTEDEL
 1243              	.LVL178:
  71:Src/max2871.c **** 	max2871Set_CDIV(38);
 1244              		.loc 1 71 0
 1245 0112 0020     		movs	r0, #0
 1246 0114 FFF7FEFF 		bl	max2871Set_CDM
 1247              	.LVL179:
  72:Src/max2871.c **** 	max2871Set_SDLDO(0);
ARM GAS  /tmp/ccHEr0ck.s 			page 30


 1248              		.loc 1 72 0
 1249 0118 2620     		movs	r0, #38
 1250 011a FFF7FEFF 		bl	max2871Set_CDIV
 1251              	.LVL180:
  73:Src/max2871.c **** 	max2871Set_SDDIV(0);
 1252              		.loc 1 73 0
 1253 011e 0020     		movs	r0, #0
 1254 0120 FFF7FEFF 		bl	max2871Set_SDLDO
 1255              	.LVL181:
  74:Src/max2871.c **** 	max2871Set_SDREF(0);
 1256              		.loc 1 74 0
 1257 0124 0020     		movs	r0, #0
 1258 0126 FFF7FEFF 		bl	max2871Set_SDDIV
 1259              	.LVL182:
  75:Src/max2871.c **** 	max2871Set_BS(768);		//BS = fPFD / 50KHz
 1260              		.loc 1 75 0
 1261 012a 0020     		movs	r0, #0
 1262 012c FFF7FEFF 		bl	max2871Set_SDREF
 1263              	.LVL183:
  76:Src/max2871.c **** 	max2871Set_FB(1);
 1264              		.loc 1 76 0
 1265 0130 4FF44070 		mov	r0, #768
 1266 0134 FFF7FEFF 		bl	max2871Set_BS
 1267              	.LVL184:
  77:Src/max2871.c **** 	max2871Set_DIVA(6);
 1268              		.loc 1 77 0
 1269 0138 0120     		movs	r0, #1
 1270 013a FFF7FEFF 		bl	max2871Set_FB
 1271              	.LVL185:
  78:Src/max2871.c **** 	max2871Set_SDVCO(0);
 1272              		.loc 1 78 0
 1273 013e 0620     		movs	r0, #6
 1274 0140 FFF7FEFF 		bl	max2871Set_DIVA
 1275              	.LVL186:
  79:Src/max2871.c **** 	max2871Set_MTLD(1);
 1276              		.loc 1 79 0
 1277 0144 0020     		movs	r0, #0
 1278 0146 FFF7FEFF 		bl	max2871Set_SDVCO
 1279              	.LVL187:
  80:Src/max2871.c **** 	max2871Set_BDIV(0);
 1280              		.loc 1 80 0
 1281 014a 0120     		movs	r0, #1
 1282 014c FFF7FEFF 		bl	max2871Set_MTLD
 1283              	.LVL188:
  81:Src/max2871.c **** 	max2871Set_RFB_EN(0);
 1284              		.loc 1 81 0
 1285 0150 0020     		movs	r0, #0
 1286 0152 FFF7FEFF 		bl	max2871Set_BDIV
 1287              	.LVL189:
  82:Src/max2871.c **** 	max2871Set_BPWR(0);
 1288              		.loc 1 82 0
 1289 0156 0020     		movs	r0, #0
 1290 0158 FFF7FEFF 		bl	max2871Set_RFB_EN
 1291              	.LVL190:
  83:Src/max2871.c **** 	max2871Set_RFA_EN(0);	// Begin with power off
 1292              		.loc 1 83 0
 1293 015c 0020     		movs	r0, #0
ARM GAS  /tmp/ccHEr0ck.s 			page 31


 1294 015e FFF7FEFF 		bl	max2871Set_BPWR
 1295              	.LVL191:
  84:Src/max2871.c **** 	max2871Set_APWR(3);
 1296              		.loc 1 84 0
 1297 0162 0020     		movs	r0, #0
 1298 0164 FFF7FEFF 		bl	max2871Set_RFA_EN
 1299              	.LVL192:
  85:Src/max2871.c **** 	max2871Set_SDPLL(0);
 1300              		.loc 1 85 0
 1301 0168 0320     		movs	r0, #3
 1302 016a FFF7FEFF 		bl	max2871Set_APWR
 1303              	.LVL193:
  86:Src/max2871.c **** 	max2871Set_F01(0);
 1304              		.loc 1 86 0
 1305 016e 0020     		movs	r0, #0
 1306 0170 FFF7FEFF 		bl	max2871Set_SDPLL
 1307              	.LVL194:
  87:Src/max2871.c **** 	max2871Set_LD(1);
 1308              		.loc 1 87 0
 1309 0174 0020     		movs	r0, #0
 1310 0176 FFF7FEFF 		bl	max2871Set_F01
 1311              	.LVL195:
  88:Src/max2871.c **** 	max2871Set_Reserved();
 1312              		.loc 1 88 0
 1313 017a 0120     		movs	r0, #1
 1314 017c FFF7FEFF 		bl	max2871Set_LD
 1315              	.LVL196:
  89:Src/max2871.c **** 
 1316              		.loc 1 89 0
 1317 0180 FFF7FEFF 		bl	max2871Set_Reserved
 1318              	.LVL197:
  92:Src/max2871.c **** 	max2871Status->rfPower = 3;
 1319              		.loc 1 92 0
 1320 0184 0023     		movs	r3, #0
 1321 0186 3372     		strb	r3, [r6, #8]
  93:Src/max2871.c **** 	max2871Status->frequency = 50;
 1322              		.loc 1 93 0
 1323 0188 0323     		movs	r3, #3
 1324 018a B372     		strb	r3, [r6, #10]
  94:Src/max2871.c **** 
 1325              		.loc 1 94 0
 1326 018c 074B     		ldr	r3, .L90+8
 1327 018e 7360     		str	r3, [r6, #4]	@ float
  97:Src/max2871.c **** 	HAL_Delay(10);
 1328              		.loc 1 97 0
 1329 0190 FFF7FEFF 		bl	max2871WriteRegisters
 1330              	.LVL198:
  98:Src/max2871.c **** 
 1331              		.loc 1 98 0
 1332 0194 0A20     		movs	r0, #10
 1333 0196 FFF7FEFF 		bl	HAL_Delay
 1334              	.LVL199:
 101:Src/max2871.c **** }
 1335              		.loc 1 101 0
 1336 019a 3046     		mov	r0, r6
 1337 019c FFF7FEFF 		bl	max2871CheckLD
 1338              	.LVL200:
ARM GAS  /tmp/ccHEr0ck.s 			page 32


 102:Src/max2871.c **** 
 1339              		.loc 1 102 0
 1340 01a0 70BD     		pop	{r4, r5, r6, pc}
 1341              	.LVL201:
 1342              	.L91:
 1343 01a2 00BF     		.align	2
 1344              	.L90:
 1345 01a4 000C0140 		.word	1073810432
 1346 01a8 00080140 		.word	1073809408
 1347 01ac 00004842 		.word	1112014848
 1348              		.cfi_endproc
 1349              	.LFE69:
 1351              		.section	.text.max2871PrintRegisters,"ax",%progbits
 1352              		.align	1
 1353              		.global	max2871PrintRegisters
 1354              		.syntax unified
 1355              		.thumb
 1356              		.thumb_func
 1357              		.fpu softvfp
 1359              	max2871PrintRegisters:
 1360              	.LFB80:
 302:Src/max2871.c **** 
 303:Src/max2871.c **** void max2871PrintRegisters(void)
 304:Src/max2871.c **** {
 1361              		.loc 1 304 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365 0000 70B5     		push	{r4, r5, r6, lr}
 1366              	.LCFI11:
 1367              		.cfi_def_cfa_offset 16
 1368              		.cfi_offset 4, -16
 1369              		.cfi_offset 5, -12
 1370              		.cfi_offset 6, -8
 1371              		.cfi_offset 14, -4
 1372              	.LVL202:
 1373              	.LBB30:
 305:Src/max2871.c **** 	uint32_t txReg;
 306:Src/max2871.c **** 
 307:Src/max2871.c **** 	for (int8_t i = 0; i <= 5; i++)
 1374              		.loc 1 307 0
 1375 0002 0025     		movs	r5, #0
 1376 0004 12E0     		b	.L93
 1377              	.LVL203:
 1378              	.L94:
 308:Src/max2871.c **** 	{
 309:Src/max2871.c **** 		txReg = max2871GetRegister(i);
 1379              		.loc 1 309 0 discriminator 3
 1380 0006 ECB2     		uxtb	r4, r5
 1381 0008 2046     		mov	r0, r4
 1382 000a FFF7FEFF 		bl	max2871GetRegister
 1383              	.LVL204:
 310:Src/max2871.c **** 		sprintf((char *)str1, "> Register %d = 0x%x\n", i, (unsigned int) txReg);
 1384              		.loc 1 310 0 discriminator 3
 1385 000e 0E4E     		ldr	r6, .L96
 1386 0010 0346     		mov	r3, r0
 1387 0012 2A46     		mov	r2, r5
ARM GAS  /tmp/ccHEr0ck.s 			page 33


 1388 0014 0D49     		ldr	r1, .L96+4
 1389 0016 3046     		mov	r0, r6
 1390              	.LVL205:
 1391 0018 FFF7FEFF 		bl	sprintf
 1392              	.LVL206:
 311:Src/max2871.c **** 		printUSB(str1);
 1393              		.loc 1 311 0 discriminator 3
 1394 001c 3046     		mov	r0, r6
 1395 001e FFF7FEFF 		bl	printUSB
 1396              	.LVL207:
 312:Src/max2871.c **** 		HAL_Delay(10);
 1397              		.loc 1 312 0 discriminator 3
 1398 0022 0A20     		movs	r0, #10
 1399 0024 FFF7FEFF 		bl	HAL_Delay
 1400              	.LVL208:
 307:Src/max2871.c **** 	{
 1401              		.loc 1 307 0 discriminator 3
 1402 0028 0134     		adds	r4, r4, #1
 1403 002a 65B2     		sxtb	r5, r4
 1404              	.LVL209:
 1405              	.L93:
 307:Src/max2871.c **** 	{
 1406              		.loc 1 307 0 is_stmt 0 discriminator 1
 1407 002c 052D     		cmp	r5, #5
 1408 002e EADD     		ble	.L94
 1409              	.LBE30:
 313:Src/max2871.c **** 
 314:Src/max2871.c **** 	}
 315:Src/max2871.c **** 
 316:Src/max2871.c **** 	txReg = max2871SpiRead();
 1410              		.loc 1 316 0 is_stmt 1
 1411 0030 FFF7FEFF 		bl	max2871SpiRead
 1412              	.LVL210:
 317:Src/max2871.c **** 	sprintf((char *)str1, "> Register 6 = 0x%x\n", (unsigned int) txReg);
 1413              		.loc 1 317 0
 1414 0034 044C     		ldr	r4, .L96
 1415 0036 0246     		mov	r2, r0
 1416 0038 0549     		ldr	r1, .L96+8
 1417 003a 2046     		mov	r0, r4
 1418              	.LVL211:
 1419 003c FFF7FEFF 		bl	sprintf
 1420              	.LVL212:
 318:Src/max2871.c **** 	printUSB(str1);
 1421              		.loc 1 318 0
 1422 0040 2046     		mov	r0, r4
 1423 0042 FFF7FEFF 		bl	printUSB
 1424              	.LVL213:
 319:Src/max2871.c **** }
 1425              		.loc 1 319 0
 1426 0046 70BD     		pop	{r4, r5, r6, pc}
 1427              	.LVL214:
 1428              	.L97:
 1429              		.align	2
 1430              	.L96:
 1431 0048 00000000 		.word	.LANCHOR0
 1432 004c 00000000 		.word	.LC3
 1433 0050 18000000 		.word	.LC4
ARM GAS  /tmp/ccHEr0ck.s 			page 34


 1434              		.cfi_endproc
 1435              	.LFE80:
 1437              		.section	.text.max2871PrintStatus,"ax",%progbits
 1438              		.align	1
 1439              		.global	max2871PrintStatus
 1440              		.syntax unified
 1441              		.thumb
 1442              		.thumb_func
 1443              		.fpu softvfp
 1445              	max2871PrintStatus:
 1446              	.LFB81:
 320:Src/max2871.c **** 
 321:Src/max2871.c **** void max2871PrintStatus(uint8_t verbose, struct MAX2871Struct *max2871Status)
 322:Src/max2871.c **** {
 1447              		.loc 1 322 0
 1448              		.cfi_startproc
 1449              		@ args = 0, pretend = 0, frame = 136
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451              	.LVL215:
 1452 0000 30B5     		push	{r4, r5, lr}
 1453              	.LCFI12:
 1454              		.cfi_def_cfa_offset 12
 1455              		.cfi_offset 4, -12
 1456              		.cfi_offset 5, -8
 1457              		.cfi_offset 14, -4
 1458 0002 A3B0     		sub	sp, sp, #140
 1459              	.LCFI13:
 1460              		.cfi_def_cfa_offset 152
 1461 0004 0546     		mov	r5, r0
 1462 0006 0C46     		mov	r4, r1
 323:Src/max2871.c **** 	uint8_t str1[128] = "";
 1463              		.loc 1 323 0
 1464 0008 0021     		movs	r1, #0
 1465              	.LVL216:
 1466 000a 0291     		str	r1, [sp, #8]
 1467 000c 7C22     		movs	r2, #124
 1468 000e 03A8     		add	r0, sp, #12
 1469              	.LVL217:
 1470 0010 FFF7FEFF 		bl	memset
 1471              	.LVL218:
 324:Src/max2871.c **** 	int8_t powerArray[4] = {-4, -1, 2, 5};
 1472              		.loc 1 324 0
 1473 0014 274B     		ldr	r3, .L102
 1474 0016 1B68     		ldr	r3, [r3]
 1475 0018 0193     		str	r3, [sp, #4]
 325:Src/max2871.c **** 
 326:Src/max2871.c **** 	printUSB("> ----  MAX2871  ----\n");
 1476              		.loc 1 326 0
 1477 001a 2748     		ldr	r0, .L102+4
 1478 001c FFF7FEFF 		bl	printUSB
 1479              	.LVL219:
 327:Src/max2871.c **** 
 328:Src/max2871.c **** 	sprintf(str1, "> Chip Enable = %d\n", max2871Status->CHIP_EN);
 1480              		.loc 1 328 0
 1481 0020 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 1482 0022 2649     		ldr	r1, .L102+8
 1483 0024 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccHEr0ck.s 			page 35


 1484 0026 FFF7FEFF 		bl	sprintf
 1485              	.LVL220:
 329:Src/max2871.c **** 	printUSB(str1);
 1486              		.loc 1 329 0
 1487 002a 02A8     		add	r0, sp, #8
 1488 002c FFF7FEFF 		bl	printUSB
 1489              	.LVL221:
 330:Src/max2871.c **** 
 331:Src/max2871.c **** 	max2871CheckLD(max2871Status);
 1490              		.loc 1 331 0
 1491 0030 2046     		mov	r0, r4
 1492 0032 FFF7FEFF 		bl	max2871CheckLD
 1493              	.LVL222:
 332:Src/max2871.c **** 	sprintf(str1, "> LD Status = %d\n", max2871Status->ldState);
 1494              		.loc 1 332 0
 1495 0036 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 1496 0038 2149     		ldr	r1, .L102+12
 1497 003a 02A8     		add	r0, sp, #8
 1498 003c FFF7FEFF 		bl	sprintf
 1499              	.LVL223:
 333:Src/max2871.c **** 	printUSB(str1);
 1500              		.loc 1 333 0
 1501 0040 02A8     		add	r0, sp, #8
 1502 0042 FFF7FEFF 		bl	printUSB
 1503              	.LVL224:
 334:Src/max2871.c **** 
 335:Src/max2871.c **** 	sprintf(str1, "> Set Frequency = %0.2f MHz\n", max2871Status->frequency);
 1504              		.loc 1 335 0
 1505 0046 6068     		ldr	r0, [r4, #4]	@ float
 1506 0048 FFF7FEFF 		bl	__aeabi_f2d
 1507              	.LVL225:
 1508 004c 0246     		mov	r2, r0
 1509 004e 0B46     		mov	r3, r1
 1510 0050 1C49     		ldr	r1, .L102+16
 1511 0052 02A8     		add	r0, sp, #8
 1512 0054 FFF7FEFF 		bl	sprintf
 1513              	.LVL226:
 336:Src/max2871.c **** 	printUSB(str1);
 1514              		.loc 1 336 0
 1515 0058 02A8     		add	r0, sp, #8
 1516 005a FFF7FEFF 		bl	printUSB
 1517              	.LVL227:
 337:Src/max2871.c **** 
 338:Src/max2871.c **** 	sprintf(str1, "> Int-N / nFrac-N = %d\n", max2871Status->intN_nFracN);
 1518              		.loc 1 338 0
 1519 005e E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
 1520 0060 1949     		ldr	r1, .L102+20
 1521 0062 02A8     		add	r0, sp, #8
 1522 0064 FFF7FEFF 		bl	sprintf
 1523              	.LVL228:
 339:Src/max2871.c **** 	printUSB(str1);
 1524              		.loc 1 339 0
 1525 0068 02A8     		add	r0, sp, #8
 1526 006a FFF7FEFF 		bl	printUSB
 1527              	.LVL229:
 340:Src/max2871.c **** 
 341:Src/max2871.c **** 	sprintf(str1, "> RFA Enable = %d\n", max2871Status->RFA_EN);
ARM GAS  /tmp/ccHEr0ck.s 			page 36


 1528              		.loc 1 341 0
 1529 006e 227A     		ldrb	r2, [r4, #8]	@ zero_extendqisi2
 1530 0070 1649     		ldr	r1, .L102+24
 1531 0072 02A8     		add	r0, sp, #8
 1532 0074 FFF7FEFF 		bl	sprintf
 1533              	.LVL230:
 342:Src/max2871.c **** 	printUSB(str1);
 1534              		.loc 1 342 0
 1535 0078 02A8     		add	r0, sp, #8
 1536 007a FFF7FEFF 		bl	printUSB
 1537              	.LVL231:
 343:Src/max2871.c **** 
 344:Src/max2871.c **** 	sprintf(str1, "> RF Out Enable = %d\n", max2871Status->RF_CHIP_EN);
 1538              		.loc 1 344 0
 1539 007e 627A     		ldrb	r2, [r4, #9]	@ zero_extendqisi2
 1540 0080 1349     		ldr	r1, .L102+28
 1541 0082 02A8     		add	r0, sp, #8
 1542 0084 FFF7FEFF 		bl	sprintf
 1543              	.LVL232:
 345:Src/max2871.c **** 	printUSB(str1);
 1544              		.loc 1 345 0
 1545 0088 02A8     		add	r0, sp, #8
 1546 008a FFF7FEFF 		bl	printUSB
 1547              	.LVL233:
 346:Src/max2871.c **** 
 347:Src/max2871.c **** 	sprintf(str1, "> RF Power = %d dBm\n", powerArray[max2871Status->rfPower]);
 1548              		.loc 1 347 0
 1549 008e A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 1550 0090 22AA     		add	r2, sp, #136
 1551 0092 1344     		add	r3, r3, r2
 1552 0094 13F9842C 		ldrsb	r2, [r3, #-132]
 1553 0098 0E49     		ldr	r1, .L102+32
 1554 009a 02A8     		add	r0, sp, #8
 1555 009c FFF7FEFF 		bl	sprintf
 1556              	.LVL234:
 348:Src/max2871.c **** 	printUSB(str1);
 1557              		.loc 1 348 0
 1558 00a0 02A8     		add	r0, sp, #8
 1559 00a2 FFF7FEFF 		bl	printUSB
 1560              	.LVL235:
 349:Src/max2871.c **** 
 350:Src/max2871.c **** 	if (verbose)
 1561              		.loc 1 350 0
 1562 00a6 0DB9     		cbnz	r5, .L101
 1563              	.L98:
 351:Src/max2871.c **** 	{
 352:Src/max2871.c **** 		max2871PrintRegisters();
 353:Src/max2871.c **** 	}
 354:Src/max2871.c **** }
 1564              		.loc 1 354 0
 1565 00a8 23B0     		add	sp, sp, #140
 1566              	.LCFI14:
 1567              		.cfi_remember_state
 1568              		.cfi_def_cfa_offset 12
 1569              		@ sp needed
 1570 00aa 30BD     		pop	{r4, r5, pc}
 1571              	.LVL236:
ARM GAS  /tmp/ccHEr0ck.s 			page 37


 1572              	.L101:
 1573              	.LCFI15:
 1574              		.cfi_restore_state
 352:Src/max2871.c **** 	}
 1575              		.loc 1 352 0
 1576 00ac FFF7FEFF 		bl	max2871PrintRegisters
 1577              	.LVL237:
 1578              		.loc 1 354 0
 1579 00b0 FAE7     		b	.L98
 1580              	.L103:
 1581 00b2 00BF     		.align	2
 1582              	.L102:
 1583 00b4 00000000 		.word	.LANCHOR1
 1584 00b8 00000000 		.word	.LC5
 1585 00bc 18000000 		.word	.LC6
 1586 00c0 2C000000 		.word	.LC7
 1587 00c4 40000000 		.word	.LC8
 1588 00c8 60000000 		.word	.LC9
 1589 00cc 78000000 		.word	.LC10
 1590 00d0 8C000000 		.word	.LC11
 1591 00d4 A4000000 		.word	.LC12
 1592              		.cfi_endproc
 1593              	.LFE81:
 1595              		.comm	max2871Status,12,4
 1596              		.global	str1
 1597              		.section	.rodata
 1598              		.align	2
 1599              		.set	.LANCHOR1,. + 0
 1600              	.LC0:
 1601 0000 FC       		.byte	-4
 1602 0001 FF       		.byte	-1
 1603 0002 02       		.byte	2
 1604 0003 05       		.byte	5
 1605              		.section	.bss.str1,"aw",%nobits
 1606              		.align	2
 1607              		.set	.LANCHOR0,. + 0
 1610              	str1:
 1611 0000 00000000 		.space	128
 1611      00000000 
 1611      00000000 
 1611      00000000 
 1611      00000000 
 1612              		.section	.rodata.max2871PrintRegisters.str1.4,"aMS",%progbits,1
 1613              		.align	2
 1614              	.LC3:
 1615 0000 3E205265 		.ascii	"> Register %d = 0x%x\012\000"
 1615      67697374 
 1615      65722025 
 1615      64203D20 
 1615      30782578 
 1616 0016 0000     		.space	2
 1617              	.LC4:
 1618 0018 3E205265 		.ascii	"> Register 6 = 0x%x\012\000"
 1618      67697374 
 1618      65722036 
 1618      203D2030 
 1618      7825780A 
ARM GAS  /tmp/ccHEr0ck.s 			page 38


 1619              		.section	.rodata.max2871PrintStatus.str1.4,"aMS",%progbits,1
 1620              		.align	2
 1621              	.LC5:
 1622 0000 3E202D2D 		.ascii	"> ----  MAX2871  ----\012\000"
 1622      2D2D2020 
 1622      4D415832 
 1622      38373120 
 1622      202D2D2D 
 1623 0017 00       		.space	1
 1624              	.LC6:
 1625 0018 3E204368 		.ascii	"> Chip Enable = %d\012\000"
 1625      69702045 
 1625      6E61626C 
 1625      65203D20 
 1625      25640A00 
 1626              	.LC7:
 1627 002c 3E204C44 		.ascii	"> LD Status = %d\012\000"
 1627      20537461 
 1627      74757320 
 1627      3D202564 
 1627      0A00
 1628 003e 0000     		.space	2
 1629              	.LC8:
 1630 0040 3E205365 		.ascii	"> Set Frequency = %0.2f MHz\012\000"
 1630      74204672 
 1630      65717565 
 1630      6E637920 
 1630      3D202530 
 1631 005d 000000   		.space	3
 1632              	.LC9:
 1633 0060 3E20496E 		.ascii	"> Int-N / nFrac-N = %d\012\000"
 1633      742D4E20 
 1633      2F206E46 
 1633      7261632D 
 1633      4E203D20 
 1634              	.LC10:
 1635 0078 3E205246 		.ascii	"> RFA Enable = %d\012\000"
 1635      4120456E 
 1635      61626C65 
 1635      203D2025 
 1635      640A00
 1636 008b 00       		.space	1
 1637              	.LC11:
 1638 008c 3E205246 		.ascii	"> RF Out Enable = %d\012\000"
 1638      204F7574 
 1638      20456E61 
 1638      626C6520 
 1638      3D202564 
 1639 00a2 0000     		.space	2
 1640              	.LC12:
 1641 00a4 3E205246 		.ascii	"> RF Power = %d dBm\012\000"
 1641      20506F77 
 1641      6572203D 
 1641      20256420 
 1641      64426D0A 
 1642              		.section	.rodata.max2871SetFrequency.str1.4,"aMS",%progbits,1
 1643              		.align	2
ARM GAS  /tmp/ccHEr0ck.s 			page 39


 1644              	.LC1:
 1645 0000 3E204261 		.ascii	"> Bad input frequency to max2871SetFrequency\000"
 1645      6420696E 
 1645      70757420 
 1645      66726571 
 1645      75656E63 
 1646              		.section	.rodata.max2871SetPower.str1.4,"aMS",%progbits,1
 1647              		.align	2
 1648              	.LC2:
 1649 0000 3E204261 		.ascii	"> Bad input power to max2871SetPower\000"
 1649      6420696E 
 1649      70757420 
 1649      706F7765 
 1649      7220746F 
 1650              		.text
 1651              	.Letext0:
 1652              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1653              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1654              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 1655              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1656              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1657              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1658              		.file 9 "Inc/main.h"
 1659              		.file 10 "Inc/max2871.h"
 1660              		.file 11 "/usr/include/newlib/sys/lock.h"
 1661              		.file 12 "/usr/include/newlib/sys/_types.h"
 1662              		.file 13 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1663              		.file 14 "/usr/include/newlib/sys/reent.h"
 1664              		.file 15 "/usr/include/newlib/stdlib.h"
 1665              		.file 16 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 1666              		.file 17 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 1667              		.file 18 "Inc/usbd_cdc_if.h"
 1668              		.file 19 "/usr/include/newlib/math.h"
 1669              		.file 20 "/usr/include/newlib/stdio.h"
 1670              		.file 21 "Inc/max2871_registers.h"
 1671              		.file 22 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1672              		.file 23 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1673              		.file 24 "<built-in>"
ARM GAS  /tmp/ccHEr0ck.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 max2871.c
     /tmp/ccHEr0ck.s:16     .text.max2871SpiWrite:0000000000000000 $t
     /tmp/ccHEr0ck.s:23     .text.max2871SpiWrite:0000000000000000 max2871SpiWrite
     /tmp/ccHEr0ck.s:177    .text.max2871SpiWrite:00000000000000b8 $d
     /tmp/ccHEr0ck.s:185    .text.max2871SpiRead:0000000000000000 $t
     /tmp/ccHEr0ck.s:192    .text.max2871SpiRead:0000000000000000 max2871SpiRead
     /tmp/ccHEr0ck.s:302    .text.max2871SpiRead:0000000000000078 $d
     /tmp/ccHEr0ck.s:310    .text.max2871WriteRegisters:0000000000000000 $t
     /tmp/ccHEr0ck.s:317    .text.max2871WriteRegisters:0000000000000000 max2871WriteRegisters
     /tmp/ccHEr0ck.s:368    .text.max2871SetFrequency:0000000000000000 $t
     /tmp/ccHEr0ck.s:375    .text.max2871SetFrequency:0000000000000000 max2871SetFrequency
     /tmp/ccHEr0ck.s:695    .text.max2871SetFrequency:00000000000001bc $d
     /tmp/ccHEr0ck.s:711    .text.max2871ChipEnable:0000000000000000 $t
     /tmp/ccHEr0ck.s:718    .text.max2871ChipEnable:0000000000000000 max2871ChipEnable
     /tmp/ccHEr0ck.s:747    .text.max2871ChipEnable:0000000000000014 $d
     /tmp/ccHEr0ck.s:752    .text.max2871ChipDisable:0000000000000000 $t
     /tmp/ccHEr0ck.s:759    .text.max2871ChipDisable:0000000000000000 max2871ChipDisable
     /tmp/ccHEr0ck.s:788    .text.max2871ChipDisable:0000000000000014 $d
     /tmp/ccHEr0ck.s:793    .text.max2871RFEnable:0000000000000000 $t
     /tmp/ccHEr0ck.s:800    .text.max2871RFEnable:0000000000000000 max2871RFEnable
     /tmp/ccHEr0ck.s:842    .text.max2871RFEnable:0000000000000028 $d
     /tmp/ccHEr0ck.s:847    .text.max2871RFDisable:0000000000000000 $t
     /tmp/ccHEr0ck.s:854    .text.max2871RFDisable:0000000000000000 max2871RFDisable
     /tmp/ccHEr0ck.s:892    .text.max2871RFDisable:0000000000000020 $d
     /tmp/ccHEr0ck.s:897    .text.max2871SetPower:0000000000000000 $t
     /tmp/ccHEr0ck.s:904    .text.max2871SetPower:0000000000000000 max2871SetPower
     /tmp/ccHEr0ck.s:924    .text.max2871SetPower:000000000000000e $d
     /tmp/ccHEr0ck.s:934    .text.max2871SetPower:0000000000000018 $t
     /tmp/ccHEr0ck.s:978    .text.max2871SetPower:0000000000000044 $d
     /tmp/ccHEr0ck.s:983    .text.max2871CheckLD:0000000000000000 $t
     /tmp/ccHEr0ck.s:990    .text.max2871CheckLD:0000000000000000 max2871CheckLD
     /tmp/ccHEr0ck.s:1025   .text.max2871CheckLD:000000000000001c $d
     /tmp/ccHEr0ck.s:1030   .text.max2871Setup:0000000000000000 $t
     /tmp/ccHEr0ck.s:1037   .text.max2871Setup:0000000000000000 max2871Setup
     /tmp/ccHEr0ck.s:1345   .text.max2871Setup:00000000000001a4 $d
     /tmp/ccHEr0ck.s:1352   .text.max2871PrintRegisters:0000000000000000 $t
     /tmp/ccHEr0ck.s:1359   .text.max2871PrintRegisters:0000000000000000 max2871PrintRegisters
     /tmp/ccHEr0ck.s:1431   .text.max2871PrintRegisters:0000000000000048 $d
     /tmp/ccHEr0ck.s:1438   .text.max2871PrintStatus:0000000000000000 $t
     /tmp/ccHEr0ck.s:1445   .text.max2871PrintStatus:0000000000000000 max2871PrintStatus
     /tmp/ccHEr0ck.s:1583   .text.max2871PrintStatus:00000000000000b4 $d
                            *COM*:000000000000000c max2871Status
     /tmp/ccHEr0ck.s:1610   .bss.str1:0000000000000000 str1
     /tmp/ccHEr0ck.s:1598   .rodata:0000000000000000 $d
     /tmp/ccHEr0ck.s:1606   .bss.str1:0000000000000000 $d
     /tmp/ccHEr0ck.s:1613   .rodata.max2871PrintRegisters.str1.4:0000000000000000 $d
     /tmp/ccHEr0ck.s:1620   .rodata.max2871PrintStatus.str1.4:0000000000000000 $d
     /tmp/ccHEr0ck.s:1643   .rodata.max2871SetFrequency.str1.4:0000000000000000 $d
     /tmp/ccHEr0ck.s:1647   .rodata.max2871SetPower.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_RCC_GetHCLKFreq
HAL_GPIO_ReadPin
max2871GetRegister
__aeabi_fcmpge
ARM GAS  /tmp/ccHEr0ck.s 			page 41


__aeabi_fcmplt
__aeabi_i2f
__aeabi_fmul
__aeabi_fdiv
__aeabi_f2uiz
__aeabi_ui2f
__aeabi_fsub
__aeabi_f2d
__aeabi_d2f
__aeabi_fadd
__aeabi_ui2d
__aeabi_ddiv
printUSB
round
pow
max2871Set_INT
max2871Set_N
max2871Set_FRAC
max2871Set_CPL
max2871Set_M
max2871Set_LDF
max2871Set_DIVA
max2871Set_F01
max2871Set_RFA_EN
max2871Set_APWR
max2871RegsInit
HAL_Delay
max2871Set_CPOC
max2871Set_CPT
max2871Set_P
max2871Set_LDS
max2871Set_SDN
max2871Set_MUX
max2871Set_DBR
max2871Set_RDIV2
max2871Set_R
max2871Set_REG4DB
max2871Set_CP
max2871Set_LDP
max2871Set_PDP
max2871Set_SHDN
max2871Set_TRI
max2871Set_RST
max2871Set_VCO
max2871Set_VAS_SHDN
max2871Set_VAS_TEMP
max2871Set_CSM
max2871Set_MUTEDEL
max2871Set_CDM
max2871Set_CDIV
max2871Set_SDLDO
max2871Set_SDDIV
max2871Set_SDREF
max2871Set_BS
max2871Set_FB
max2871Set_SDVCO
max2871Set_MTLD
ARM GAS  /tmp/ccHEr0ck.s 			page 42


max2871Set_BDIV
max2871Set_RFB_EN
max2871Set_BPWR
max2871Set_SDPLL
max2871Set_LD
max2871Set_Reserved
sprintf
memset
