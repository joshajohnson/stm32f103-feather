ARM GAS  /tmp/cccqAtJW.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"commandParser.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_d2f
  16              		.global	__aeabi_f2d
  17              		.section	.text.commandParser,"ax",%progbits
  18              		.align	1
  19              		.global	commandParser
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu softvfp
  25              	commandParser:
  26              	.LFB69:
  27              		.file 1 "Src/commandParser.c"
   1:Src/commandParser.c **** #include "main.h"
   2:Src/commandParser.c **** #include "commandParser.h"
   3:Src/commandParser.c **** #include "usbd_cdc_if.h"
   4:Src/commandParser.c **** #include "dwt_stm32_delay.h"
   5:Src/commandParser.c **** #include <stdio.h>
   6:Src/commandParser.c **** #include <string.h>
   7:Src/commandParser.c **** #include "max2871.h"
   8:Src/commandParser.c **** #include "txChain.h"
   9:Src/commandParser.c **** #include "STP08CP05.h"
  10:Src/commandParser.c **** 
  11:Src/commandParser.c **** char txStr[128] = "";
  12:Src/commandParser.c **** 
  13:Src/commandParser.c **** void commandParser(struct MAX2871Struct *max2871Status, struct txStruct *txStatus)
  14:Src/commandParser.c **** {
  28              		.loc 1 14 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 280
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 36
  36              		.cfi_offset 4, -36
  37              		.cfi_offset 5, -32
  38              		.cfi_offset 6, -28
  39              		.cfi_offset 7, -24
  40              		.cfi_offset 8, -20
  41              		.cfi_offset 9, -16
  42              		.cfi_offset 10, -12
  43              		.cfi_offset 11, -8
  44              		.cfi_offset 14, -4
ARM GAS  /tmp/cccqAtJW.s 			page 2


  45 0004 CBB0     		sub	sp, sp, #300
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 336
  48 0006 8346     		mov	fp, r0
  49 0008 8A46     		mov	r10, r1
  15:Src/commandParser.c **** 	#define BUF_SIZE 128
  16:Src/commandParser.c **** 	#define CMD_SIZE 32
  17:Src/commandParser.c **** 	#define NUM_ARGS 6
  18:Src/commandParser.c **** 
  19:Src/commandParser.c **** 	char usrMsg[BUF_SIZE];
  20:Src/commandParser.c **** 	char command[CMD_SIZE] = "";
  50              		.loc 1 20 0
  51 000a 0024     		movs	r4, #0
  52 000c 2294     		str	r4, [sp, #136]
  53 000e 2394     		str	r4, [sp, #140]
  54 0010 2494     		str	r4, [sp, #144]
  55 0012 2594     		str	r4, [sp, #148]
  56 0014 2694     		str	r4, [sp, #152]
  57 0016 2794     		str	r4, [sp, #156]
  58 0018 2894     		str	r4, [sp, #160]
  59 001a 2994     		str	r4, [sp, #164]
  60              	.LVL1:
  21:Src/commandParser.c **** 	char args[NUM_ARGS][16];
  22:Src/commandParser.c **** 	uint8_t argNum = 0;
  23:Src/commandParser.c **** 	// Get whatever the user has sent
  24:Src/commandParser.c **** 	scanUSB((uint8_t *) usrMsg, BUF_SIZE);
  61              		.loc 1 24 0
  62 001c 8021     		movs	r1, #128
  63              	.LVL2:
  64 001e 2AA8     		add	r0, sp, #168
  65              	.LVL3:
  66 0020 FFF7FEFF 		bl	scanUSB
  67              	.LVL4:
  68              	.LBB2:
  25:Src/commandParser.c **** 
  26:Src/commandParser.c **** 	// Split on delim
  27:Src/commandParser.c **** 	for (uint8_t i = 0; i < FIFO_SIZE; i++)
  69              		.loc 1 27 0
  70 0024 2346     		mov	r3, r4
  71 0026 06E0     		b	.L2
  72              	.LVL5:
  73              	.L3:
  28:Src/commandParser.c **** 	{
  29:Src/commandParser.c **** 		if ((usrMsg[i] == '(') || (usrMsg[i] == ')') || (usrMsg[i] == ','))
  30:Src/commandParser.c **** 			usrMsg[i] = '\0';
  74              		.loc 1 30 0
  75 0028 4AAA     		add	r2, sp, #296
  76 002a 1144     		add	r1, r1, r2
  77 002c 0022     		movs	r2, #0
  78 002e 01F8802C 		strb	r2, [r1, #-128]
  79              	.L4:
  27:Src/commandParser.c **** 	{
  80              		.loc 1 27 0 discriminator 2
  81 0032 0133     		adds	r3, r3, #1
  82              	.LVL6:
  83 0034 DBB2     		uxtb	r3, r3
  84              	.LVL7:
ARM GAS  /tmp/cccqAtJW.s 			page 3


  85              	.L2:
  27:Src/commandParser.c **** 	{
  86              		.loc 1 27 0 is_stmt 0 discriminator 1
  87 0036 13F0800F 		tst	r3, #128
  88 003a 0CD1     		bne	.L38
  29:Src/commandParser.c **** 			usrMsg[i] = '\0';
  89              		.loc 1 29 0 is_stmt 1
  90 003c 1946     		mov	r1, r3
  91 003e 4AAA     		add	r2, sp, #296
  92 0040 1A44     		add	r2, r2, r3
  93 0042 12F8800C 		ldrb	r0, [r2, #-128]	@ zero_extendqisi2
  94 0046 A0F12802 		sub	r2, r0, #40
  95 004a D2B2     		uxtb	r2, r2
  96 004c 012A     		cmp	r2, #1
  97 004e EBD9     		bls	.L3
  29:Src/commandParser.c **** 			usrMsg[i] = '\0';
  98              		.loc 1 29 0 is_stmt 0 discriminator 1
  99 0050 2C28     		cmp	r0, #44
 100 0052 EED1     		bne	.L4
 101 0054 E8E7     		b	.L3
 102              	.L38:
 103              	.LBE2:
  31:Src/commandParser.c **** 	}
  32:Src/commandParser.c **** 
  33:Src/commandParser.c **** 	// Determine the command word
  34:Src/commandParser.c **** 	uint8_t i = 0;
 104              		.loc 1 34 0 is_stmt 1
 105 0056 0023     		movs	r3, #0
 106              	.LVL8:
 107 0058 05E0     		b	.L6
 108              	.LVL9:
 109              	.L7:
  35:Src/commandParser.c **** 	while (usrMsg[i] != '\0')
  36:Src/commandParser.c **** 	{
  37:Src/commandParser.c **** 		command[i] = usrMsg[i];
 110              		.loc 1 37 0
 111 005a 4AA9     		add	r1, sp, #296
 112 005c 1944     		add	r1, r1, r3
 113 005e 01F8A02C 		strb	r2, [r1, #-160]
  38:Src/commandParser.c **** 		i++;
 114              		.loc 1 38 0
 115 0062 0133     		adds	r3, r3, #1
 116              	.LVL10:
 117 0064 DBB2     		uxtb	r3, r3
 118              	.LVL11:
 119              	.L6:
  35:Src/commandParser.c **** 	while (usrMsg[i] != '\0')
 120              		.loc 1 35 0
 121 0066 4AAA     		add	r2, sp, #296
 122 0068 1A44     		add	r2, r2, r3
 123 006a 12F8802C 		ldrb	r2, [r2, #-128]	@ zero_extendqisi2
 124 006e 002A     		cmp	r2, #0
 125 0070 F3D1     		bne	.L7
  22:Src/commandParser.c **** 	// Get whatever the user has sent
 126              		.loc 1 22 0
 127 0072 0025     		movs	r5, #0
 128 0074 14E0     		b	.L8
ARM GAS  /tmp/cccqAtJW.s 			page 4


 129              	.LVL12:
 130              	.L11:
 131              	.LBB3:
  39:Src/commandParser.c **** 	}
  40:Src/commandParser.c **** 
  41:Src/commandParser.c **** 	// Find arguments
  42:Src/commandParser.c **** 	while (i < FIFO_SIZE)
  43:Src/commandParser.c **** 	{
  44:Src/commandParser.c **** 		// If null term, (was delim) skip
  45:Src/commandParser.c **** 		if (usrMsg[i] == '\0')
  46:Src/commandParser.c **** 			i++;
  47:Src/commandParser.c **** 		else
  48:Src/commandParser.c **** 		{
  49:Src/commandParser.c **** 			// Otherwise, copy arguments into their own strings
  50:Src/commandParser.c **** 			uint8_t j = 0;
  51:Src/commandParser.c **** 			while (usrMsg[i] != '\0')
  52:Src/commandParser.c **** 			{
  53:Src/commandParser.c **** 				args[argNum][j] = '\0';
 132              		.loc 1 53 0
 133 0076 1446     		mov	r4, r2
  54:Src/commandParser.c **** 				args[argNum][j++] = usrMsg[i];
 134              		.loc 1 54 0
 135 0078 0132     		adds	r2, r2, #1
 136              	.LVL13:
 137 007a D2B2     		uxtb	r2, r2
 138              	.LVL14:
 139 007c 0AA9     		add	r1, sp, #40
 140 007e 01EB0511 		add	r1, r1, r5, lsl #4
 141 0082 0855     		strb	r0, [r1, r4]
  55:Src/commandParser.c **** 				i++;
 142              		.loc 1 55 0
 143 0084 0133     		adds	r3, r3, #1
 144              	.LVL15:
 145 0086 DBB2     		uxtb	r3, r3
 146              	.LVL16:
 147              	.L9:
  51:Src/commandParser.c **** 			{
 148              		.loc 1 51 0
 149 0088 4AA9     		add	r1, sp, #296
 150 008a 1944     		add	r1, r1, r3
 151 008c 11F8800C 		ldrb	r0, [r1, #-128]	@ zero_extendqisi2
 152 0090 0028     		cmp	r0, #0
 153 0092 F0D1     		bne	.L11
  56:Src/commandParser.c **** 			}
  57:Src/commandParser.c **** 			args[argNum][j] = '\0';
 154              		.loc 1 57 0
 155 0094 0AA9     		add	r1, sp, #40
 156 0096 01EB0511 		add	r1, r1, r5, lsl #4
 157 009a 8854     		strb	r0, [r1, r2]
  58:Src/commandParser.c **** 			argNum++;
 158              		.loc 1 58 0
 159 009c 0135     		adds	r5, r5, #1
 160              	.LVL17:
 161 009e EDB2     		uxtb	r5, r5
 162              	.LVL18:
 163              	.L8:
 164              	.LBE3:
ARM GAS  /tmp/cccqAtJW.s 			page 5


  42:Src/commandParser.c **** 	{
 165              		.loc 1 42 0
 166 00a0 13F0800F 		tst	r3, #128
 167 00a4 09D1     		bne	.L39
  45:Src/commandParser.c **** 			i++;
 168              		.loc 1 45 0
 169 00a6 4AAA     		add	r2, sp, #296
 170 00a8 1A44     		add	r2, r2, r3
 171 00aa 12F8802C 		ldrb	r2, [r2, #-128]	@ zero_extendqisi2
 172 00ae 12B9     		cbnz	r2, .L36
  46:Src/commandParser.c **** 		else
 173              		.loc 1 46 0
 174 00b0 0133     		adds	r3, r3, #1
 175              	.LVL19:
 176 00b2 DBB2     		uxtb	r3, r3
 177              	.LVL20:
 178 00b4 F4E7     		b	.L8
 179              	.L36:
 180              	.LBB4:
  50:Src/commandParser.c **** 			while (usrMsg[i] != '\0')
 181              		.loc 1 50 0
 182 00b6 0022     		movs	r2, #0
 183 00b8 E6E7     		b	.L9
 184              	.L39:
 185              	.LBE4:
  59:Src/commandParser.c **** 		}
  60:Src/commandParser.c **** 
  61:Src/commandParser.c **** 	}
  62:Src/commandParser.c **** 
  63:Src/commandParser.c **** 	// Find command based on command word, and call function
  64:Src/commandParser.c **** 
  65:Src/commandParser.c **** 	if (strncmp("sigGen", command, 6) == 0)
 186              		.loc 1 65 0
 187 00ba 0622     		movs	r2, #6
 188 00bc 22A9     		add	r1, sp, #136
 189 00be B848     		ldr	r0, .L53
 190 00c0 FFF7FEFF 		bl	strncmp
 191              	.LVL21:
 192 00c4 60B3     		cbz	r0, .L40
  66:Src/commandParser.c **** 	{
  67:Src/commandParser.c **** 		sigGen(atof(args[0]), atof(args[1]), max2871Status, txStatus);
  68:Src/commandParser.c **** 
  69:Src/commandParser.c **** 		sprintf((char *)txStr, "> Signal Generator: Frequency = %0.3f MHz, Power = %0.2f dBm\n", max2871S
  70:Src/commandParser.c **** 		printUSB(txStr);
  71:Src/commandParser.c **** 	}
  72:Src/commandParser.c **** 
  73:Src/commandParser.c **** 	else if (strncmp("sweep", command, 5) == 0)
 193              		.loc 1 73 0
 194 00c6 0522     		movs	r2, #5
 195 00c8 22A9     		add	r1, sp, #136
 196 00ca B648     		ldr	r0, .L53+4
 197 00cc FFF7FEFF 		bl	strncmp
 198              	.LVL22:
 199 00d0 0028     		cmp	r0, #0
 200 00d2 53D0     		beq	.L41
  74:Src/commandParser.c **** 	{
  75:Src/commandParser.c **** 		sprintf((char *)txStr, "> Sweep: Start = %0.2f MHz, fFinish = %0.2f dBm Power = %0.2f dBm\n", ato
ARM GAS  /tmp/cccqAtJW.s 			page 6


  76:Src/commandParser.c **** 		printUSB(txStr);
  77:Src/commandParser.c **** 
  78:Src/commandParser.c **** 		while (RX_FIFO.dataReady == 0)
  79:Src/commandParser.c **** 		{
  80:Src/commandParser.c **** 			sweep(atof(args[0]), atof(args[1]), atof(args[2]), atof(args[3]), atof(args[4]), max2871Status, 
  81:Src/commandParser.c **** 		}
  82:Src/commandParser.c **** 	}
  83:Src/commandParser.c **** 
  84:Src/commandParser.c **** 
  85:Src/commandParser.c **** 	else if (strncmp("enableRF", command, 8) == 0)
 201              		.loc 1 85 0
 202 00d4 0822     		movs	r2, #8
 203 00d6 22A9     		add	r1, sp, #136
 204 00d8 B348     		ldr	r0, .L53+8
 205 00da FFF7FEFF 		bl	strncmp
 206              	.LVL23:
 207 00de 0028     		cmp	r0, #0
 208 00e0 00F0AB80 		beq	.L42
  86:Src/commandParser.c **** 	{
  87:Src/commandParser.c **** 		max2871RFEnable(max2871Status);
  88:Src/commandParser.c **** 		enablePA(txStatus);
  89:Src/commandParser.c **** 		printUSB("> RF Enabled \r\n");
  90:Src/commandParser.c **** 	}
  91:Src/commandParser.c **** 
  92:Src/commandParser.c **** 	else if (strncmp("disableRF", command, 9) == 0)
 209              		.loc 1 92 0
 210 00e4 0922     		movs	r2, #9
 211 00e6 22A9     		add	r1, sp, #136
 212 00e8 B048     		ldr	r0, .L53+12
 213 00ea FFF7FEFF 		bl	strncmp
 214              	.LVL24:
 215 00ee 0028     		cmp	r0, #0
 216 00f0 00F0AD80 		beq	.L43
  93:Src/commandParser.c **** 	{
  94:Src/commandParser.c **** 		max2871RFDisable(max2871Status);
  95:Src/commandParser.c **** 		disablePA(txStatus);
  96:Src/commandParser.c **** 		printUSB("> RF Disabled \r\n");
  97:Src/commandParser.c **** 	}
  98:Src/commandParser.c **** 
  99:Src/commandParser.c **** 	else if (strncmp("status", command, 6) == 0)
 217              		.loc 1 99 0
 218 00f4 0622     		movs	r2, #6
 219 00f6 22A9     		add	r1, sp, #136
 220 00f8 AD48     		ldr	r0, .L53+16
 221 00fa FFF7FEFF 		bl	strncmp
 222              	.LVL25:
 223 00fe 0028     		cmp	r0, #0
 224 0100 40F0BB80 		bne	.L20
 100:Src/commandParser.c **** 	{
 101:Src/commandParser.c **** 		if (strncmp("v", args[0], 1) == 0)
 225              		.loc 1 101 0
 226 0104 9DF82830 		ldrb	r3, [sp, #40]	@ zero_extendqisi2
 227 0108 762B     		cmp	r3, #118
 228 010a 00F0AA80 		beq	.L44
 102:Src/commandParser.c **** 		{
 103:Src/commandParser.c **** 			args[0][0] = (int32_t) "";
 104:Src/commandParser.c **** 			max2871PrintStatus(VERBOSE,max2871Status);
ARM GAS  /tmp/cccqAtJW.s 			page 7


 105:Src/commandParser.c **** 			txChainPrintStatus(VERBOSE,txStatus);
 106:Src/commandParser.c **** 		}
 107:Src/commandParser.c **** 		else
 108:Src/commandParser.c **** 		{
 109:Src/commandParser.c **** 			max2871PrintStatus(nVERBOSE,max2871Status);
 229              		.loc 1 109 0
 230 010e 5946     		mov	r1, fp
 231 0110 0020     		movs	r0, #0
 232 0112 FFF7FEFF 		bl	max2871PrintStatus
 233              	.LVL26:
 110:Src/commandParser.c **** 			txChainPrintStatus(nVERBOSE,txStatus);
 234              		.loc 1 110 0
 235 0116 5146     		mov	r1, r10
 236 0118 0020     		movs	r0, #0
 237 011a FFF7FEFF 		bl	txChainPrintStatus
 238              	.LVL27:
 239 011e 2AE0     		b	.L1
 240              	.L40:
  67:Src/commandParser.c **** 
 241              		.loc 1 67 0
 242 0120 0AA8     		add	r0, sp, #40
 243 0122 FFF7FEFF 		bl	atof
 244              	.LVL28:
 245 0126 0646     		mov	r6, r0
 246 0128 0F46     		mov	r7, r1
 247 012a 0EA8     		add	r0, sp, #56
 248 012c FFF7FEFF 		bl	atof
 249              	.LVL29:
 250 0130 FFF7FEFF 		bl	__aeabi_d2f
 251              	.LVL30:
 252 0134 0446     		mov	r4, r0
 253 0136 3046     		mov	r0, r6
 254 0138 3946     		mov	r1, r7
 255 013a FFF7FEFF 		bl	__aeabi_d2f
 256              	.LVL31:
 257 013e 5346     		mov	r3, r10
 258 0140 5A46     		mov	r2, fp
 259 0142 2146     		mov	r1, r4
 260 0144 FFF7FEFF 		bl	sigGen
 261              	.LVL32:
  69:Src/commandParser.c **** 		printUSB(txStr);
 262              		.loc 1 69 0
 263 0148 DAF80050 		ldr	r5, [r10]	@ float
 264              	.LVL33:
 265 014c DBF80400 		ldr	r0, [fp, #4]	@ float
 266 0150 FFF7FEFF 		bl	__aeabi_f2d
 267              	.LVL34:
 268 0154 0646     		mov	r6, r0
 269 0156 0F46     		mov	r7, r1
 270 0158 964C     		ldr	r4, .L53+20
 271 015a 2846     		mov	r0, r5
 272 015c FFF7FEFF 		bl	__aeabi_f2d
 273              	.LVL35:
 274 0160 CDE90001 		strd	r0, [sp]
 275 0164 3246     		mov	r2, r6
 276 0166 3B46     		mov	r3, r7
 277 0168 9349     		ldr	r1, .L53+24
ARM GAS  /tmp/cccqAtJW.s 			page 8


 278 016a 2046     		mov	r0, r4
 279 016c FFF7FEFF 		bl	sprintf
 280              	.LVL36:
  70:Src/commandParser.c **** 	}
 281              		.loc 1 70 0
 282 0170 2046     		mov	r0, r4
 283 0172 FFF7FEFF 		bl	printUSB
 284              	.LVL37:
 285              	.L1:
 111:Src/commandParser.c **** 		}
 112:Src/commandParser.c **** 	}
 113:Src/commandParser.c **** 	
 114:Src/commandParser.c **** 	else if (strncmp("WHOAMI", command, 5) == 0)
 115:Src/commandParser.c **** 	{
 116:Src/commandParser.c **** 		printUSB("> Josh's Signal Generator!\r\n");
 117:Src/commandParser.c **** 	}
 118:Src/commandParser.c **** 
 119:Src/commandParser.c **** 	else if (strncmp("led", command, 3) == 0)
 120:Src/commandParser.c **** 	{
 121:Src/commandParser.c **** 		stpSpiTx((uint8_t) atoi(args[0]));
 122:Src/commandParser.c **** 	}
 123:Src/commandParser.c **** 
 124:Src/commandParser.c **** 	else if (strncmp("rainbow", command, 7) == 0)
 125:Src/commandParser.c **** 	{
 126:Src/commandParser.c **** 		rainbow();
 127:Src/commandParser.c **** 	}
 128:Src/commandParser.c **** 
 129:Src/commandParser.c **** 	else if (strncmp("kitt", command, 4) == 0)
 130:Src/commandParser.c **** 	{
 131:Src/commandParser.c **** 		kitt();
 132:Src/commandParser.c **** 	}
 133:Src/commandParser.c **** 
 134:Src/commandParser.c **** 	else if (strncmp("binary", command, 6) == 0)
 135:Src/commandParser.c **** 	{
 136:Src/commandParser.c **** 		binary();
 137:Src/commandParser.c **** 	}
 138:Src/commandParser.c **** 	
 139:Src/commandParser.c **** 	// USE BELOW AT YOUR OWN RISK
 140:Src/commandParser.c **** 	else if (strncmp("setMaxPower", command, 11) == 0)
 141:Src/commandParser.c **** 	{
 142:Src/commandParser.c **** 		max2871SetPower(atoi(args[0]), max2871Status);
 143:Src/commandParser.c **** 		int8_t powerArray[4] = {-4, -1, 2, 5};
 144:Src/commandParser.c **** 		sprintf((char *)txStr, "> Power set to: %d dBm\n", powerArray[max2871Status->rfPower]);
 145:Src/commandParser.c **** 		printUSB(txStr);
 146:Src/commandParser.c **** 	}
 147:Src/commandParser.c **** 
 148:Src/commandParser.c **** 	else if (strncmp("setAttenuation", command, 14) == 0)
 149:Src/commandParser.c **** 	{
 150:Src/commandParser.c **** 		setAttenuation(atof(args[0]), txStatus);
 151:Src/commandParser.c **** 		sprintf((char *)txStr, "> Attenuation set to: %0.2f dB\n", txStatus->attenuation);
 152:Src/commandParser.c **** 		printUSB(txStr);
 153:Src/commandParser.c **** 	}
 154:Src/commandParser.c **** 
 155:Src/commandParser.c **** 	else if (strncmp("enableLO", command, 8) == 0)
 156:Src/commandParser.c **** 	{
 157:Src/commandParser.c **** 		max2871RFEnable(max2871Status);
 158:Src/commandParser.c **** 		printUSB("> LO Enabled \r\n");
ARM GAS  /tmp/cccqAtJW.s 			page 9


 159:Src/commandParser.c **** 	}
 160:Src/commandParser.c **** 
 161:Src/commandParser.c **** 	else if (strncmp("disableLO", command, 8) == 0)
 162:Src/commandParser.c **** 	{
 163:Src/commandParser.c **** 		max2871RFDisable(max2871Status);
 164:Src/commandParser.c **** 		printUSB("> LO Disabled \r\n");
 165:Src/commandParser.c **** 	}
 166:Src/commandParser.c **** 
 167:Src/commandParser.c **** 	else if (strncmp("enablePA", command, 8) == 0)
 168:Src/commandParser.c **** 	{
 169:Src/commandParser.c **** 		enablePA(txStatus);
 170:Src/commandParser.c **** 		printUSB("> PA Enabled \r\n");
 171:Src/commandParser.c **** 	}
 172:Src/commandParser.c **** 
 173:Src/commandParser.c **** 	else if (strncmp("disablePA", command, 8) == 0)
 174:Src/commandParser.c **** 	{
 175:Src/commandParser.c **** 		disablePA(txStatus);
 176:Src/commandParser.c **** 		printUSB("> PA Disabled \r\n");
 177:Src/commandParser.c **** 	}
 178:Src/commandParser.c **** 
 179:Src/commandParser.c **** 	else if (strncmp("adc", command, 3) == 0)
 180:Src/commandParser.c **** 	{
 181:Src/commandParser.c **** 		readAD8319(txStatus);
 182:Src/commandParser.c **** 
 183:Src/commandParser.c **** 		sprintf((char *)txStr, "> Measured Voltage= %0.2f V\n", readAD8319(txStatus));
 184:Src/commandParser.c **** 		printUSB(txStr);
 185:Src/commandParser.c **** 
 186:Src/commandParser.c **** 		sprintf((char *)txStr, "> Output Power at SMA = %0.2f dBm\n", txStatus->measOutputPower);
 187:Src/commandParser.c **** 		printUSB(txStr);
 188:Src/commandParser.c **** 	}
 189:Src/commandParser.c **** 
 190:Src/commandParser.c **** 	else if (strncmp("help", command, 4) == 0)
 191:Src/commandParser.c **** 	{
 192:Src/commandParser.c **** 		printUSB((char *)"> --  Available Commands  --\r\n");
 193:Src/commandParser.c **** 		printUSB((char *)"> sigGen(frequency, power)\r\n");
 194:Src/commandParser.c **** 		printUSB((char *)"> sweep(startFreq, stopFreq, numSteps, power, time)\r\n");
 195:Src/commandParser.c **** 		printUSB((char *)"> enableRF\r\n");
 196:Src/commandParser.c **** 		printUSB((char *)"> disableRF\r\n");
 197:Src/commandParser.c **** 		printUSB((char *)"> status(verbose)\r\n");
 198:Src/commandParser.c **** 		printUSB((char *)"> WHOAMI\r\n");
 199:Src/commandParser.c **** 		printUSB((char *)"> --- Use the below at your own risk ---\r\n");
 200:Src/commandParser.c **** 		printUSB((char *)"> setMaxPower(power(dBm))\r\n");
 201:Src/commandParser.c **** 		printUSB((char *)"> setAttenuation(atten(dB))\r\n");
 202:Src/commandParser.c **** 		printUSB((char *)"> enableLO\r\n");
 203:Src/commandParser.c **** 		printUSB((char *)"> disableLO\r\n");
 204:Src/commandParser.c **** 		printUSB((char *)"> enablePA\r\n");
 205:Src/commandParser.c **** 		printUSB((char *)"> disablePA\r\n");
 206:Src/commandParser.c **** 	}
 207:Src/commandParser.c **** 
 208:Src/commandParser.c **** 	else if (strncmp("\r\n", command, 2) == 0)
 209:Src/commandParser.c **** 	{
 210:Src/commandParser.c **** 		printUSB("> Break\r\n");
 211:Src/commandParser.c **** 	}
 212:Src/commandParser.c **** 	else
 213:Src/commandParser.c **** 	{
 214:Src/commandParser.c **** 		printUSB("> Not found, try again\r\n");
 215:Src/commandParser.c **** 		sprintf((char *)txStr, "> %s\n", command);
ARM GAS  /tmp/cccqAtJW.s 			page 10


 216:Src/commandParser.c **** 		printUSB(txStr);
 217:Src/commandParser.c **** 
 218:Src/commandParser.c **** 	}
 219:Src/commandParser.c **** 
 220:Src/commandParser.c **** }
 286              		.loc 1 220 0
 287 0176 4BB0     		add	sp, sp, #300
 288              	.LCFI2:
 289              		.cfi_remember_state
 290              		.cfi_def_cfa_offset 36
 291              		@ sp needed
 292 0178 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 293              	.LVL38:
 294              	.L41:
 295              	.LCFI3:
 296              		.cfi_restore_state
  75:Src/commandParser.c **** 		printUSB(txStr);
 297              		.loc 1 75 0
 298 017c 0AA8     		add	r0, sp, #40
 299 017e FFF7FEFF 		bl	atof
 300              	.LVL39:
 301 0182 0646     		mov	r6, r0
 302 0184 0F46     		mov	r7, r1
 303 0186 0EA8     		add	r0, sp, #56
 304 0188 FFF7FEFF 		bl	atof
 305              	.LVL40:
 306 018c 0446     		mov	r4, r0
 307 018e 0D46     		mov	r5, r1
 308              	.LVL41:
 309 0190 12A8     		add	r0, sp, #72
 310 0192 FFF7FEFF 		bl	atof
 311              	.LVL42:
 312 0196 DFF81C82 		ldr	r8, .L53+20
 313 019a CDE90201 		strd	r0, [sp, #8]
 314 019e CDE90045 		strd	r4, [sp]
 315 01a2 3246     		mov	r2, r6
 316 01a4 3B46     		mov	r3, r7
 317 01a6 8549     		ldr	r1, .L53+28
 318 01a8 4046     		mov	r0, r8
 319 01aa FFF7FEFF 		bl	sprintf
 320              	.LVL43:
  76:Src/commandParser.c **** 
 321              		.loc 1 76 0
 322 01ae 4046     		mov	r0, r8
 323 01b0 FFF7FEFF 		bl	printUSB
 324              	.LVL44:
  78:Src/commandParser.c **** 		{
 325              		.loc 1 78 0
 326 01b4 3BE0     		b	.L16
 327              	.L17:
  80:Src/commandParser.c **** 		}
 328              		.loc 1 80 0
 329 01b6 0AA8     		add	r0, sp, #40
 330 01b8 FFF7FEFF 		bl	atof
 331              	.LVL45:
 332 01bc CDE90401 		strd	r0, [sp, #16]
 333 01c0 0EA8     		add	r0, sp, #56
ARM GAS  /tmp/cccqAtJW.s 			page 11


 334 01c2 FFF7FEFF 		bl	atof
 335              	.LVL46:
 336 01c6 0446     		mov	r4, r0
 337 01c8 0D46     		mov	r5, r1
 338 01ca 12A8     		add	r0, sp, #72
 339 01cc FFF7FEFF 		bl	atof
 340              	.LVL47:
 341 01d0 0646     		mov	r6, r0
 342 01d2 0F46     		mov	r7, r1
 343 01d4 16A8     		add	r0, sp, #88
 344 01d6 FFF7FEFF 		bl	atof
 345              	.LVL48:
 346 01da 8046     		mov	r8, r0
 347 01dc 8946     		mov	r9, r1
 348 01de 1AA8     		add	r0, sp, #104
 349 01e0 FFF7FEFF 		bl	atof
 350              	.LVL49:
 351 01e4 CDE90601 		strd	r0, [sp, #24]
 352 01e8 4046     		mov	r0, r8
 353 01ea 4946     		mov	r1, r9
 354 01ec FFF7FEFF 		bl	__aeabi_d2f
 355              	.LVL50:
 356 01f0 8046     		mov	r8, r0
 357 01f2 3046     		mov	r0, r6
 358 01f4 3946     		mov	r1, r7
 359 01f6 FFF7FEFF 		bl	__aeabi_d2f
 360              	.LVL51:
 361 01fa 0646     		mov	r6, r0
 362 01fc 2046     		mov	r0, r4
 363 01fe 2946     		mov	r1, r5
 364 0200 FFF7FEFF 		bl	__aeabi_d2f
 365              	.LVL52:
 366 0204 0446     		mov	r4, r0
 367 0206 DDE90401 		ldrd	r0, [sp, #16]
 368 020a FFF7FEFF 		bl	__aeabi_d2f
 369              	.LVL53:
 370 020e 0546     		mov	r5, r0
 371 0210 CDF808A0 		str	r10, [sp, #8]
 372 0214 CDF804B0 		str	fp, [sp, #4]
 373 0218 DDE90601 		ldrd	r0, [sp, #24]
 374 021c FFF7FEFF 		bl	__aeabi_d2f
 375              	.LVL54:
 376 0220 0090     		str	r0, [sp]	@ float
 377 0222 4346     		mov	r3, r8
 378 0224 3246     		mov	r2, r6
 379 0226 2146     		mov	r1, r4
 380 0228 2846     		mov	r0, r5
 381 022a FFF7FEFF 		bl	sweep
 382              	.LVL55:
 383              	.L16:
  78:Src/commandParser.c **** 		{
 384              		.loc 1 78 0
 385 022e 644B     		ldr	r3, .L53+32
 386 0230 93F88830 		ldrb	r3, [r3, #136]	@ zero_extendqisi2
 387 0234 002B     		cmp	r3, #0
 388 0236 BED0     		beq	.L17
 389 0238 9DE7     		b	.L1
ARM GAS  /tmp/cccqAtJW.s 			page 12


 390              	.LVL56:
 391              	.L42:
  87:Src/commandParser.c **** 		enablePA(txStatus);
 392              		.loc 1 87 0
 393 023a 5846     		mov	r0, fp
 394 023c FFF7FEFF 		bl	max2871RFEnable
 395              	.LVL57:
  88:Src/commandParser.c **** 		printUSB("> RF Enabled \r\n");
 396              		.loc 1 88 0
 397 0240 5046     		mov	r0, r10
 398 0242 FFF7FEFF 		bl	enablePA
 399              	.LVL58:
  89:Src/commandParser.c **** 	}
 400              		.loc 1 89 0
 401 0246 5F48     		ldr	r0, .L53+36
 402 0248 FFF7FEFF 		bl	printUSB
 403              	.LVL59:
 404 024c 93E7     		b	.L1
 405              	.L43:
  94:Src/commandParser.c **** 		disablePA(txStatus);
 406              		.loc 1 94 0
 407 024e 5846     		mov	r0, fp
 408 0250 FFF7FEFF 		bl	max2871RFDisable
 409              	.LVL60:
  95:Src/commandParser.c **** 		printUSB("> RF Disabled \r\n");
 410              		.loc 1 95 0
 411 0254 5046     		mov	r0, r10
 412 0256 FFF7FEFF 		bl	disablePA
 413              	.LVL61:
  96:Src/commandParser.c **** 	}
 414              		.loc 1 96 0
 415 025a 5B48     		ldr	r0, .L53+40
 416 025c FFF7FEFF 		bl	printUSB
 417              	.LVL62:
 418 0260 89E7     		b	.L1
 419              	.L44:
 103:Src/commandParser.c **** 			max2871PrintStatus(VERBOSE,max2871Status);
 420              		.loc 1 103 0
 421 0262 5A4B     		ldr	r3, .L53+44
 422 0264 8DF82830 		strb	r3, [sp, #40]
 104:Src/commandParser.c **** 			txChainPrintStatus(VERBOSE,txStatus);
 423              		.loc 1 104 0
 424 0268 5946     		mov	r1, fp
 425 026a 0120     		movs	r0, #1
 426 026c FFF7FEFF 		bl	max2871PrintStatus
 427              	.LVL63:
 105:Src/commandParser.c **** 		}
 428              		.loc 1 105 0
 429 0270 5146     		mov	r1, r10
 430 0272 0120     		movs	r0, #1
 431 0274 FFF7FEFF 		bl	txChainPrintStatus
 432              	.LVL64:
 433 0278 7DE7     		b	.L1
 434              	.L20:
 114:Src/commandParser.c **** 	{
 435              		.loc 1 114 0
 436 027a 0522     		movs	r2, #5
ARM GAS  /tmp/cccqAtJW.s 			page 13


 437 027c 22A9     		add	r1, sp, #136
 438 027e 5448     		ldr	r0, .L53+48
 439 0280 FFF7FEFF 		bl	strncmp
 440              	.LVL65:
 441 0284 0028     		cmp	r0, #0
 442 0286 37D0     		beq	.L45
 119:Src/commandParser.c **** 	{
 443              		.loc 1 119 0
 444 0288 0322     		movs	r2, #3
 445 028a 22A9     		add	r1, sp, #136
 446 028c 5148     		ldr	r0, .L53+52
 447 028e FFF7FEFF 		bl	strncmp
 448              	.LVL66:
 449 0292 0028     		cmp	r0, #0
 450 0294 34D0     		beq	.L46
 124:Src/commandParser.c **** 	{
 451              		.loc 1 124 0
 452 0296 0722     		movs	r2, #7
 453 0298 22A9     		add	r1, sp, #136
 454 029a 4F48     		ldr	r0, .L53+56
 455 029c FFF7FEFF 		bl	strncmp
 456              	.LVL67:
 457 02a0 0028     		cmp	r0, #0
 458 02a2 34D0     		beq	.L47
 129:Src/commandParser.c **** 	{
 459              		.loc 1 129 0
 460 02a4 0422     		movs	r2, #4
 461 02a6 22A9     		add	r1, sp, #136
 462 02a8 4C48     		ldr	r0, .L53+60
 463 02aa FFF7FEFF 		bl	strncmp
 464              	.LVL68:
 465 02ae 0028     		cmp	r0, #0
 466 02b0 30D0     		beq	.L48
 134:Src/commandParser.c **** 	{
 467              		.loc 1 134 0
 468 02b2 0622     		movs	r2, #6
 469 02b4 22A9     		add	r1, sp, #136
 470 02b6 4A48     		ldr	r0, .L53+64
 471 02b8 FFF7FEFF 		bl	strncmp
 472              	.LVL69:
 473 02bc 68B3     		cbz	r0, .L49
 140:Src/commandParser.c **** 	{
 474              		.loc 1 140 0
 475 02be 0B22     		movs	r2, #11
 476 02c0 22A9     		add	r1, sp, #136
 477 02c2 4848     		ldr	r0, .L53+68
 478 02c4 FFF7FEFF 		bl	strncmp
 479              	.LVL70:
 480 02c8 50BB     		cbnz	r0, .L27
 481              	.LBB5:
 142:Src/commandParser.c **** 		int8_t powerArray[4] = {-4, -1, 2, 5};
 482              		.loc 1 142 0 discriminator 3
 483 02ca 0AA8     		add	r0, sp, #40
 484 02cc FFF7FEFF 		bl	atoi
 485              	.LVL71:
 486 02d0 5946     		mov	r1, fp
 487 02d2 40B2     		sxtb	r0, r0
ARM GAS  /tmp/cccqAtJW.s 			page 14


 488 02d4 FFF7FEFF 		bl	max2871SetPower
 489              	.LVL72:
 143:Src/commandParser.c **** 		sprintf((char *)txStr, "> Power set to: %d dBm\n", powerArray[max2871Status->rfPower]);
 490              		.loc 1 143 0 discriminator 3
 491 02d8 09AB     		add	r3, sp, #36
 492 02da 434A     		ldr	r2, .L53+72
 493 02dc 1268     		ldr	r2, [r2]
 494 02de 0992     		str	r2, [sp, #36]
 144:Src/commandParser.c **** 		printUSB(txStr);
 495              		.loc 1 144 0 discriminator 3
 496 02e0 9BF80A20 		ldrb	r2, [fp, #10]	@ zero_extendqisi2
 497 02e4 334C     		ldr	r4, .L53+20
 498 02e6 9A56     		ldrsb	r2, [r3, r2]
 499 02e8 4049     		ldr	r1, .L53+76
 500 02ea 2046     		mov	r0, r4
 501 02ec FFF7FEFF 		bl	sprintf
 502              	.LVL73:
 145:Src/commandParser.c **** 	}
 503              		.loc 1 145 0 discriminator 3
 504 02f0 2046     		mov	r0, r4
 505 02f2 FFF7FEFF 		bl	printUSB
 506              	.LVL74:
 507              	.LBE5:
 508 02f6 3EE7     		b	.L1
 509              	.L45:
 116:Src/commandParser.c **** 	}
 510              		.loc 1 116 0
 511 02f8 3D48     		ldr	r0, .L53+80
 512 02fa FFF7FEFF 		bl	printUSB
 513              	.LVL75:
 514 02fe 3AE7     		b	.L1
 515              	.L46:
 121:Src/commandParser.c **** 	}
 516              		.loc 1 121 0
 517 0300 0AA8     		add	r0, sp, #40
 518 0302 FFF7FEFF 		bl	atoi
 519              	.LVL76:
 520 0306 C0B2     		uxtb	r0, r0
 521 0308 FFF7FEFF 		bl	stpSpiTx
 522              	.LVL77:
 523 030c 33E7     		b	.L1
 524              	.L47:
 126:Src/commandParser.c **** 	}
 525              		.loc 1 126 0
 526 030e FFF7FEFF 		bl	rainbow
 527              	.LVL78:
 528 0312 30E7     		b	.L1
 529              	.L48:
 131:Src/commandParser.c **** 	}
 530              		.loc 1 131 0
 531 0314 FFF7FEFF 		bl	kitt
 532              	.LVL79:
 533 0318 2DE7     		b	.L1
 534              	.L49:
 136:Src/commandParser.c **** 	}
 535              		.loc 1 136 0
 536 031a FFF7FEFF 		bl	binary
ARM GAS  /tmp/cccqAtJW.s 			page 15


 537              	.LVL80:
 538 031e 2AE7     		b	.L1
 539              	.L27:
 148:Src/commandParser.c **** 	{
 540              		.loc 1 148 0
 541 0320 0E22     		movs	r2, #14
 542 0322 22A9     		add	r1, sp, #136
 543 0324 3348     		ldr	r0, .L53+84
 544 0326 FFF7FEFF 		bl	strncmp
 545              	.LVL81:
 546 032a D0B1     		cbz	r0, .L50
 155:Src/commandParser.c **** 	{
 547              		.loc 1 155 0
 548 032c 0822     		movs	r2, #8
 549 032e 22A9     		add	r1, sp, #136
 550 0330 3148     		ldr	r0, .L53+88
 551 0332 FFF7FEFF 		bl	strncmp
 552              	.LVL82:
 553 0336 58B3     		cbz	r0, .L51
 161:Src/commandParser.c **** 	{
 554              		.loc 1 161 0
 555 0338 0822     		movs	r2, #8
 556 033a 22A9     		add	r1, sp, #136
 557 033c 2F48     		ldr	r0, .L53+92
 558 033e FFF7FEFF 		bl	strncmp
 559              	.LVL83:
 560 0342 0028     		cmp	r0, #0
 561 0344 64D0     		beq	.L52
 167:Src/commandParser.c **** 	{
 562              		.loc 1 167 0
 563 0346 0822     		movs	r2, #8
 564 0348 22A9     		add	r1, sp, #136
 565 034a 2D48     		ldr	r0, .L53+96
 566 034c FFF7FEFF 		bl	strncmp
 567              	.LVL84:
 568 0350 0028     		cmp	r0, #0
 569 0352 64D1     		bne	.L31
 169:Src/commandParser.c **** 		printUSB("> PA Enabled \r\n");
 570              		.loc 1 169 0
 571 0354 5046     		mov	r0, r10
 572 0356 FFF7FEFF 		bl	enablePA
 573              	.LVL85:
 170:Src/commandParser.c **** 	}
 574              		.loc 1 170 0
 575 035a 2A48     		ldr	r0, .L53+100
 576 035c FFF7FEFF 		bl	printUSB
 577              	.LVL86:
 578 0360 09E7     		b	.L1
 579              	.L50:
 150:Src/commandParser.c **** 		sprintf((char *)txStr, "> Attenuation set to: %0.2f dB\n", txStatus->attenuation);
 580              		.loc 1 150 0
 581 0362 0AA8     		add	r0, sp, #40
 582 0364 FFF7FEFF 		bl	atof
 583              	.LVL87:
 584 0368 FFF7FEFF 		bl	__aeabi_d2f
 585              	.LVL88:
 586 036c 5146     		mov	r1, r10
ARM GAS  /tmp/cccqAtJW.s 			page 16


 587 036e FFF7FEFF 		bl	setAttenuation
 588              	.LVL89:
 151:Src/commandParser.c **** 		printUSB(txStr);
 589              		.loc 1 151 0
 590 0372 DAF80800 		ldr	r0, [r10, #8]	@ float
 591 0376 FFF7FEFF 		bl	__aeabi_f2d
 592              	.LVL90:
 593 037a 0E4C     		ldr	r4, .L53+20
 594 037c 0246     		mov	r2, r0
 595 037e 0B46     		mov	r3, r1
 596 0380 2149     		ldr	r1, .L53+104
 597 0382 2046     		mov	r0, r4
 598 0384 FFF7FEFF 		bl	sprintf
 599              	.LVL91:
 152:Src/commandParser.c **** 	}
 600              		.loc 1 152 0
 601 0388 2046     		mov	r0, r4
 602 038a FFF7FEFF 		bl	printUSB
 603              	.LVL92:
 604 038e F2E6     		b	.L1
 605              	.L51:
 157:Src/commandParser.c **** 		printUSB("> LO Enabled \r\n");
 606              		.loc 1 157 0
 607 0390 5846     		mov	r0, fp
 608 0392 FFF7FEFF 		bl	max2871RFEnable
 609              	.LVL93:
 158:Src/commandParser.c **** 	}
 610              		.loc 1 158 0
 611 0396 1D48     		ldr	r0, .L53+108
 612 0398 FFF7FEFF 		bl	printUSB
 613              	.LVL94:
 614 039c EBE6     		b	.L1
 615              	.L54:
 616 039e 00BF     		.align	2
 617              	.L53:
 618 03a0 00000000 		.word	.LC1
 619 03a4 48000000 		.word	.LC3
 620 03a8 94000000 		.word	.LC5
 621 03ac B0000000 		.word	.LC7
 622 03b0 D0000000 		.word	.LC9
 623 03b4 00000000 		.word	.LANCHOR0
 624 03b8 08000000 		.word	.LC2
 625 03bc 50000000 		.word	.LC4
 626 03c0 00000000 		.word	RX_FIFO
 627 03c4 A0000000 		.word	.LC6
 628 03c8 BC000000 		.word	.LC8
 629 03cc D8000000 		.word	.LC10
 630 03d0 DC000000 		.word	.LC11
 631 03d4 04010000 		.word	.LC13
 632 03d8 08010000 		.word	.LC14
 633 03dc 10010000 		.word	.LC15
 634 03e0 18010000 		.word	.LC16
 635 03e4 20010000 		.word	.LC17
 636 03e8 00000000 		.word	.LANCHOR1
 637 03ec 2C010000 		.word	.LC18
 638 03f0 E4000000 		.word	.LC12
 639 03f4 44010000 		.word	.LC19
ARM GAS  /tmp/cccqAtJW.s 			page 17


 640 03f8 74010000 		.word	.LC21
 641 03fc 90010000 		.word	.LC23
 642 0400 B0010000 		.word	.LC25
 643 0404 BC010000 		.word	.LC26
 644 0408 54010000 		.word	.LC20
 645 040c 80010000 		.word	.LC22
 646              	.L52:
 163:Src/commandParser.c **** 		printUSB("> LO Disabled \r\n");
 647              		.loc 1 163 0
 648 0410 5846     		mov	r0, fp
 649 0412 FFF7FEFF 		bl	max2871RFDisable
 650              	.LVL95:
 164:Src/commandParser.c **** 	}
 651              		.loc 1 164 0
 652 0416 3F48     		ldr	r0, .L55
 653 0418 FFF7FEFF 		bl	printUSB
 654              	.LVL96:
 655 041c ABE6     		b	.L1
 656              	.L31:
 173:Src/commandParser.c **** 	{
 657              		.loc 1 173 0
 658 041e 0822     		movs	r2, #8
 659 0420 22A9     		add	r1, sp, #136
 660 0422 3D48     		ldr	r0, .L55+4
 661 0424 FFF7FEFF 		bl	strncmp
 662              	.LVL97:
 663 0428 30B9     		cbnz	r0, .L32
 175:Src/commandParser.c **** 		printUSB("> PA Disabled \r\n");
 664              		.loc 1 175 0
 665 042a 5046     		mov	r0, r10
 666 042c FFF7FEFF 		bl	disablePA
 667              	.LVL98:
 176:Src/commandParser.c **** 	}
 668              		.loc 1 176 0
 669 0430 3A48     		ldr	r0, .L55+8
 670 0432 FFF7FEFF 		bl	printUSB
 671              	.LVL99:
 672 0436 9EE6     		b	.L1
 673              	.L32:
 179:Src/commandParser.c **** 	{
 674              		.loc 1 179 0
 675 0438 0322     		movs	r2, #3
 676 043a 22A9     		add	r1, sp, #136
 677 043c 3848     		ldr	r0, .L55+12
 678 043e FFF7FEFF 		bl	strncmp
 679              	.LVL100:
 680 0442 F8B9     		cbnz	r0, .L33
 181:Src/commandParser.c **** 
 681              		.loc 1 181 0
 682 0444 5046     		mov	r0, r10
 683 0446 FFF7FEFF 		bl	readAD8319
 684              	.LVL101:
 183:Src/commandParser.c **** 		printUSB(txStr);
 685              		.loc 1 183 0
 686 044a 5046     		mov	r0, r10
 687 044c FFF7FEFF 		bl	readAD8319
 688              	.LVL102:
ARM GAS  /tmp/cccqAtJW.s 			page 18


 689 0450 FFF7FEFF 		bl	__aeabi_f2d
 690              	.LVL103:
 691 0454 334C     		ldr	r4, .L55+16
 692 0456 0246     		mov	r2, r0
 693 0458 0B46     		mov	r3, r1
 694 045a 3349     		ldr	r1, .L55+20
 695 045c 2046     		mov	r0, r4
 696 045e FFF7FEFF 		bl	sprintf
 697              	.LVL104:
 184:Src/commandParser.c **** 
 698              		.loc 1 184 0
 699 0462 2046     		mov	r0, r4
 700 0464 FFF7FEFF 		bl	printUSB
 701              	.LVL105:
 186:Src/commandParser.c **** 		printUSB(txStr);
 702              		.loc 1 186 0
 703 0468 DAF80000 		ldr	r0, [r10]	@ float
 704 046c FFF7FEFF 		bl	__aeabi_f2d
 705              	.LVL106:
 706 0470 0246     		mov	r2, r0
 707 0472 0B46     		mov	r3, r1
 708 0474 2D49     		ldr	r1, .L55+24
 709 0476 2046     		mov	r0, r4
 710 0478 FFF7FEFF 		bl	sprintf
 711              	.LVL107:
 187:Src/commandParser.c **** 	}
 712              		.loc 1 187 0
 713 047c 2046     		mov	r0, r4
 714 047e FFF7FEFF 		bl	printUSB
 715              	.LVL108:
 716 0482 78E6     		b	.L1
 717              	.L33:
 190:Src/commandParser.c **** 	{
 718              		.loc 1 190 0
 719 0484 0422     		movs	r2, #4
 720 0486 22A9     		add	r1, sp, #136
 721 0488 2948     		ldr	r0, .L55+28
 722 048a FFF7FEFF 		bl	strncmp
 723              	.LVL109:
 724 048e 50BB     		cbnz	r0, .L34
 192:Src/commandParser.c **** 		printUSB((char *)"> sigGen(frequency, power)\r\n");
 725              		.loc 1 192 0
 726 0490 2848     		ldr	r0, .L55+32
 727 0492 FFF7FEFF 		bl	printUSB
 728              	.LVL110:
 193:Src/commandParser.c **** 		printUSB((char *)"> sweep(startFreq, stopFreq, numSteps, power, time)\r\n");
 729              		.loc 1 193 0
 730 0496 2848     		ldr	r0, .L55+36
 731 0498 FFF7FEFF 		bl	printUSB
 732              	.LVL111:
 194:Src/commandParser.c **** 		printUSB((char *)"> enableRF\r\n");
 733              		.loc 1 194 0
 734 049c 2748     		ldr	r0, .L55+40
 735 049e FFF7FEFF 		bl	printUSB
 736              	.LVL112:
 195:Src/commandParser.c **** 		printUSB((char *)"> disableRF\r\n");
 737              		.loc 1 195 0
ARM GAS  /tmp/cccqAtJW.s 			page 19


 738 04a2 2748     		ldr	r0, .L55+44
 739 04a4 FFF7FEFF 		bl	printUSB
 740              	.LVL113:
 196:Src/commandParser.c **** 		printUSB((char *)"> status(verbose)\r\n");
 741              		.loc 1 196 0
 742 04a8 2648     		ldr	r0, .L55+48
 743 04aa FFF7FEFF 		bl	printUSB
 744              	.LVL114:
 197:Src/commandParser.c **** 		printUSB((char *)"> WHOAMI\r\n");
 745              		.loc 1 197 0
 746 04ae 2648     		ldr	r0, .L55+52
 747 04b0 FFF7FEFF 		bl	printUSB
 748              	.LVL115:
 198:Src/commandParser.c **** 		printUSB((char *)"> --- Use the below at your own risk ---\r\n");
 749              		.loc 1 198 0
 750 04b4 2548     		ldr	r0, .L55+56
 751 04b6 FFF7FEFF 		bl	printUSB
 752              	.LVL116:
 199:Src/commandParser.c **** 		printUSB((char *)"> setMaxPower(power(dBm))\r\n");
 753              		.loc 1 199 0
 754 04ba 2548     		ldr	r0, .L55+60
 755 04bc FFF7FEFF 		bl	printUSB
 756              	.LVL117:
 200:Src/commandParser.c **** 		printUSB((char *)"> setAttenuation(atten(dB))\r\n");
 757              		.loc 1 200 0
 758 04c0 2448     		ldr	r0, .L55+64
 759 04c2 FFF7FEFF 		bl	printUSB
 760              	.LVL118:
 201:Src/commandParser.c **** 		printUSB((char *)"> enableLO\r\n");
 761              		.loc 1 201 0
 762 04c6 2448     		ldr	r0, .L55+68
 763 04c8 FFF7FEFF 		bl	printUSB
 764              	.LVL119:
 202:Src/commandParser.c **** 		printUSB((char *)"> disableLO\r\n");
 765              		.loc 1 202 0
 766 04cc 2348     		ldr	r0, .L55+72
 767 04ce FFF7FEFF 		bl	printUSB
 768              	.LVL120:
 203:Src/commandParser.c **** 		printUSB((char *)"> enablePA\r\n");
 769              		.loc 1 203 0
 770 04d2 2348     		ldr	r0, .L55+76
 771 04d4 FFF7FEFF 		bl	printUSB
 772              	.LVL121:
 204:Src/commandParser.c **** 		printUSB((char *)"> disablePA\r\n");
 773              		.loc 1 204 0
 774 04d8 2248     		ldr	r0, .L55+80
 775 04da FFF7FEFF 		bl	printUSB
 776              	.LVL122:
 205:Src/commandParser.c **** 	}
 777              		.loc 1 205 0
 778 04de 2248     		ldr	r0, .L55+84
 779 04e0 FFF7FEFF 		bl	printUSB
 780              	.LVL123:
 781 04e4 47E6     		b	.L1
 782              	.L34:
 208:Src/commandParser.c **** 	{
 783              		.loc 1 208 0
ARM GAS  /tmp/cccqAtJW.s 			page 20


 784 04e6 0222     		movs	r2, #2
 785 04e8 22A9     		add	r1, sp, #136
 786 04ea 2048     		ldr	r0, .L55+88
 787 04ec FFF7FEFF 		bl	strncmp
 788              	.LVL124:
 789 04f0 18B9     		cbnz	r0, .L35
 210:Src/commandParser.c **** 	}
 790              		.loc 1 210 0
 791 04f2 1F48     		ldr	r0, .L55+92
 792 04f4 FFF7FEFF 		bl	printUSB
 793              	.LVL125:
 794 04f8 3DE6     		b	.L1
 795              	.L35:
 214:Src/commandParser.c **** 		sprintf((char *)txStr, "> %s\n", command);
 796              		.loc 1 214 0
 797 04fa 1E48     		ldr	r0, .L55+96
 798 04fc FFF7FEFF 		bl	printUSB
 799              	.LVL126:
 215:Src/commandParser.c **** 		printUSB(txStr);
 800              		.loc 1 215 0
 801 0500 084C     		ldr	r4, .L55+16
 802 0502 22AA     		add	r2, sp, #136
 803 0504 1C49     		ldr	r1, .L55+100
 804 0506 2046     		mov	r0, r4
 805 0508 FFF7FEFF 		bl	sprintf
 806              	.LVL127:
 216:Src/commandParser.c **** 
 807              		.loc 1 216 0
 808 050c 2046     		mov	r0, r4
 809 050e FFF7FEFF 		bl	printUSB
 810              	.LVL128:
 811              		.loc 1 220 0
 812 0512 30E6     		b	.L1
 813              	.L56:
 814              		.align	2
 815              	.L55:
 816 0514 9C010000 		.word	.LC24
 817 0518 CC010000 		.word	.LC27
 818 051c D8010000 		.word	.LC28
 819 0520 EC010000 		.word	.LC29
 820 0524 00000000 		.word	.LANCHOR0
 821 0528 F0010000 		.word	.LC30
 822 052c 10020000 		.word	.LC31
 823 0530 34020000 		.word	.LC32
 824 0534 3C020000 		.word	.LC33
 825 0538 5C020000 		.word	.LC34
 826 053c 7C020000 		.word	.LC35
 827 0540 B4020000 		.word	.LC36
 828 0544 C4020000 		.word	.LC37
 829 0548 D4020000 		.word	.LC38
 830 054c E8020000 		.word	.LC39
 831 0550 F4020000 		.word	.LC40
 832 0554 20030000 		.word	.LC41
 833 0558 3C030000 		.word	.LC42
 834 055c 5C030000 		.word	.LC43
 835 0560 6C030000 		.word	.LC44
 836 0564 7C030000 		.word	.LC45
ARM GAS  /tmp/cccqAtJW.s 			page 21


 837 0568 8C030000 		.word	.LC46
 838 056c 9C030000 		.word	.LC47
 839 0570 A0030000 		.word	.LC48
 840 0574 AC030000 		.word	.LC49
 841 0578 C8030000 		.word	.LC50
 842              		.cfi_endproc
 843              	.LFE69:
 845              		.global	txStr
 846              		.section	.rodata
 847              		.align	2
 848              		.set	.LANCHOR1,. + 0
 849              	.LC0:
 850 0000 FC       		.byte	-4
 851 0001 FF       		.byte	-1
 852 0002 02       		.byte	2
 853 0003 05       		.byte	5
 854              		.section	.bss.txStr,"aw",%nobits
 855              		.align	2
 856              		.set	.LANCHOR0,. + 0
 859              	txStr:
 860 0000 00000000 		.space	128
 860      00000000 
 860      00000000 
 860      00000000 
 860      00000000 
 861              		.section	.rodata.commandParser.str1.4,"aMS",%progbits,1
 862              		.align	2
 863              	.LC1:
 864 0000 73696747 		.ascii	"sigGen\000"
 864      656E00
 865 0007 00       		.space	1
 866              	.LC2:
 867 0008 3E205369 		.ascii	"> Signal Generator: Frequency = %0.3f MHz, Power = "
 867      676E616C 
 867      2047656E 
 867      65726174 
 867      6F723A20 
 868 003b 25302E32 		.ascii	"%0.2f dBm\012\000"
 868      66206442 
 868      6D0A00
 869 0046 0000     		.space	2
 870              	.LC3:
 871 0048 73776565 		.ascii	"sweep\000"
 871      7000
 872 004e 0000     		.space	2
 873              	.LC4:
 874 0050 3E205377 		.ascii	"> Sweep: Start = %0.2f MHz, fFinish = %0.2f dBm Pow"
 874      6565703A 
 874      20537461 
 874      7274203D 
 874      2025302E 
 875 0083 6572203D 		.ascii	"er = %0.2f dBm\012\000"
 875      2025302E 
 875      32662064 
 875      426D0A00 
 876 0093 00       		.space	1
 877              	.LC5:
ARM GAS  /tmp/cccqAtJW.s 			page 22


 878 0094 656E6162 		.ascii	"enableRF\000"
 878      6C655246 
 878      00
 879 009d 000000   		.space	3
 880              	.LC6:
 881 00a0 3E205246 		.ascii	"> RF Enabled \015\012\000"
 881      20456E61 
 881      626C6564 
 881      200D0A00 
 882              	.LC7:
 883 00b0 64697361 		.ascii	"disableRF\000"
 883      626C6552 
 883      4600
 884 00ba 0000     		.space	2
 885              	.LC8:
 886 00bc 3E205246 		.ascii	"> RF Disabled \015\012\000"
 886      20446973 
 886      61626C65 
 886      64200D0A 
 886      00
 887 00cd 000000   		.space	3
 888              	.LC9:
 889 00d0 73746174 		.ascii	"status\000"
 889      757300
 890 00d7 00       		.space	1
 891              	.LC10:
 892 00d8 00       		.ascii	"\000"
 893 00d9 000000   		.space	3
 894              	.LC11:
 895 00dc 57484F41 		.ascii	"WHOAMI\000"
 895      4D4900
 896 00e3 00       		.space	1
 897              	.LC12:
 898 00e4 3E204A6F 		.ascii	"> Josh's Signal Generator!\015\012\000"
 898      73682773 
 898      20536967 
 898      6E616C20 
 898      47656E65 
 899 0101 000000   		.space	3
 900              	.LC13:
 901 0104 6C656400 		.ascii	"led\000"
 902              	.LC14:
 903 0108 7261696E 		.ascii	"rainbow\000"
 903      626F7700 
 904              	.LC15:
 905 0110 6B697474 		.ascii	"kitt\000"
 905      00
 906 0115 000000   		.space	3
 907              	.LC16:
 908 0118 62696E61 		.ascii	"binary\000"
 908      727900
 909 011f 00       		.space	1
 910              	.LC17:
 911 0120 7365744D 		.ascii	"setMaxPower\000"
 911      6178506F 
 911      77657200 
 912              	.LC18:
ARM GAS  /tmp/cccqAtJW.s 			page 23


 913 012c 3E20506F 		.ascii	"> Power set to: %d dBm\012\000"
 913      77657220 
 913      73657420 
 913      746F3A20 
 913      25642064 
 914              	.LC19:
 915 0144 73657441 		.ascii	"setAttenuation\000"
 915      7474656E 
 915      75617469 
 915      6F6E00
 916 0153 00       		.space	1
 917              	.LC20:
 918 0154 3E204174 		.ascii	"> Attenuation set to: %0.2f dB\012\000"
 918      74656E75 
 918      6174696F 
 918      6E207365 
 918      7420746F 
 919              	.LC21:
 920 0174 656E6162 		.ascii	"enableLO\000"
 920      6C654C4F 
 920      00
 921 017d 000000   		.space	3
 922              	.LC22:
 923 0180 3E204C4F 		.ascii	"> LO Enabled \015\012\000"
 923      20456E61 
 923      626C6564 
 923      200D0A00 
 924              	.LC23:
 925 0190 64697361 		.ascii	"disableLO\000"
 925      626C654C 
 925      4F00
 926 019a 0000     		.space	2
 927              	.LC24:
 928 019c 3E204C4F 		.ascii	"> LO Disabled \015\012\000"
 928      20446973 
 928      61626C65 
 928      64200D0A 
 928      00
 929 01ad 000000   		.space	3
 930              	.LC25:
 931 01b0 656E6162 		.ascii	"enablePA\000"
 931      6C655041 
 931      00
 932 01b9 000000   		.space	3
 933              	.LC26:
 934 01bc 3E205041 		.ascii	"> PA Enabled \015\012\000"
 934      20456E61 
 934      626C6564 
 934      200D0A00 
 935              	.LC27:
 936 01cc 64697361 		.ascii	"disablePA\000"
 936      626C6550 
 936      4100
 937 01d6 0000     		.space	2
 938              	.LC28:
 939 01d8 3E205041 		.ascii	"> PA Disabled \015\012\000"
 939      20446973 
ARM GAS  /tmp/cccqAtJW.s 			page 24


 939      61626C65 
 939      64200D0A 
 939      00
 940 01e9 000000   		.space	3
 941              	.LC29:
 942 01ec 61646300 		.ascii	"adc\000"
 943              	.LC30:
 944 01f0 3E204D65 		.ascii	"> Measured Voltage= %0.2f V\012\000"
 944      61737572 
 944      65642056 
 944      6F6C7461 
 944      67653D20 
 945 020d 000000   		.space	3
 946              	.LC31:
 947 0210 3E204F75 		.ascii	"> Output Power at SMA = %0.2f dBm\012\000"
 947      74707574 
 947      20506F77 
 947      65722061 
 947      7420534D 
 948 0233 00       		.space	1
 949              	.LC32:
 950 0234 68656C70 		.ascii	"help\000"
 950      00
 951 0239 000000   		.space	3
 952              	.LC33:
 953 023c 3E202D2D 		.ascii	"> --  Available Commands  --\015\012\000"
 953      20204176 
 953      61696C61 
 953      626C6520 
 953      436F6D6D 
 954 025b 00       		.space	1
 955              	.LC34:
 956 025c 3E207369 		.ascii	"> sigGen(frequency, power)\015\012\000"
 956      6747656E 
 956      28667265 
 956      7175656E 
 956      63792C20 
 957 0279 000000   		.space	3
 958              	.LC35:
 959 027c 3E207377 		.ascii	"> sweep(startFreq, stopFreq, numSteps, power, time)"
 959      65657028 
 959      73746172 
 959      74467265 
 959      712C2073 
 960 02af 0D0A00   		.ascii	"\015\012\000"
 961 02b2 0000     		.space	2
 962              	.LC36:
 963 02b4 3E20656E 		.ascii	"> enableRF\015\012\000"
 963      61626C65 
 963      52460D0A 
 963      00
 964 02c1 000000   		.space	3
 965              	.LC37:
 966 02c4 3E206469 		.ascii	"> disableRF\015\012\000"
 966      7361626C 
 966      6552460D 
 966      0A00
ARM GAS  /tmp/cccqAtJW.s 			page 25


 967 02d2 0000     		.space	2
 968              	.LC38:
 969 02d4 3E207374 		.ascii	"> status(verbose)\015\012\000"
 969      61747573 
 969      28766572 
 969      626F7365 
 969      290D0A00 
 970              	.LC39:
 971 02e8 3E205748 		.ascii	"> WHOAMI\015\012\000"
 971      4F414D49 
 971      0D0A00
 972 02f3 00       		.space	1
 973              	.LC40:
 974 02f4 3E202D2D 		.ascii	"> --- Use the below at your own risk ---\015\012\000"
 974      2D205573 
 974      65207468 
 974      65206265 
 974      6C6F7720 
 975 031f 00       		.space	1
 976              	.LC41:
 977 0320 3E207365 		.ascii	"> setMaxPower(power(dBm))\015\012\000"
 977      744D6178 
 977      506F7765 
 977      7228706F 
 977      77657228 
 978              	.LC42:
 979 033c 3E207365 		.ascii	"> setAttenuation(atten(dB))\015\012\000"
 979      74417474 
 979      656E7561 
 979      74696F6E 
 979      28617474 
 980 035a 0000     		.space	2
 981              	.LC43:
 982 035c 3E20656E 		.ascii	"> enableLO\015\012\000"
 982      61626C65 
 982      4C4F0D0A 
 982      00
 983 0369 000000   		.space	3
 984              	.LC44:
 985 036c 3E206469 		.ascii	"> disableLO\015\012\000"
 985      7361626C 
 985      654C4F0D 
 985      0A00
 986 037a 0000     		.space	2
 987              	.LC45:
 988 037c 3E20656E 		.ascii	"> enablePA\015\012\000"
 988      61626C65 
 988      50410D0A 
 988      00
 989 0389 000000   		.space	3
 990              	.LC46:
 991 038c 3E206469 		.ascii	"> disablePA\015\012\000"
 991      7361626C 
 991      6550410D 
 991      0A00
 992 039a 0000     		.space	2
 993              	.LC47:
ARM GAS  /tmp/cccqAtJW.s 			page 26


 994 039c 0D0A00   		.ascii	"\015\012\000"
 995 039f 00       		.space	1
 996              	.LC48:
 997 03a0 3E204272 		.ascii	"> Break\015\012\000"
 997      65616B0D 
 997      0A00
 998 03aa 0000     		.space	2
 999              	.LC49:
 1000 03ac 3E204E6F 		.ascii	"> Not found, try again\015\012\000"
 1000      7420666F 
 1000      756E642C 
 1000      20747279 
 1000      20616761 
 1001 03c5 000000   		.space	3
 1002              	.LC50:
 1003 03c8 3E202573 		.ascii	"> %s\012\000"
 1003      0A00
 1004              		.text
 1005              	.Letext0:
 1006              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1007              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1008              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1009              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1010              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1011              		.file 7 "Inc/main.h"
 1012              		.file 8 "Inc/max2871.h"
 1013              		.file 9 "Inc/commandParser.h"
 1014              		.file 10 "Inc/txChain.h"
 1015              		.file 11 "/usr/include/newlib/sys/lock.h"
 1016              		.file 12 "/usr/include/newlib/sys/_types.h"
 1017              		.file 13 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1018              		.file 14 "/usr/include/newlib/sys/reent.h"
 1019              		.file 15 "/usr/include/newlib/stdlib.h"
 1020              		.file 16 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 1021              		.file 17 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 1022              		.file 18 "Inc/usbd_cdc_if.h"
 1023              		.file 19 "/usr/include/newlib/stdio.h"
 1024              		.file 20 "/usr/include/newlib/string.h"
 1025              		.file 21 "Inc/STP08CP05.h"
ARM GAS  /tmp/cccqAtJW.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 commandParser.c
     /tmp/cccqAtJW.s:18     .text.commandParser:0000000000000000 $t
     /tmp/cccqAtJW.s:25     .text.commandParser:0000000000000000 commandParser
     /tmp/cccqAtJW.s:618    .text.commandParser:00000000000003a0 $d
     /tmp/cccqAtJW.s:648    .text.commandParser:0000000000000410 $t
     /tmp/cccqAtJW.s:816    .text.commandParser:0000000000000514 $d
     /tmp/cccqAtJW.s:859    .bss.txStr:0000000000000000 txStr
     /tmp/cccqAtJW.s:847    .rodata:0000000000000000 $d
     /tmp/cccqAtJW.s:855    .bss.txStr:0000000000000000 $d
     /tmp/cccqAtJW.s:862    .rodata.commandParser.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_d2f
__aeabi_f2d
scanUSB
strncmp
max2871PrintStatus
txChainPrintStatus
atof
sigGen
sprintf
printUSB
sweep
max2871RFEnable
enablePA
max2871RFDisable
disablePA
atoi
max2871SetPower
stpSpiTx
rainbow
kitt
binary
setAttenuation
RX_FIFO
readAD8319
