ARM GAS  /tmp/ccVA9zIv.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"commandParser.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.commandParser,"ax",%progbits
  16              		.align	1
  17              		.global	commandParser
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	commandParser:
  24              	.LFB69:
  25              		.file 1 "Src/commandParser.c"
   1:Src/commandParser.c **** #include "main.h"
   2:Src/commandParser.c **** #include "commandParser.h"
   3:Src/commandParser.c **** #include "usbd_cdc_if.h"
   4:Src/commandParser.c **** #include "dwt_stm32_delay.h"
   5:Src/commandParser.c **** #include <stdio.h>
   6:Src/commandParser.c **** #include <string.h>
   7:Src/commandParser.c **** #include "max2871.h"
   8:Src/commandParser.c **** 
   9:Src/commandParser.c **** char txStr[128] = "";
  10:Src/commandParser.c **** 
  11:Src/commandParser.c **** // extern struct MAX2871Struct max2871Status;
  12:Src/commandParser.c **** 
  13:Src/commandParser.c **** void commandParser(struct MAX2871Struct *max2871Status)
  14:Src/commandParser.c **** {
  26              		.loc 1 14 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 256
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 C0B0     		sub	sp, sp, #256
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 272
  41 0004 0546     		mov	r5, r0
  15:Src/commandParser.c **** 	#define BUF_SIZE 128
  16:Src/commandParser.c **** 	#define CMD_SIZE 32
  17:Src/commandParser.c **** 	#define NUM_ARGS 6
ARM GAS  /tmp/ccVA9zIv.s 			page 2


  18:Src/commandParser.c **** 
  19:Src/commandParser.c **** 	char usrMsg[BUF_SIZE];
  20:Src/commandParser.c **** 	char command[CMD_SIZE] = "";
  42              		.loc 1 20 0
  43 0006 0024     		movs	r4, #0
  44 0008 1894     		str	r4, [sp, #96]
  45 000a 1994     		str	r4, [sp, #100]
  46 000c 1A94     		str	r4, [sp, #104]
  47 000e 1B94     		str	r4, [sp, #108]
  48 0010 1C94     		str	r4, [sp, #112]
  49 0012 1D94     		str	r4, [sp, #116]
  50 0014 1E94     		str	r4, [sp, #120]
  51 0016 1F94     		str	r4, [sp, #124]
  52              	.LVL1:
  21:Src/commandParser.c **** 	char args[NUM_ARGS][16];
  22:Src/commandParser.c **** 	uint8_t argNum = 0;
  23:Src/commandParser.c **** 	// Get whatever the user has sent
  24:Src/commandParser.c **** 	scanUSB((uint8_t *) usrMsg, BUF_SIZE);
  53              		.loc 1 24 0
  54 0018 8021     		movs	r1, #128
  55 001a 0DEB0100 		add	r0, sp, r1
  56              	.LVL2:
  57 001e FFF7FEFF 		bl	scanUSB
  58              	.LVL3:
  59              	.LBB2:
  25:Src/commandParser.c **** 
  26:Src/commandParser.c **** 	// Split on delim
  27:Src/commandParser.c **** 	for (uint8_t i = 0; i < FIFO_SIZE; i++)
  60              		.loc 1 27 0
  61 0022 2346     		mov	r3, r4
  62 0024 06E0     		b	.L2
  63              	.LVL4:
  64              	.L3:
  28:Src/commandParser.c **** 	{
  29:Src/commandParser.c **** 		if ((usrMsg[i] == '(') || (usrMsg[i] == ')') || (usrMsg[i] == ','))
  30:Src/commandParser.c **** 			usrMsg[i] = '\0';
  65              		.loc 1 30 0
  66 0026 40AA     		add	r2, sp, #256
  67 0028 1144     		add	r1, r1, r2
  68 002a 0022     		movs	r2, #0
  69 002c 01F8802C 		strb	r2, [r1, #-128]
  70              	.L4:
  27:Src/commandParser.c **** 	{
  71              		.loc 1 27 0 discriminator 2
  72 0030 0133     		adds	r3, r3, #1
  73              	.LVL5:
  74 0032 DBB2     		uxtb	r3, r3
  75              	.LVL6:
  76              	.L2:
  27:Src/commandParser.c **** 	{
  77              		.loc 1 27 0 is_stmt 0 discriminator 1
  78 0034 13F0800F 		tst	r3, #128
  79 0038 0CD1     		bne	.L24
  29:Src/commandParser.c **** 			usrMsg[i] = '\0';
  80              		.loc 1 29 0 is_stmt 1
  81 003a 1946     		mov	r1, r3
  82 003c 40AA     		add	r2, sp, #256
ARM GAS  /tmp/ccVA9zIv.s 			page 3


  83 003e 1A44     		add	r2, r2, r3
  84 0040 12F8800C 		ldrb	r0, [r2, #-128]	@ zero_extendqisi2
  85 0044 A0F12802 		sub	r2, r0, #40
  86 0048 D2B2     		uxtb	r2, r2
  87 004a 012A     		cmp	r2, #1
  88 004c EBD9     		bls	.L3
  29:Src/commandParser.c **** 			usrMsg[i] = '\0';
  89              		.loc 1 29 0 is_stmt 0 discriminator 1
  90 004e 2C28     		cmp	r0, #44
  91 0050 EED1     		bne	.L4
  92 0052 E8E7     		b	.L3
  93              	.L24:
  94              	.LBE2:
  31:Src/commandParser.c **** 	}
  32:Src/commandParser.c **** 
  33:Src/commandParser.c **** 	// Determine the command word
  34:Src/commandParser.c **** 	uint8_t i = 0;
  95              		.loc 1 34 0 is_stmt 1
  96 0054 0023     		movs	r3, #0
  97              	.LVL7:
  98 0056 05E0     		b	.L6
  99              	.LVL8:
 100              	.L7:
  35:Src/commandParser.c **** 	while (usrMsg[i] != '\0')
  36:Src/commandParser.c **** 	{
  37:Src/commandParser.c **** 		command[i] = usrMsg[i];
 101              		.loc 1 37 0
 102 0058 40A9     		add	r1, sp, #256
 103 005a 1944     		add	r1, r1, r3
 104 005c 01F8A02C 		strb	r2, [r1, #-160]
  38:Src/commandParser.c **** 		i++;
 105              		.loc 1 38 0
 106 0060 0133     		adds	r3, r3, #1
 107              	.LVL9:
 108 0062 DBB2     		uxtb	r3, r3
 109              	.LVL10:
 110              	.L6:
  35:Src/commandParser.c **** 	while (usrMsg[i] != '\0')
 111              		.loc 1 35 0
 112 0064 40AA     		add	r2, sp, #256
 113 0066 1A44     		add	r2, r2, r3
 114 0068 12F8802C 		ldrb	r2, [r2, #-128]	@ zero_extendqisi2
 115 006c 002A     		cmp	r2, #0
 116 006e F3D1     		bne	.L7
  22:Src/commandParser.c **** 	// Get whatever the user has sent
 117              		.loc 1 22 0
 118 0070 0026     		movs	r6, #0
 119 0072 12E0     		b	.L8
 120              	.LVL11:
 121              	.L11:
 122              	.LBB3:
  39:Src/commandParser.c **** 	}
  40:Src/commandParser.c **** 
  41:Src/commandParser.c **** 	// Find arguments
  42:Src/commandParser.c **** 	while (i < FIFO_SIZE)
  43:Src/commandParser.c **** 	{
  44:Src/commandParser.c **** 		// If null term, (was delim) skip
ARM GAS  /tmp/ccVA9zIv.s 			page 4


  45:Src/commandParser.c **** 		if (usrMsg[i] == '\0')
  46:Src/commandParser.c **** 			i++;
  47:Src/commandParser.c **** 		else
  48:Src/commandParser.c **** 		{
  49:Src/commandParser.c **** 			// Otherwise, copy arguments into their own strings
  50:Src/commandParser.c **** 			uint8_t j = 0;
  51:Src/commandParser.c **** 			while (usrMsg[i] != '\0')
  52:Src/commandParser.c **** 			{
  53:Src/commandParser.c **** 				args[argNum][j] = '\0';
 123              		.loc 1 53 0
 124 0074 1446     		mov	r4, r2
  54:Src/commandParser.c **** 				args[argNum][j++] = usrMsg[i];
 125              		.loc 1 54 0
 126 0076 0132     		adds	r2, r2, #1
 127              	.LVL12:
 128 0078 D2B2     		uxtb	r2, r2
 129              	.LVL13:
 130 007a 0DEB0611 		add	r1, sp, r6, lsl #4
 131 007e 0855     		strb	r0, [r1, r4]
  55:Src/commandParser.c **** 				i++;
 132              		.loc 1 55 0
 133 0080 0133     		adds	r3, r3, #1
 134              	.LVL14:
 135 0082 DBB2     		uxtb	r3, r3
 136              	.LVL15:
 137              	.L9:
  51:Src/commandParser.c **** 			{
 138              		.loc 1 51 0
 139 0084 40A9     		add	r1, sp, #256
 140 0086 1944     		add	r1, r1, r3
 141 0088 11F8800C 		ldrb	r0, [r1, #-128]	@ zero_extendqisi2
 142 008c 0028     		cmp	r0, #0
 143 008e F1D1     		bne	.L11
  56:Src/commandParser.c **** 			}
  57:Src/commandParser.c **** 			args[argNum][j] = '\0';
 144              		.loc 1 57 0
 145 0090 0DEB0611 		add	r1, sp, r6, lsl #4
 146 0094 8854     		strb	r0, [r1, r2]
  58:Src/commandParser.c **** 			argNum++;
 147              		.loc 1 58 0
 148 0096 0136     		adds	r6, r6, #1
 149              	.LVL16:
 150 0098 F6B2     		uxtb	r6, r6
 151              	.LVL17:
 152              	.L8:
 153              	.LBE3:
  42:Src/commandParser.c **** 	{
 154              		.loc 1 42 0
 155 009a 13F0800F 		tst	r3, #128
 156 009e 09D1     		bne	.L25
  45:Src/commandParser.c **** 			i++;
 157              		.loc 1 45 0
 158 00a0 40AA     		add	r2, sp, #256
 159 00a2 1A44     		add	r2, r2, r3
 160 00a4 12F8802C 		ldrb	r2, [r2, #-128]	@ zero_extendqisi2
 161 00a8 12B9     		cbnz	r2, .L22
  46:Src/commandParser.c **** 		else
ARM GAS  /tmp/ccVA9zIv.s 			page 5


 162              		.loc 1 46 0
 163 00aa 0133     		adds	r3, r3, #1
 164              	.LVL18:
 165 00ac DBB2     		uxtb	r3, r3
 166              	.LVL19:
 167 00ae F4E7     		b	.L8
 168              	.L22:
 169              	.LBB4:
  50:Src/commandParser.c **** 			while (usrMsg[i] != '\0')
 170              		.loc 1 50 0
 171 00b0 0022     		movs	r2, #0
 172 00b2 E7E7     		b	.L9
 173              	.L25:
 174              	.LBE4:
  59:Src/commandParser.c **** 		}
  60:Src/commandParser.c **** 
  61:Src/commandParser.c **** 	}
  62:Src/commandParser.c **** 
  63:Src/commandParser.c **** 	// Find command based on command word, and call function
  64:Src/commandParser.c **** 
  65:Src/commandParser.c **** 	if (strncmp("on", command, 2) == 0)
 175              		.loc 1 65 0
 176 00b4 0222     		movs	r2, #2
 177 00b6 18A9     		add	r1, sp, #96
 178 00b8 4548     		ldr	r0, .L30
 179 00ba FFF7FEFF 		bl	strncmp
 180              	.LVL20:
 181 00be F8B1     		cbz	r0, .L26
  66:Src/commandParser.c **** 	{
  67:Src/commandParser.c **** 		HAL_GPIO_WritePin(nLED_USR_GPIO_Port, nLED_USR_Pin, 1);
  68:Src/commandParser.c **** 	}
  69:Src/commandParser.c **** 
  70:Src/commandParser.c **** 	else if (strncmp("off", command, 3) == 0)
 182              		.loc 1 70 0
 183 00c0 0322     		movs	r2, #3
 184 00c2 18A9     		add	r1, sp, #96
 185 00c4 4348     		ldr	r0, .L30+4
 186 00c6 FFF7FEFF 		bl	strncmp
 187              	.LVL21:
 188 00ca 20B3     		cbz	r0, .L27
  71:Src/commandParser.c **** 	{
  72:Src/commandParser.c **** 		HAL_GPIO_WritePin(nLED_USR_GPIO_Port, nLED_USR_Pin, 0);
  73:Src/commandParser.c **** 	}
  74:Src/commandParser.c **** 
  75:Src/commandParser.c **** 	else if (strncmp("init", command, 4) == 0)
 189              		.loc 1 75 0
 190 00cc 0422     		movs	r2, #4
 191 00ce 18A9     		add	r1, sp, #96
 192 00d0 4148     		ldr	r0, .L30+8
 193 00d2 FFF7FEFF 		bl	strncmp
 194              	.LVL22:
 195 00d6 40B3     		cbz	r0, .L28
  76:Src/commandParser.c **** 	{
  77:Src/commandParser.c **** 		max2871Setup(max2871Status);
  78:Src/commandParser.c **** 	}
  79:Src/commandParser.c **** 
  80:Src/commandParser.c **** 	else if (strncmp("status", command, 6) == 0)
ARM GAS  /tmp/ccVA9zIv.s 			page 6


 196              		.loc 1 80 0
 197 00d8 0622     		movs	r2, #6
 198 00da 18A9     		add	r1, sp, #96
 199 00dc 3F48     		ldr	r0, .L30+12
 200 00de FFF7FEFF 		bl	strncmp
 201              	.LVL23:
 202 00e2 58BB     		cbnz	r0, .L17
  81:Src/commandParser.c **** 	{
  82:Src/commandParser.c **** 		if (strncmp("verbose", args[0], 7) == 0)
 203              		.loc 1 82 0
 204 00e4 0722     		movs	r2, #7
 205 00e6 6946     		mov	r1, sp
 206 00e8 3D48     		ldr	r0, .L30+16
 207 00ea FFF7FEFF 		bl	strncmp
 208              	.LVL24:
 209 00ee 00BB     		cbnz	r0, .L18
  83:Src/commandParser.c **** 		{
  84:Src/commandParser.c **** 			args[0][0] = (int32_t) "";
 210              		.loc 1 84 0
 211 00f0 3C4B     		ldr	r3, .L30+20
 212 00f2 8DF80030 		strb	r3, [sp]
  85:Src/commandParser.c **** 			max2871PrintStatus(VERBOSE,max2871Status);
 213              		.loc 1 85 0
 214 00f6 2946     		mov	r1, r5
 215 00f8 0120     		movs	r0, #1
 216 00fa FFF7FEFF 		bl	max2871PrintStatus
 217              	.LVL25:
 218 00fe 08E0     		b	.L1
 219              	.L26:
  67:Src/commandParser.c **** 	}
 220              		.loc 1 67 0
 221 0100 0122     		movs	r2, #1
 222 0102 4FF48071 		mov	r1, #256
 223 0106 00F18040 		add	r0, r0, #1073741824
 224 010a 00F58430 		add	r0, r0, #67584
 225 010e FFF7FEFF 		bl	HAL_GPIO_WritePin
 226              	.LVL26:
 227              	.L1:
  86:Src/commandParser.c **** 		}
  87:Src/commandParser.c **** 		else
  88:Src/commandParser.c **** 			max2871PrintStatus(nVERBOSE,max2871Status);
  89:Src/commandParser.c **** 
  90:Src/commandParser.c **** 		// txChainPrintStatus(txStatus);
  91:Src/commandParser.c **** 
  92:Src/commandParser.c **** 		// readAD8302vRef(receiverStatus);
  93:Src/commandParser.c **** 		// sprintf((char *)txStr, "> AD8302 VREF = %0.3f, VDELTA = %0.3f\n", receiverStatus->refVoltage, 
  94:Src/commandParser.c **** 		// printUSB(txStr);
  95:Src/commandParser.c **** 
  96:Src/commandParser.c **** 	}
  97:Src/commandParser.c **** 
  98:Src/commandParser.c **** 	else if (strncmp("WHOAMI", command, 5) == 0)
  99:Src/commandParser.c **** 	{
 100:Src/commandParser.c **** 		printUSB("> Josh's Signal Generator!\r\n");
 101:Src/commandParser.c **** 	}
 102:Src/commandParser.c **** 
 103:Src/commandParser.c **** 	else if ((strncmp("ls", command,2) == 0) || (strncmp("help", command, 4) == 0))
 104:Src/commandParser.c **** 	{
ARM GAS  /tmp/ccVA9zIv.s 			page 7


 105:Src/commandParser.c **** 		printUSB((char *)"> --  Available Commands  --\r\n");
 106:Src/commandParser.c **** 		printUSB((char *)"> sigGen(frequency, power)\r\n");
 107:Src/commandParser.c **** 		printUSB((char *)"> sweep(startFreq, stopFreq, numSteps, power, time)\r\n");
 108:Src/commandParser.c **** 		printUSB((char *)"> status(verbose)\r\n");
 109:Src/commandParser.c **** 		printUSB((char *)"> WHOAMI\r\n");
 110:Src/commandParser.c **** 		printUSB((char *)"> Use the below at your own risk:\r\n");
 111:Src/commandParser.c **** 		printUSB((char *)"> setMaxPower(power(dBm))\r\n");
 112:Src/commandParser.c **** 		printUSB((char *)"> setAttenuation(atten(dB))\r\n");
 113:Src/commandParser.c **** 		printUSB((char *)"> enableRF\r\n");
 114:Src/commandParser.c **** 		printUSB((char *)"> disableRF\r\n");
 115:Src/commandParser.c **** 		printUSB((char *)"> enablePA\r\n");
 116:Src/commandParser.c **** 		printUSB((char *)"> disablePA\r\n");
 117:Src/commandParser.c **** 	}
 118:Src/commandParser.c **** 	else
 119:Src/commandParser.c **** 	{
 120:Src/commandParser.c **** 		printUSB("> Not found, try again\r\n");
 121:Src/commandParser.c **** 		sprintf((char *)txStr, "> %s\n", command);
 122:Src/commandParser.c **** 		printUSB(txStr);
 123:Src/commandParser.c **** 
 124:Src/commandParser.c **** 	}
 125:Src/commandParser.c **** 
 126:Src/commandParser.c **** }
 228              		.loc 1 126 0
 229 0112 40B0     		add	sp, sp, #256
 230              	.LCFI2:
 231              		.cfi_remember_state
 232              		.cfi_def_cfa_offset 16
 233              		@ sp needed
 234 0114 70BD     		pop	{r4, r5, r6, pc}
 235              	.LVL27:
 236              	.L27:
 237              	.LCFI3:
 238              		.cfi_restore_state
  72:Src/commandParser.c **** 	}
 239              		.loc 1 72 0
 240 0116 0022     		movs	r2, #0
 241 0118 4FF48071 		mov	r1, #256
 242 011c 00F18040 		add	r0, r0, #1073741824
 243 0120 00F58430 		add	r0, r0, #67584
 244 0124 FFF7FEFF 		bl	HAL_GPIO_WritePin
 245              	.LVL28:
 246 0128 F3E7     		b	.L1
 247              	.L28:
  77:Src/commandParser.c **** 	}
 248              		.loc 1 77 0
 249 012a 2846     		mov	r0, r5
 250 012c FFF7FEFF 		bl	max2871Setup
 251              	.LVL29:
 252 0130 EFE7     		b	.L1
 253              	.L18:
  88:Src/commandParser.c **** 
 254              		.loc 1 88 0
 255 0132 2946     		mov	r1, r5
 256 0134 0020     		movs	r0, #0
 257 0136 FFF7FEFF 		bl	max2871PrintStatus
 258              	.LVL30:
 259 013a EAE7     		b	.L1
ARM GAS  /tmp/ccVA9zIv.s 			page 8


 260              	.L17:
  98:Src/commandParser.c **** 	{
 261              		.loc 1 98 0
 262 013c 0522     		movs	r2, #5
 263 013e 18A9     		add	r1, sp, #96
 264 0140 2948     		ldr	r0, .L30+24
 265 0142 FFF7FEFF 		bl	strncmp
 266              	.LVL31:
 267 0146 0028     		cmp	r0, #0
 268 0148 30D0     		beq	.L29
 103:Src/commandParser.c **** 	{
 269              		.loc 1 103 0
 270 014a 0222     		movs	r2, #2
 271 014c 18A9     		add	r1, sp, #96
 272 014e 2748     		ldr	r0, .L30+28
 273 0150 FFF7FEFF 		bl	strncmp
 274              	.LVL32:
 275 0154 28B1     		cbz	r0, .L20
 103:Src/commandParser.c **** 	{
 276              		.loc 1 103 0 is_stmt 0 discriminator 1
 277 0156 0422     		movs	r2, #4
 278 0158 18A9     		add	r1, sp, #96
 279 015a 2548     		ldr	r0, .L30+32
 280 015c FFF7FEFF 		bl	strncmp
 281              	.LVL33:
 282 0160 40BB     		cbnz	r0, .L21
 283              	.L20:
 105:Src/commandParser.c **** 		printUSB((char *)"> sigGen(frequency, power)\r\n");
 284              		.loc 1 105 0 is_stmt 1
 285 0162 2448     		ldr	r0, .L30+36
 286 0164 FFF7FEFF 		bl	printUSB
 287              	.LVL34:
 106:Src/commandParser.c **** 		printUSB((char *)"> sweep(startFreq, stopFreq, numSteps, power, time)\r\n");
 288              		.loc 1 106 0
 289 0168 2348     		ldr	r0, .L30+40
 290 016a FFF7FEFF 		bl	printUSB
 291              	.LVL35:
 107:Src/commandParser.c **** 		printUSB((char *)"> status(verbose)\r\n");
 292              		.loc 1 107 0
 293 016e 2348     		ldr	r0, .L30+44
 294 0170 FFF7FEFF 		bl	printUSB
 295              	.LVL36:
 108:Src/commandParser.c **** 		printUSB((char *)"> WHOAMI\r\n");
 296              		.loc 1 108 0
 297 0174 2248     		ldr	r0, .L30+48
 298 0176 FFF7FEFF 		bl	printUSB
 299              	.LVL37:
 109:Src/commandParser.c **** 		printUSB((char *)"> Use the below at your own risk:\r\n");
 300              		.loc 1 109 0
 301 017a 2248     		ldr	r0, .L30+52
 302 017c FFF7FEFF 		bl	printUSB
 303              	.LVL38:
 110:Src/commandParser.c **** 		printUSB((char *)"> setMaxPower(power(dBm))\r\n");
 304              		.loc 1 110 0
 305 0180 2148     		ldr	r0, .L30+56
 306 0182 FFF7FEFF 		bl	printUSB
 307              	.LVL39:
ARM GAS  /tmp/ccVA9zIv.s 			page 9


 111:Src/commandParser.c **** 		printUSB((char *)"> setAttenuation(atten(dB))\r\n");
 308              		.loc 1 111 0
 309 0186 2148     		ldr	r0, .L30+60
 310 0188 FFF7FEFF 		bl	printUSB
 311              	.LVL40:
 112:Src/commandParser.c **** 		printUSB((char *)"> enableRF\r\n");
 312              		.loc 1 112 0
 313 018c 2048     		ldr	r0, .L30+64
 314 018e FFF7FEFF 		bl	printUSB
 315              	.LVL41:
 113:Src/commandParser.c **** 		printUSB((char *)"> disableRF\r\n");
 316              		.loc 1 113 0
 317 0192 2048     		ldr	r0, .L30+68
 318 0194 FFF7FEFF 		bl	printUSB
 319              	.LVL42:
 114:Src/commandParser.c **** 		printUSB((char *)"> enablePA\r\n");
 320              		.loc 1 114 0
 321 0198 1F48     		ldr	r0, .L30+72
 322 019a FFF7FEFF 		bl	printUSB
 323              	.LVL43:
 115:Src/commandParser.c **** 		printUSB((char *)"> disablePA\r\n");
 324              		.loc 1 115 0
 325 019e 1F48     		ldr	r0, .L30+76
 326 01a0 FFF7FEFF 		bl	printUSB
 327              	.LVL44:
 116:Src/commandParser.c **** 	}
 328              		.loc 1 116 0
 329 01a4 1E48     		ldr	r0, .L30+80
 330 01a6 FFF7FEFF 		bl	printUSB
 331              	.LVL45:
 332 01aa B2E7     		b	.L1
 333              	.L29:
 100:Src/commandParser.c **** 	}
 334              		.loc 1 100 0
 335 01ac 1D48     		ldr	r0, .L30+84
 336 01ae FFF7FEFF 		bl	printUSB
 337              	.LVL46:
 338 01b2 AEE7     		b	.L1
 339              	.L21:
 120:Src/commandParser.c **** 		sprintf((char *)txStr, "> %s\n", command);
 340              		.loc 1 120 0
 341 01b4 1C48     		ldr	r0, .L30+88
 342 01b6 FFF7FEFF 		bl	printUSB
 343              	.LVL47:
 121:Src/commandParser.c **** 		printUSB(txStr);
 344              		.loc 1 121 0
 345 01ba 1C4C     		ldr	r4, .L30+92
 346 01bc 18AA     		add	r2, sp, #96
 347 01be 1C49     		ldr	r1, .L30+96
 348 01c0 2046     		mov	r0, r4
 349 01c2 FFF7FEFF 		bl	sprintf
 350              	.LVL48:
 122:Src/commandParser.c **** 
 351              		.loc 1 122 0
 352 01c6 2046     		mov	r0, r4
 353 01c8 FFF7FEFF 		bl	printUSB
 354              	.LVL49:
ARM GAS  /tmp/ccVA9zIv.s 			page 10


 355              		.loc 1 126 0
 356 01cc A1E7     		b	.L1
 357              	.L31:
 358 01ce 00BF     		.align	2
 359              	.L30:
 360 01d0 00000000 		.word	.LC0
 361 01d4 04000000 		.word	.LC1
 362 01d8 08000000 		.word	.LC2
 363 01dc 10000000 		.word	.LC3
 364 01e0 18000000 		.word	.LC4
 365 01e4 20000000 		.word	.LC5
 366 01e8 24000000 		.word	.LC6
 367 01ec 4C000000 		.word	.LC8
 368 01f0 50000000 		.word	.LC9
 369 01f4 58000000 		.word	.LC10
 370 01f8 78000000 		.word	.LC11
 371 01fc 98000000 		.word	.LC12
 372 0200 D0000000 		.word	.LC13
 373 0204 E4000000 		.word	.LC14
 374 0208 F0000000 		.word	.LC15
 375 020c 14010000 		.word	.LC16
 376 0210 30010000 		.word	.LC17
 377 0214 50010000 		.word	.LC18
 378 0218 60010000 		.word	.LC19
 379 021c 70010000 		.word	.LC20
 380 0220 80010000 		.word	.LC21
 381 0224 2C000000 		.word	.LC7
 382 0228 90010000 		.word	.LC22
 383 022c 00000000 		.word	.LANCHOR0
 384 0230 AC010000 		.word	.LC23
 385              		.cfi_endproc
 386              	.LFE69:
 388              		.global	txStr
 389              		.section	.bss.txStr,"aw",%nobits
 390              		.align	2
 391              		.set	.LANCHOR0,. + 0
 394              	txStr:
 395 0000 00000000 		.space	128
 395      00000000 
 395      00000000 
 395      00000000 
 395      00000000 
 396              		.section	.rodata.commandParser.str1.4,"aMS",%progbits,1
 397              		.align	2
 398              	.LC0:
 399 0000 6F6E00   		.ascii	"on\000"
 400 0003 00       		.space	1
 401              	.LC1:
 402 0004 6F666600 		.ascii	"off\000"
 403              	.LC2:
 404 0008 696E6974 		.ascii	"init\000"
 404      00
 405 000d 000000   		.space	3
 406              	.LC3:
 407 0010 73746174 		.ascii	"status\000"
 407      757300
 408 0017 00       		.space	1
ARM GAS  /tmp/ccVA9zIv.s 			page 11


 409              	.LC4:
 410 0018 76657262 		.ascii	"verbose\000"
 410      6F736500 
 411              	.LC5:
 412 0020 00       		.ascii	"\000"
 413 0021 000000   		.space	3
 414              	.LC6:
 415 0024 57484F41 		.ascii	"WHOAMI\000"
 415      4D4900
 416 002b 00       		.space	1
 417              	.LC7:
 418 002c 3E204A6F 		.ascii	"> Josh's Signal Generator!\015\012\000"
 418      73682773 
 418      20536967 
 418      6E616C20 
 418      47656E65 
 419 0049 000000   		.space	3
 420              	.LC8:
 421 004c 6C7300   		.ascii	"ls\000"
 422 004f 00       		.space	1
 423              	.LC9:
 424 0050 68656C70 		.ascii	"help\000"
 424      00
 425 0055 000000   		.space	3
 426              	.LC10:
 427 0058 3E202D2D 		.ascii	"> --  Available Commands  --\015\012\000"
 427      20204176 
 427      61696C61 
 427      626C6520 
 427      436F6D6D 
 428 0077 00       		.space	1
 429              	.LC11:
 430 0078 3E207369 		.ascii	"> sigGen(frequency, power)\015\012\000"
 430      6747656E 
 430      28667265 
 430      7175656E 
 430      63792C20 
 431 0095 000000   		.space	3
 432              	.LC12:
 433 0098 3E207377 		.ascii	"> sweep(startFreq, stopFreq, numSteps, power, time)"
 433      65657028 
 433      73746172 
 433      74467265 
 433      712C2073 
 434 00cb 0D0A00   		.ascii	"\015\012\000"
 435 00ce 0000     		.space	2
 436              	.LC13:
 437 00d0 3E207374 		.ascii	"> status(verbose)\015\012\000"
 437      61747573 
 437      28766572 
 437      626F7365 
 437      290D0A00 
 438              	.LC14:
 439 00e4 3E205748 		.ascii	"> WHOAMI\015\012\000"
 439      4F414D49 
 439      0D0A00
 440 00ef 00       		.space	1
ARM GAS  /tmp/ccVA9zIv.s 			page 12


 441              	.LC15:
 442 00f0 3E205573 		.ascii	"> Use the below at your own risk:\015\012\000"
 442      65207468 
 442      65206265 
 442      6C6F7720 
 442      61742079 
 443              	.LC16:
 444 0114 3E207365 		.ascii	"> setMaxPower(power(dBm))\015\012\000"
 444      744D6178 
 444      506F7765 
 444      7228706F 
 444      77657228 
 445              	.LC17:
 446 0130 3E207365 		.ascii	"> setAttenuation(atten(dB))\015\012\000"
 446      74417474 
 446      656E7561 
 446      74696F6E 
 446      28617474 
 447 014e 0000     		.space	2
 448              	.LC18:
 449 0150 3E20656E 		.ascii	"> enableRF\015\012\000"
 449      61626C65 
 449      52460D0A 
 449      00
 450 015d 000000   		.space	3
 451              	.LC19:
 452 0160 3E206469 		.ascii	"> disableRF\015\012\000"
 452      7361626C 
 452      6552460D 
 452      0A00
 453 016e 0000     		.space	2
 454              	.LC20:
 455 0170 3E20656E 		.ascii	"> enablePA\015\012\000"
 455      61626C65 
 455      50410D0A 
 455      00
 456 017d 000000   		.space	3
 457              	.LC21:
 458 0180 3E206469 		.ascii	"> disablePA\015\012\000"
 458      7361626C 
 458      6550410D 
 458      0A00
 459 018e 0000     		.space	2
 460              	.LC22:
 461 0190 3E204E6F 		.ascii	"> Not found, try again\015\012\000"
 461      7420666F 
 461      756E642C 
 461      20747279 
 461      20616761 
 462 01a9 000000   		.space	3
 463              	.LC23:
 464 01ac 3E202573 		.ascii	"> %s\012\000"
 464      0A00
 465              		.text
 466              	.Letext0:
 467              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 468              		.file 3 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/ccVA9zIv.s 			page 13


 469              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 470              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 471              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 472              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 473              		.file 8 "Inc/main.h"
 474              		.file 9 "Inc/max2871.h"
 475              		.file 10 "Inc/commandParser.h"
 476              		.file 11 "/usr/include/newlib/sys/lock.h"
 477              		.file 12 "/usr/include/newlib/sys/_types.h"
 478              		.file 13 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 479              		.file 14 "/usr/include/newlib/sys/reent.h"
 480              		.file 15 "/usr/include/newlib/stdlib.h"
 481              		.file 16 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 482              		.file 17 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 483              		.file 18 "Inc/usbd_cdc_if.h"
 484              		.file 19 "/usr/include/newlib/string.h"
 485              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 486              		.file 21 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccVA9zIv.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 commandParser.c
     /tmp/ccVA9zIv.s:16     .text.commandParser:0000000000000000 $t
     /tmp/ccVA9zIv.s:23     .text.commandParser:0000000000000000 commandParser
     /tmp/ccVA9zIv.s:360    .text.commandParser:00000000000001d0 $d
     /tmp/ccVA9zIv.s:394    .bss.txStr:0000000000000000 txStr
     /tmp/ccVA9zIv.s:390    .bss.txStr:0000000000000000 $d
     /tmp/ccVA9zIv.s:397    .rodata.commandParser.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
scanUSB
strncmp
max2871PrintStatus
HAL_GPIO_WritePin
max2871Setup
printUSB
sprintf
