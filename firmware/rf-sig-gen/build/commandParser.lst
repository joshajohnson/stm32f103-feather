ARM GAS  /tmp/ccjwnJoa.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"commandParser.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_d2f
  16              		.global	__aeabi_f2d
  17              		.section	.text.commandParser,"ax",%progbits
  18              		.align	1
  19              		.global	commandParser
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu softvfp
  25              	commandParser:
  26              	.LFB69:
  27              		.file 1 "Src/commandParser.c"
   1:Src/commandParser.c **** #include "main.h"
   2:Src/commandParser.c **** #include "commandParser.h"
   3:Src/commandParser.c **** #include "usbd_cdc_if.h"
   4:Src/commandParser.c **** #include "dwt_stm32_delay.h"
   5:Src/commandParser.c **** #include <stdio.h>
   6:Src/commandParser.c **** #include <string.h>
   7:Src/commandParser.c **** #include "max2871.h"
   8:Src/commandParser.c **** #include "txChain.h"
   9:Src/commandParser.c **** 
  10:Src/commandParser.c **** char txStr[128] = "";
  11:Src/commandParser.c **** 
  12:Src/commandParser.c **** void commandParser(struct MAX2871Struct *max2871Status, struct txStruct *txStatus)
  13:Src/commandParser.c **** {
  28              		.loc 1 13 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 280
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 36
  36              		.cfi_offset 4, -36
  37              		.cfi_offset 5, -32
  38              		.cfi_offset 6, -28
  39              		.cfi_offset 7, -24
  40              		.cfi_offset 8, -20
  41              		.cfi_offset 9, -16
  42              		.cfi_offset 10, -12
  43              		.cfi_offset 11, -8
  44              		.cfi_offset 14, -4
  45 0004 CBB0     		sub	sp, sp, #300
ARM GAS  /tmp/ccjwnJoa.s 			page 2


  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 336
  48 0006 8346     		mov	fp, r0
  49 0008 8A46     		mov	r10, r1
  14:Src/commandParser.c **** 	#define BUF_SIZE 128
  15:Src/commandParser.c **** 	#define CMD_SIZE 32
  16:Src/commandParser.c **** 	#define NUM_ARGS 6
  17:Src/commandParser.c **** 
  18:Src/commandParser.c **** 	char usrMsg[BUF_SIZE];
  19:Src/commandParser.c **** 	char command[CMD_SIZE] = "";
  50              		.loc 1 19 0
  51 000a 0024     		movs	r4, #0
  52 000c 2294     		str	r4, [sp, #136]
  53 000e 2394     		str	r4, [sp, #140]
  54 0010 2494     		str	r4, [sp, #144]
  55 0012 2594     		str	r4, [sp, #148]
  56 0014 2694     		str	r4, [sp, #152]
  57 0016 2794     		str	r4, [sp, #156]
  58 0018 2894     		str	r4, [sp, #160]
  59 001a 2994     		str	r4, [sp, #164]
  60              	.LVL1:
  20:Src/commandParser.c **** 	char args[NUM_ARGS][16];
  21:Src/commandParser.c **** 	uint8_t argNum = 0;
  22:Src/commandParser.c **** 	// Get whatever the user has sent
  23:Src/commandParser.c **** 	scanUSB((uint8_t *) usrMsg, BUF_SIZE);
  61              		.loc 1 23 0
  62 001c 8021     		movs	r1, #128
  63              	.LVL2:
  64 001e 2AA8     		add	r0, sp, #168
  65              	.LVL3:
  66 0020 FFF7FEFF 		bl	scanUSB
  67              	.LVL4:
  68              	.LBB2:
  24:Src/commandParser.c **** 
  25:Src/commandParser.c **** 	// Split on delim
  26:Src/commandParser.c **** 	for (uint8_t i = 0; i < FIFO_SIZE; i++)
  69              		.loc 1 26 0
  70 0024 2346     		mov	r3, r4
  71 0026 06E0     		b	.L2
  72              	.LVL5:
  73              	.L3:
  27:Src/commandParser.c **** 	{
  28:Src/commandParser.c **** 		if ((usrMsg[i] == '(') || (usrMsg[i] == ')') || (usrMsg[i] == ','))
  29:Src/commandParser.c **** 			usrMsg[i] = '\0';
  74              		.loc 1 29 0
  75 0028 4AAA     		add	r2, sp, #296
  76 002a 1144     		add	r1, r1, r2
  77 002c 0022     		movs	r2, #0
  78 002e 01F8802C 		strb	r2, [r1, #-128]
  79              	.L4:
  26:Src/commandParser.c **** 	{
  80              		.loc 1 26 0 discriminator 2
  81 0032 0133     		adds	r3, r3, #1
  82              	.LVL6:
  83 0034 DBB2     		uxtb	r3, r3
  84              	.LVL7:
  85              	.L2:
ARM GAS  /tmp/ccjwnJoa.s 			page 3


  26:Src/commandParser.c **** 	{
  86              		.loc 1 26 0 is_stmt 0 discriminator 1
  87 0036 13F0800F 		tst	r3, #128
  88 003a 0CD1     		bne	.L31
  28:Src/commandParser.c **** 			usrMsg[i] = '\0';
  89              		.loc 1 28 0 is_stmt 1
  90 003c 1946     		mov	r1, r3
  91 003e 4AAA     		add	r2, sp, #296
  92 0040 1A44     		add	r2, r2, r3
  93 0042 12F8800C 		ldrb	r0, [r2, #-128]	@ zero_extendqisi2
  94 0046 A0F12802 		sub	r2, r0, #40
  95 004a D2B2     		uxtb	r2, r2
  96 004c 012A     		cmp	r2, #1
  97 004e EBD9     		bls	.L3
  28:Src/commandParser.c **** 			usrMsg[i] = '\0';
  98              		.loc 1 28 0 is_stmt 0 discriminator 1
  99 0050 2C28     		cmp	r0, #44
 100 0052 EED1     		bne	.L4
 101 0054 E8E7     		b	.L3
 102              	.L31:
 103              	.LBE2:
  30:Src/commandParser.c **** 	}
  31:Src/commandParser.c **** 
  32:Src/commandParser.c **** 	// Determine the command word
  33:Src/commandParser.c **** 	uint8_t i = 0;
 104              		.loc 1 33 0 is_stmt 1
 105 0056 0023     		movs	r3, #0
 106              	.LVL8:
 107 0058 05E0     		b	.L6
 108              	.LVL9:
 109              	.L7:
  34:Src/commandParser.c **** 	while (usrMsg[i] != '\0')
  35:Src/commandParser.c **** 	{
  36:Src/commandParser.c **** 		command[i] = usrMsg[i];
 110              		.loc 1 36 0
 111 005a 4AA9     		add	r1, sp, #296
 112 005c 1944     		add	r1, r1, r3
 113 005e 01F8A02C 		strb	r2, [r1, #-160]
  37:Src/commandParser.c **** 		i++;
 114              		.loc 1 37 0
 115 0062 0133     		adds	r3, r3, #1
 116              	.LVL10:
 117 0064 DBB2     		uxtb	r3, r3
 118              	.LVL11:
 119              	.L6:
  34:Src/commandParser.c **** 	while (usrMsg[i] != '\0')
 120              		.loc 1 34 0
 121 0066 4AAA     		add	r2, sp, #296
 122 0068 1A44     		add	r2, r2, r3
 123 006a 12F8802C 		ldrb	r2, [r2, #-128]	@ zero_extendqisi2
 124 006e 002A     		cmp	r2, #0
 125 0070 F3D1     		bne	.L7
  21:Src/commandParser.c **** 	// Get whatever the user has sent
 126              		.loc 1 21 0
 127 0072 0025     		movs	r5, #0
 128 0074 14E0     		b	.L8
 129              	.LVL12:
ARM GAS  /tmp/ccjwnJoa.s 			page 4


 130              	.L11:
 131              	.LBB3:
  38:Src/commandParser.c **** 	}
  39:Src/commandParser.c **** 
  40:Src/commandParser.c **** 	// Find arguments
  41:Src/commandParser.c **** 	while (i < FIFO_SIZE)
  42:Src/commandParser.c **** 	{
  43:Src/commandParser.c **** 		// If null term, (was delim) skip
  44:Src/commandParser.c **** 		if (usrMsg[i] == '\0')
  45:Src/commandParser.c **** 			i++;
  46:Src/commandParser.c **** 		else
  47:Src/commandParser.c **** 		{
  48:Src/commandParser.c **** 			// Otherwise, copy arguments into their own strings
  49:Src/commandParser.c **** 			uint8_t j = 0;
  50:Src/commandParser.c **** 			while (usrMsg[i] != '\0')
  51:Src/commandParser.c **** 			{
  52:Src/commandParser.c **** 				args[argNum][j] = '\0';
 132              		.loc 1 52 0
 133 0076 1446     		mov	r4, r2
  53:Src/commandParser.c **** 				args[argNum][j++] = usrMsg[i];
 134              		.loc 1 53 0
 135 0078 0132     		adds	r2, r2, #1
 136              	.LVL13:
 137 007a D2B2     		uxtb	r2, r2
 138              	.LVL14:
 139 007c 0AA9     		add	r1, sp, #40
 140 007e 01EB0511 		add	r1, r1, r5, lsl #4
 141 0082 0855     		strb	r0, [r1, r4]
  54:Src/commandParser.c **** 				i++;
 142              		.loc 1 54 0
 143 0084 0133     		adds	r3, r3, #1
 144              	.LVL15:
 145 0086 DBB2     		uxtb	r3, r3
 146              	.LVL16:
 147              	.L9:
  50:Src/commandParser.c **** 			{
 148              		.loc 1 50 0
 149 0088 4AA9     		add	r1, sp, #296
 150 008a 1944     		add	r1, r1, r3
 151 008c 11F8800C 		ldrb	r0, [r1, #-128]	@ zero_extendqisi2
 152 0090 0028     		cmp	r0, #0
 153 0092 F0D1     		bne	.L11
  55:Src/commandParser.c **** 			}
  56:Src/commandParser.c **** 			args[argNum][j] = '\0';
 154              		.loc 1 56 0
 155 0094 0AA9     		add	r1, sp, #40
 156 0096 01EB0511 		add	r1, r1, r5, lsl #4
 157 009a 8854     		strb	r0, [r1, r2]
  57:Src/commandParser.c **** 			argNum++;
 158              		.loc 1 57 0
 159 009c 0135     		adds	r5, r5, #1
 160              	.LVL17:
 161 009e EDB2     		uxtb	r5, r5
 162              	.LVL18:
 163              	.L8:
 164              	.LBE3:
  41:Src/commandParser.c **** 	{
ARM GAS  /tmp/ccjwnJoa.s 			page 5


 165              		.loc 1 41 0
 166 00a0 13F0800F 		tst	r3, #128
 167 00a4 09D1     		bne	.L32
  44:Src/commandParser.c **** 			i++;
 168              		.loc 1 44 0
 169 00a6 4AAA     		add	r2, sp, #296
 170 00a8 1A44     		add	r2, r2, r3
 171 00aa 12F8802C 		ldrb	r2, [r2, #-128]	@ zero_extendqisi2
 172 00ae 12B9     		cbnz	r2, .L29
  45:Src/commandParser.c **** 		else
 173              		.loc 1 45 0
 174 00b0 0133     		adds	r3, r3, #1
 175              	.LVL19:
 176 00b2 DBB2     		uxtb	r3, r3
 177              	.LVL20:
 178 00b4 F4E7     		b	.L8
 179              	.L29:
 180              	.LBB4:
  49:Src/commandParser.c **** 			while (usrMsg[i] != '\0')
 181              		.loc 1 49 0
 182 00b6 0022     		movs	r2, #0
 183 00b8 E6E7     		b	.L9
 184              	.L32:
 185              	.LBE4:
  58:Src/commandParser.c **** 		}
  59:Src/commandParser.c **** 
  60:Src/commandParser.c **** 	}
  61:Src/commandParser.c **** 
  62:Src/commandParser.c **** 	// Find command based on command word, and call function
  63:Src/commandParser.c **** 
  64:Src/commandParser.c **** 	if (strncmp("sigGen", command, 6) == 0)
 186              		.loc 1 64 0
 187 00ba 0622     		movs	r2, #6
 188 00bc 22A9     		add	r1, sp, #136
 189 00be B148     		ldr	r0, .L42
 190 00c0 FFF7FEFF 		bl	strncmp
 191              	.LVL21:
 192 00c4 0028     		cmp	r0, #0
 193 00c6 5AD0     		beq	.L33
  65:Src/commandParser.c **** 	{
  66:Src/commandParser.c **** 		sigGen(atof(args[0]), atof(args[1]), max2871Status, txStatus);
  67:Src/commandParser.c **** 
  68:Src/commandParser.c **** 		sprintf((char *)txStr, "> Signal Generator: Frequency = %0.2f MHz, Power = %0.2f dBm\n", max2871S
  69:Src/commandParser.c **** 		printUSB(txStr);
  70:Src/commandParser.c **** 	}
  71:Src/commandParser.c **** 
  72:Src/commandParser.c **** 	else if (strncmp("sweep", command, 5) == 0)
 194              		.loc 1 72 0
 195 00c8 0522     		movs	r2, #5
 196 00ca 22A9     		add	r1, sp, #136
 197 00cc AE48     		ldr	r0, .L42+4
 198 00ce FFF7FEFF 		bl	strncmp
 199              	.LVL22:
 200 00d2 0028     		cmp	r0, #0
 201 00d4 00F08180 		beq	.L34
  73:Src/commandParser.c **** 	{
  74:Src/commandParser.c **** 		sprintf((char *)txStr, "> Sweep: Start = %0.2f MHz, fFinish = %0.2f dBm Power = %0.2f dBm\n", ato
ARM GAS  /tmp/ccjwnJoa.s 			page 6


  75:Src/commandParser.c **** 		printUSB(txStr);
  76:Src/commandParser.c **** 
  77:Src/commandParser.c **** 		sweep(atof(args[0]), atof(args[1]), atof(args[2]), atof(args[3]), atof(args[4]), max2871Status, t
  78:Src/commandParser.c **** 	}
  79:Src/commandParser.c **** 
  80:Src/commandParser.c **** 	else if (strncmp("setMaxPower", command, 11) == 0)
 202              		.loc 1 80 0
 203 00d8 0B22     		movs	r2, #11
 204 00da 22A9     		add	r1, sp, #136
 205 00dc AB48     		ldr	r0, .L42+8
 206 00de FFF7FEFF 		bl	strncmp
 207              	.LVL23:
 208 00e2 0028     		cmp	r0, #0
 209 00e4 00F0D480 		beq	.L35
  81:Src/commandParser.c **** 	{
  82:Src/commandParser.c **** 		max2871SetPower(atoi(args[0]), max2871Status);
  83:Src/commandParser.c **** 		int8_t powerArray[4] = {-4, -1, 2, 5};
  84:Src/commandParser.c **** 		sprintf((char *)txStr, "> Power set to: %d dBm\n", powerArray[max2871Status->rfPower]);
  85:Src/commandParser.c **** 		printUSB(txStr);
  86:Src/commandParser.c **** 	}
  87:Src/commandParser.c **** 
  88:Src/commandParser.c **** 	else if (strncmp("setAttenuation", command, 14) == 0)
 210              		.loc 1 88 0
 211 00e8 0E22     		movs	r2, #14
 212 00ea 22A9     		add	r1, sp, #136
 213 00ec A848     		ldr	r0, .L42+12
 214 00ee FFF7FEFF 		bl	strncmp
 215              	.LVL24:
 216 00f2 0028     		cmp	r0, #0
 217 00f4 00F0E380 		beq	.L36
  89:Src/commandParser.c **** 	{
  90:Src/commandParser.c **** 		setAttenuation(atof(args[0]), txStatus);
  91:Src/commandParser.c **** 		sprintf((char *)txStr, "> Attenuation set to: %0.2f dB\n", txStatus->attenuation);
  92:Src/commandParser.c **** 		printUSB(txStr);
  93:Src/commandParser.c **** 	}
  94:Src/commandParser.c **** 
  95:Src/commandParser.c **** 	else if (strncmp("enableRF", command, 8) == 0)
 218              		.loc 1 95 0
 219 00f8 0822     		movs	r2, #8
 220 00fa 22A9     		add	r1, sp, #136
 221 00fc A548     		ldr	r0, .L42+16
 222 00fe FFF7FEFF 		bl	strncmp
 223              	.LVL25:
 224 0102 0028     		cmp	r0, #0
 225 0104 00F0F280 		beq	.L37
  96:Src/commandParser.c **** 	{
  97:Src/commandParser.c **** 		max2871RFEnable(max2871Status);
  98:Src/commandParser.c **** 		printUSB("> RF Enabled \r\n");
  99:Src/commandParser.c **** 	}
 100:Src/commandParser.c **** 
 101:Src/commandParser.c **** 	else if (strncmp("disableRF", command, 8) == 0)
 226              		.loc 1 101 0
 227 0108 0822     		movs	r2, #8
 228 010a 22A9     		add	r1, sp, #136
 229 010c A248     		ldr	r0, .L42+20
 230 010e FFF7FEFF 		bl	strncmp
 231              	.LVL26:
ARM GAS  /tmp/ccjwnJoa.s 			page 7


 232 0112 0028     		cmp	r0, #0
 233 0114 00F0F180 		beq	.L38
 102:Src/commandParser.c **** 	{
 103:Src/commandParser.c **** 		max2871RFDisable(max2871Status);
 104:Src/commandParser.c **** 		printUSB("> RF Disabled \r\n");
 105:Src/commandParser.c **** 	}
 106:Src/commandParser.c **** 
 107:Src/commandParser.c **** 	else if (strncmp("enablePA", command, 8) == 0)
 234              		.loc 1 107 0
 235 0118 0822     		movs	r2, #8
 236 011a 22A9     		add	r1, sp, #136
 237 011c 9F48     		ldr	r0, .L42+24
 238 011e FFF7FEFF 		bl	strncmp
 239              	.LVL27:
 240 0122 0028     		cmp	r0, #0
 241 0124 00F0F080 		beq	.L39
 108:Src/commandParser.c **** 	{
 109:Src/commandParser.c **** 		enablePA(txStatus);
 110:Src/commandParser.c **** 		printUSB("> PA Enabled \r\n");
 111:Src/commandParser.c **** 	}
 112:Src/commandParser.c **** 
 113:Src/commandParser.c **** 	else if (strncmp("disablePA", command, 8) == 0)
 242              		.loc 1 113 0
 243 0128 0822     		movs	r2, #8
 244 012a 22A9     		add	r1, sp, #136
 245 012c 9C48     		ldr	r0, .L42+28
 246 012e FFF7FEFF 		bl	strncmp
 247              	.LVL28:
 248 0132 0028     		cmp	r0, #0
 249 0134 00F0EF80 		beq	.L40
 114:Src/commandParser.c **** 	{
 115:Src/commandParser.c **** 		disablePA(txStatus);
 116:Src/commandParser.c **** 		printUSB("> PA Disabled \r\n");
 117:Src/commandParser.c **** 	}
 118:Src/commandParser.c **** 
 119:Src/commandParser.c **** 	else if (strncmp("adc", command, 3) == 0)
 250              		.loc 1 119 0
 251 0138 0322     		movs	r2, #3
 252 013a 22A9     		add	r1, sp, #136
 253 013c 9948     		ldr	r0, .L42+32
 254 013e FFF7FEFF 		bl	strncmp
 255              	.LVL29:
 256 0142 0028     		cmp	r0, #0
 257 0144 00F0EE80 		beq	.L41
 120:Src/commandParser.c **** 	{
 121:Src/commandParser.c **** 		readAD8319(txStatus);
 122:Src/commandParser.c **** 
 123:Src/commandParser.c **** 		sprintf((char *)txStr, "> Measured Voltage= %0.2f V\n", readAD8319(txStatus));
 124:Src/commandParser.c **** 		printUSB(txStr);
 125:Src/commandParser.c **** 
 126:Src/commandParser.c **** 		sprintf((char *)txStr, "> Output Power at SMA = %0.2f dBm\n", txStatus->measOutputPower);
 127:Src/commandParser.c **** 		printUSB(txStr);
 128:Src/commandParser.c **** 	}
 129:Src/commandParser.c **** 
 130:Src/commandParser.c **** 	else if (strncmp("status", command, 6) == 0)
 258              		.loc 1 130 0
 259 0148 0622     		movs	r2, #6
ARM GAS  /tmp/ccjwnJoa.s 			page 8


 260 014a 22A9     		add	r1, sp, #136
 261 014c 9648     		ldr	r0, .L42+36
 262 014e FFF7FEFF 		bl	strncmp
 263              	.LVL30:
 264 0152 0028     		cmp	r0, #0
 265 0154 40F00B81 		bne	.L23
 131:Src/commandParser.c **** 	{
 132:Src/commandParser.c **** 		if (strncmp("verbose", args[0], 7) == 0)
 266              		.loc 1 132 0
 267 0158 0722     		movs	r2, #7
 268 015a 0AA9     		add	r1, sp, #40
 269 015c 9348     		ldr	r0, .L42+40
 270 015e FFF7FEFF 		bl	strncmp
 271              	.LVL31:
 272 0162 0028     		cmp	r0, #0
 273 0164 40F0FE80 		bne	.L24
 133:Src/commandParser.c **** 		{
 134:Src/commandParser.c **** 			args[0][0] = (int32_t) "";
 274              		.loc 1 134 0
 275 0168 914B     		ldr	r3, .L42+44
 276 016a 8DF82830 		strb	r3, [sp, #40]
 135:Src/commandParser.c **** 			max2871PrintStatus(VERBOSE,max2871Status);
 277              		.loc 1 135 0
 278 016e 5946     		mov	r1, fp
 279 0170 0120     		movs	r0, #1
 280 0172 FFF7FEFF 		bl	max2871PrintStatus
 281              	.LVL32:
 282              	.L25:
 136:Src/commandParser.c **** 		}
 137:Src/commandParser.c **** 		else
 138:Src/commandParser.c **** 			max2871PrintStatus(nVERBOSE,max2871Status);
 139:Src/commandParser.c **** 
 140:Src/commandParser.c **** 		txChainPrintStatus(txStatus);
 283              		.loc 1 140 0
 284 0176 5046     		mov	r0, r10
 285 0178 FFF7FEFF 		bl	txChainPrintStatus
 286              	.LVL33:
 287 017c 2AE0     		b	.L1
 288              	.L33:
  66:Src/commandParser.c **** 
 289              		.loc 1 66 0
 290 017e 0AA8     		add	r0, sp, #40
 291 0180 FFF7FEFF 		bl	atof
 292              	.LVL34:
 293 0184 0646     		mov	r6, r0
 294 0186 0F46     		mov	r7, r1
 295 0188 0EA8     		add	r0, sp, #56
 296 018a FFF7FEFF 		bl	atof
 297              	.LVL35:
 298 018e FFF7FEFF 		bl	__aeabi_d2f
 299              	.LVL36:
 300 0192 0446     		mov	r4, r0
 301 0194 3046     		mov	r0, r6
 302 0196 3946     		mov	r1, r7
 303 0198 FFF7FEFF 		bl	__aeabi_d2f
 304              	.LVL37:
 305 019c 5346     		mov	r3, r10
ARM GAS  /tmp/ccjwnJoa.s 			page 9


 306 019e 5A46     		mov	r2, fp
 307 01a0 2146     		mov	r1, r4
 308 01a2 FFF7FEFF 		bl	sigGen
 309              	.LVL38:
  68:Src/commandParser.c **** 		printUSB(txStr);
 310              		.loc 1 68 0
 311 01a6 DAF80050 		ldr	r5, [r10]	@ float
 312              	.LVL39:
 313 01aa DBF80400 		ldr	r0, [fp, #4]	@ float
 314 01ae FFF7FEFF 		bl	__aeabi_f2d
 315              	.LVL40:
 316 01b2 0646     		mov	r6, r0
 317 01b4 0F46     		mov	r7, r1
 318 01b6 7F4C     		ldr	r4, .L42+48
 319 01b8 2846     		mov	r0, r5
 320 01ba FFF7FEFF 		bl	__aeabi_f2d
 321              	.LVL41:
 322 01be CDE90001 		strd	r0, [sp]
 323 01c2 3246     		mov	r2, r6
 324 01c4 3B46     		mov	r3, r7
 325 01c6 7C49     		ldr	r1, .L42+52
 326 01c8 2046     		mov	r0, r4
 327 01ca FFF7FEFF 		bl	sprintf
 328              	.LVL42:
  69:Src/commandParser.c **** 	}
 329              		.loc 1 69 0
 330 01ce 2046     		mov	r0, r4
 331 01d0 FFF7FEFF 		bl	printUSB
 332              	.LVL43:
 333              	.L1:
 141:Src/commandParser.c **** 	}
 142:Src/commandParser.c **** 
 143:Src/commandParser.c **** 	else if (strncmp("WHOAMI", command, 5) == 0)
 144:Src/commandParser.c **** 	{
 145:Src/commandParser.c **** 		printUSB("> Josh's Signal Generator!\r\n");
 146:Src/commandParser.c **** 	}
 147:Src/commandParser.c **** 
 148:Src/commandParser.c **** 	else if ((strncmp("ls", command,2) == 0) || (strncmp("help", command, 4) == 0))
 149:Src/commandParser.c **** 	{
 150:Src/commandParser.c **** 		printUSB((char *)"> --  Available Commands  --\r\n");
 151:Src/commandParser.c **** 		printUSB((char *)"> sigGen(frequency, power)\r\n");
 152:Src/commandParser.c **** 		printUSB((char *)"> sweep(startFreq, stopFreq, numSteps, power, time)\r\n");
 153:Src/commandParser.c **** 		printUSB((char *)"> status(verbose)\r\n");
 154:Src/commandParser.c **** 		printUSB((char *)"> WHOAMI\r\n");
 155:Src/commandParser.c **** 		printUSB((char *)"> Use the below at your own risk:\r\n");
 156:Src/commandParser.c **** 		printUSB((char *)"> setMaxPower(power(dBm))\r\n");
 157:Src/commandParser.c **** 		printUSB((char *)"> setAttenuation(atten(dB))\r\n");
 158:Src/commandParser.c **** 		printUSB((char *)"> enableRF\r\n");
 159:Src/commandParser.c **** 		printUSB((char *)"> disableRF\r\n");
 160:Src/commandParser.c **** 		printUSB((char *)"> enablePA\r\n");
 161:Src/commandParser.c **** 		printUSB((char *)"> disablePA\r\n");
 162:Src/commandParser.c **** 	}
 163:Src/commandParser.c **** 	else
 164:Src/commandParser.c **** 	{
 165:Src/commandParser.c **** 		printUSB("> Not found, try again\r\n");
 166:Src/commandParser.c **** 		sprintf((char *)txStr, "> %s\n", command);
 167:Src/commandParser.c **** 		printUSB(txStr);
ARM GAS  /tmp/ccjwnJoa.s 			page 10


 168:Src/commandParser.c **** 
 169:Src/commandParser.c **** 	}
 170:Src/commandParser.c **** 
 171:Src/commandParser.c **** }
 334              		.loc 1 171 0
 335 01d4 4BB0     		add	sp, sp, #300
 336              	.LCFI2:
 337              		.cfi_remember_state
 338              		.cfi_def_cfa_offset 36
 339              		@ sp needed
 340 01d6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 341              	.LVL44:
 342              	.L34:
 343              	.LCFI3:
 344              		.cfi_restore_state
  74:Src/commandParser.c **** 		printUSB(txStr);
 345              		.loc 1 74 0
 346 01da 0AA8     		add	r0, sp, #40
 347 01dc FFF7FEFF 		bl	atof
 348              	.LVL45:
 349 01e0 0646     		mov	r6, r0
 350 01e2 0F46     		mov	r7, r1
 351 01e4 0EA8     		add	r0, sp, #56
 352 01e6 FFF7FEFF 		bl	atof
 353              	.LVL46:
 354 01ea 0446     		mov	r4, r0
 355 01ec 0D46     		mov	r5, r1
 356              	.LVL47:
 357 01ee 12A8     		add	r0, sp, #72
 358 01f0 FFF7FEFF 		bl	atof
 359              	.LVL48:
 360 01f4 DFF8BC81 		ldr	r8, .L42+48
 361 01f8 CDE90201 		strd	r0, [sp, #8]
 362 01fc CDE90045 		strd	r4, [sp]
 363 0200 3246     		mov	r2, r6
 364 0202 3B46     		mov	r3, r7
 365 0204 6D49     		ldr	r1, .L42+56
 366 0206 4046     		mov	r0, r8
 367 0208 FFF7FEFF 		bl	sprintf
 368              	.LVL49:
  75:Src/commandParser.c **** 
 369              		.loc 1 75 0
 370 020c 4046     		mov	r0, r8
 371 020e FFF7FEFF 		bl	printUSB
 372              	.LVL50:
  77:Src/commandParser.c **** 	}
 373              		.loc 1 77 0
 374 0212 0AA8     		add	r0, sp, #40
 375 0214 FFF7FEFF 		bl	atof
 376              	.LVL51:
 377 0218 CDE90401 		strd	r0, [sp, #16]
 378 021c 0EAB     		add	r3, sp, #56
 379 021e 1846     		mov	r0, r3
 380 0220 FFF7FEFF 		bl	atof
 381              	.LVL52:
 382 0224 0446     		mov	r4, r0
 383 0226 0D46     		mov	r5, r1
ARM GAS  /tmp/ccjwnJoa.s 			page 11


 384 0228 12AB     		add	r3, sp, #72
 385 022a 1846     		mov	r0, r3
 386 022c FFF7FEFF 		bl	atof
 387              	.LVL53:
 388 0230 0646     		mov	r6, r0
 389 0232 0F46     		mov	r7, r1
 390 0234 16A8     		add	r0, sp, #88
 391 0236 FFF7FEFF 		bl	atof
 392              	.LVL54:
 393 023a 8046     		mov	r8, r0
 394 023c 8946     		mov	r9, r1
 395 023e 1AA8     		add	r0, sp, #104
 396 0240 FFF7FEFF 		bl	atof
 397              	.LVL55:
 398 0244 CDE90601 		strd	r0, [sp, #24]
 399 0248 4046     		mov	r0, r8
 400 024a 4946     		mov	r1, r9
 401 024c FFF7FEFF 		bl	__aeabi_d2f
 402              	.LVL56:
 403 0250 8046     		mov	r8, r0
 404 0252 3046     		mov	r0, r6
 405 0254 3946     		mov	r1, r7
 406 0256 FFF7FEFF 		bl	__aeabi_d2f
 407              	.LVL57:
 408 025a 0646     		mov	r6, r0
 409 025c 2046     		mov	r0, r4
 410 025e 2946     		mov	r1, r5
 411 0260 FFF7FEFF 		bl	__aeabi_d2f
 412              	.LVL58:
 413 0264 0446     		mov	r4, r0
 414 0266 DDE90401 		ldrd	r0, [sp, #16]
 415 026a FFF7FEFF 		bl	__aeabi_d2f
 416              	.LVL59:
 417 026e 0546     		mov	r5, r0
 418 0270 CDF808A0 		str	r10, [sp, #8]
 419 0274 CDF804B0 		str	fp, [sp, #4]
 420 0278 DDE90601 		ldrd	r0, [sp, #24]
 421 027c FFF7FEFF 		bl	__aeabi_d2f
 422              	.LVL60:
 423 0280 0090     		str	r0, [sp]	@ float
 424 0282 4346     		mov	r3, r8
 425 0284 3246     		mov	r2, r6
 426 0286 2146     		mov	r1, r4
 427 0288 2846     		mov	r0, r5
 428 028a FFF7FEFF 		bl	sweep
 429              	.LVL61:
 430 028e A1E7     		b	.L1
 431              	.LVL62:
 432              	.L35:
 433              	.LBB5:
  82:Src/commandParser.c **** 		int8_t powerArray[4] = {-4, -1, 2, 5};
 434              		.loc 1 82 0
 435 0290 0AA8     		add	r0, sp, #40
 436 0292 FFF7FEFF 		bl	atoi
 437              	.LVL63:
 438 0296 5946     		mov	r1, fp
 439 0298 40B2     		sxtb	r0, r0
ARM GAS  /tmp/ccjwnJoa.s 			page 12


 440 029a FFF7FEFF 		bl	max2871SetPower
 441              	.LVL64:
  83:Src/commandParser.c **** 		sprintf((char *)txStr, "> Power set to: %d dBm\n", powerArray[max2871Status->rfPower]);
 442              		.loc 1 83 0
 443 029e 09AB     		add	r3, sp, #36
 444 02a0 474A     		ldr	r2, .L42+60
 445 02a2 1268     		ldr	r2, [r2]
 446 02a4 0992     		str	r2, [sp, #36]
  84:Src/commandParser.c **** 		printUSB(txStr);
 447              		.loc 1 84 0
 448 02a6 9BF80A20 		ldrb	r2, [fp, #10]	@ zero_extendqisi2
 449 02aa 424C     		ldr	r4, .L42+48
 450 02ac 9A56     		ldrsb	r2, [r3, r2]
 451 02ae 4549     		ldr	r1, .L42+64
 452 02b0 2046     		mov	r0, r4
 453 02b2 FFF7FEFF 		bl	sprintf
 454              	.LVL65:
  85:Src/commandParser.c **** 	}
 455              		.loc 1 85 0
 456 02b6 2046     		mov	r0, r4
 457 02b8 FFF7FEFF 		bl	printUSB
 458              	.LVL66:
 459              	.LBE5:
 460 02bc 8AE7     		b	.L1
 461              	.L36:
  90:Src/commandParser.c **** 		sprintf((char *)txStr, "> Attenuation set to: %0.2f dB\n", txStatus->attenuation);
 462              		.loc 1 90 0
 463 02be 0AA8     		add	r0, sp, #40
 464 02c0 FFF7FEFF 		bl	atof
 465              	.LVL67:
 466 02c4 FFF7FEFF 		bl	__aeabi_d2f
 467              	.LVL68:
 468 02c8 5146     		mov	r1, r10
 469 02ca FFF7FEFF 		bl	setAttenuation
 470              	.LVL69:
  91:Src/commandParser.c **** 		printUSB(txStr);
 471              		.loc 1 91 0
 472 02ce DAF80800 		ldr	r0, [r10, #8]	@ float
 473 02d2 FFF7FEFF 		bl	__aeabi_f2d
 474              	.LVL70:
 475 02d6 374C     		ldr	r4, .L42+48
 476 02d8 0246     		mov	r2, r0
 477 02da 0B46     		mov	r3, r1
 478 02dc 3A49     		ldr	r1, .L42+68
 479 02de 2046     		mov	r0, r4
 480 02e0 FFF7FEFF 		bl	sprintf
 481              	.LVL71:
  92:Src/commandParser.c **** 	}
 482              		.loc 1 92 0
 483 02e4 2046     		mov	r0, r4
 484 02e6 FFF7FEFF 		bl	printUSB
 485              	.LVL72:
 486 02ea 73E7     		b	.L1
 487              	.L37:
  97:Src/commandParser.c **** 		printUSB("> RF Enabled \r\n");
 488              		.loc 1 97 0
 489 02ec 5846     		mov	r0, fp
ARM GAS  /tmp/ccjwnJoa.s 			page 13


 490 02ee FFF7FEFF 		bl	max2871RFEnable
 491              	.LVL73:
  98:Src/commandParser.c **** 	}
 492              		.loc 1 98 0
 493 02f2 3648     		ldr	r0, .L42+72
 494 02f4 FFF7FEFF 		bl	printUSB
 495              	.LVL74:
 496 02f8 6CE7     		b	.L1
 497              	.L38:
 103:Src/commandParser.c **** 		printUSB("> RF Disabled \r\n");
 498              		.loc 1 103 0
 499 02fa 5846     		mov	r0, fp
 500 02fc FFF7FEFF 		bl	max2871RFDisable
 501              	.LVL75:
 104:Src/commandParser.c **** 	}
 502              		.loc 1 104 0
 503 0300 3348     		ldr	r0, .L42+76
 504 0302 FFF7FEFF 		bl	printUSB
 505              	.LVL76:
 506 0306 65E7     		b	.L1
 507              	.L39:
 109:Src/commandParser.c **** 		printUSB("> PA Enabled \r\n");
 508              		.loc 1 109 0
 509 0308 5046     		mov	r0, r10
 510 030a FFF7FEFF 		bl	enablePA
 511              	.LVL77:
 110:Src/commandParser.c **** 	}
 512              		.loc 1 110 0
 513 030e 3148     		ldr	r0, .L42+80
 514 0310 FFF7FEFF 		bl	printUSB
 515              	.LVL78:
 516 0314 5EE7     		b	.L1
 517              	.L40:
 115:Src/commandParser.c **** 		printUSB("> PA Disabled \r\n");
 518              		.loc 1 115 0
 519 0316 5046     		mov	r0, r10
 520 0318 FFF7FEFF 		bl	disablePA
 521              	.LVL79:
 116:Src/commandParser.c **** 	}
 522              		.loc 1 116 0
 523 031c 2E48     		ldr	r0, .L42+84
 524 031e FFF7FEFF 		bl	printUSB
 525              	.LVL80:
 526 0322 57E7     		b	.L1
 527              	.L41:
 121:Src/commandParser.c **** 
 528              		.loc 1 121 0
 529 0324 5046     		mov	r0, r10
 530 0326 FFF7FEFF 		bl	readAD8319
 531              	.LVL81:
 123:Src/commandParser.c **** 		printUSB(txStr);
 532              		.loc 1 123 0
 533 032a 5046     		mov	r0, r10
 534 032c FFF7FEFF 		bl	readAD8319
 535              	.LVL82:
 536 0330 FFF7FEFF 		bl	__aeabi_f2d
 537              	.LVL83:
ARM GAS  /tmp/ccjwnJoa.s 			page 14


 538 0334 1F4C     		ldr	r4, .L42+48
 539 0336 0246     		mov	r2, r0
 540 0338 0B46     		mov	r3, r1
 541 033a 2849     		ldr	r1, .L42+88
 542 033c 2046     		mov	r0, r4
 543 033e FFF7FEFF 		bl	sprintf
 544              	.LVL84:
 124:Src/commandParser.c **** 
 545              		.loc 1 124 0
 546 0342 2046     		mov	r0, r4
 547 0344 FFF7FEFF 		bl	printUSB
 548              	.LVL85:
 126:Src/commandParser.c **** 		printUSB(txStr);
 549              		.loc 1 126 0
 550 0348 DAF80000 		ldr	r0, [r10]	@ float
 551 034c FFF7FEFF 		bl	__aeabi_f2d
 552              	.LVL86:
 553 0350 0246     		mov	r2, r0
 554 0352 0B46     		mov	r3, r1
 555 0354 2249     		ldr	r1, .L42+92
 556 0356 2046     		mov	r0, r4
 557 0358 FFF7FEFF 		bl	sprintf
 558              	.LVL87:
 127:Src/commandParser.c **** 	}
 559              		.loc 1 127 0
 560 035c 2046     		mov	r0, r4
 561 035e FFF7FEFF 		bl	printUSB
 562              	.LVL88:
 563 0362 37E7     		b	.L1
 564              	.L24:
 138:Src/commandParser.c **** 
 565              		.loc 1 138 0
 566 0364 5946     		mov	r1, fp
 567 0366 0020     		movs	r0, #0
 568 0368 FFF7FEFF 		bl	max2871PrintStatus
 569              	.LVL89:
 570 036c 03E7     		b	.L25
 571              	.L23:
 143:Src/commandParser.c **** 	{
 572              		.loc 1 143 0
 573 036e 0522     		movs	r2, #5
 574 0370 22A9     		add	r1, sp, #136
 575 0372 1C48     		ldr	r0, .L42+96
 576 0374 FFF7FEFF 		bl	strncmp
 577              	.LVL90:
 578 0378 C0BB     		cbnz	r0, .L26
 145:Src/commandParser.c **** 	}
 579              		.loc 1 145 0
 580 037a 1B48     		ldr	r0, .L42+100
 581 037c FFF7FEFF 		bl	printUSB
 582              	.LVL91:
 583 0380 28E7     		b	.L1
 584              	.L43:
 585 0382 00BF     		.align	2
 586              	.L42:
 587 0384 00000000 		.word	.LC1
 588 0388 48000000 		.word	.LC3
ARM GAS  /tmp/ccjwnJoa.s 			page 15


 589 038c 94000000 		.word	.LC5
 590 0390 B8000000 		.word	.LC7
 591 0394 E8000000 		.word	.LC9
 592 0398 04010000 		.word	.LC11
 593 039c 24010000 		.word	.LC13
 594 03a0 40010000 		.word	.LC15
 595 03a4 60010000 		.word	.LC17
 596 03a8 A8010000 		.word	.LC20
 597 03ac B0010000 		.word	.LC21
 598 03b0 B8010000 		.word	.LC22
 599 03b4 00000000 		.word	.LANCHOR0
 600 03b8 08000000 		.word	.LC2
 601 03bc 50000000 		.word	.LC4
 602 03c0 00000000 		.word	.LANCHOR1
 603 03c4 A0000000 		.word	.LC6
 604 03c8 C8000000 		.word	.LC8
 605 03cc F4000000 		.word	.LC10
 606 03d0 10010000 		.word	.LC12
 607 03d4 30010000 		.word	.LC14
 608 03d8 4C010000 		.word	.LC16
 609 03dc 64010000 		.word	.LC18
 610 03e0 84010000 		.word	.LC19
 611 03e4 BC010000 		.word	.LC23
 612 03e8 C4010000 		.word	.LC24
 613              	.L26:
 148:Src/commandParser.c **** 	{
 614              		.loc 1 148 0
 615 03ec 0222     		movs	r2, #2
 616 03ee 22A9     		add	r1, sp, #136
 617 03f0 1D48     		ldr	r0, .L44
 618 03f2 FFF7FEFF 		bl	strncmp
 619              	.LVL92:
 620 03f6 28B1     		cbz	r0, .L27
 148:Src/commandParser.c **** 	{
 621              		.loc 1 148 0 is_stmt 0 discriminator 1
 622 03f8 0422     		movs	r2, #4
 623 03fa 22A9     		add	r1, sp, #136
 624 03fc 1B48     		ldr	r0, .L44+4
 625 03fe FFF7FEFF 		bl	strncmp
 626              	.LVL93:
 627 0402 20BB     		cbnz	r0, .L28
 628              	.L27:
 150:Src/commandParser.c **** 		printUSB((char *)"> sigGen(frequency, power)\r\n");
 629              		.loc 1 150 0 is_stmt 1
 630 0404 1A48     		ldr	r0, .L44+8
 631 0406 FFF7FEFF 		bl	printUSB
 632              	.LVL94:
 151:Src/commandParser.c **** 		printUSB((char *)"> sweep(startFreq, stopFreq, numSteps, power, time)\r\n");
 633              		.loc 1 151 0
 634 040a 1A48     		ldr	r0, .L44+12
 635 040c FFF7FEFF 		bl	printUSB
 636              	.LVL95:
 152:Src/commandParser.c **** 		printUSB((char *)"> status(verbose)\r\n");
 637              		.loc 1 152 0
 638 0410 1948     		ldr	r0, .L44+16
 639 0412 FFF7FEFF 		bl	printUSB
 640              	.LVL96:
ARM GAS  /tmp/ccjwnJoa.s 			page 16


 153:Src/commandParser.c **** 		printUSB((char *)"> WHOAMI\r\n");
 641              		.loc 1 153 0
 642 0416 1948     		ldr	r0, .L44+20
 643 0418 FFF7FEFF 		bl	printUSB
 644              	.LVL97:
 154:Src/commandParser.c **** 		printUSB((char *)"> Use the below at your own risk:\r\n");
 645              		.loc 1 154 0
 646 041c 1848     		ldr	r0, .L44+24
 647 041e FFF7FEFF 		bl	printUSB
 648              	.LVL98:
 155:Src/commandParser.c **** 		printUSB((char *)"> setMaxPower(power(dBm))\r\n");
 649              		.loc 1 155 0
 650 0422 1848     		ldr	r0, .L44+28
 651 0424 FFF7FEFF 		bl	printUSB
 652              	.LVL99:
 156:Src/commandParser.c **** 		printUSB((char *)"> setAttenuation(atten(dB))\r\n");
 653              		.loc 1 156 0
 654 0428 1748     		ldr	r0, .L44+32
 655 042a FFF7FEFF 		bl	printUSB
 656              	.LVL100:
 157:Src/commandParser.c **** 		printUSB((char *)"> enableRF\r\n");
 657              		.loc 1 157 0
 658 042e 1748     		ldr	r0, .L44+36
 659 0430 FFF7FEFF 		bl	printUSB
 660              	.LVL101:
 158:Src/commandParser.c **** 		printUSB((char *)"> disableRF\r\n");
 661              		.loc 1 158 0
 662 0434 1648     		ldr	r0, .L44+40
 663 0436 FFF7FEFF 		bl	printUSB
 664              	.LVL102:
 159:Src/commandParser.c **** 		printUSB((char *)"> enablePA\r\n");
 665              		.loc 1 159 0
 666 043a 1648     		ldr	r0, .L44+44
 667 043c FFF7FEFF 		bl	printUSB
 668              	.LVL103:
 160:Src/commandParser.c **** 		printUSB((char *)"> disablePA\r\n");
 669              		.loc 1 160 0
 670 0440 1548     		ldr	r0, .L44+48
 671 0442 FFF7FEFF 		bl	printUSB
 672              	.LVL104:
 161:Src/commandParser.c **** 	}
 673              		.loc 1 161 0
 674 0446 1548     		ldr	r0, .L44+52
 675 0448 FFF7FEFF 		bl	printUSB
 676              	.LVL105:
 677 044c C2E6     		b	.L1
 678              	.L28:
 165:Src/commandParser.c **** 		sprintf((char *)txStr, "> %s\n", command);
 679              		.loc 1 165 0
 680 044e 1448     		ldr	r0, .L44+56
 681 0450 FFF7FEFF 		bl	printUSB
 682              	.LVL106:
 166:Src/commandParser.c **** 		printUSB(txStr);
 683              		.loc 1 166 0
 684 0454 134C     		ldr	r4, .L44+60
 685 0456 22AA     		add	r2, sp, #136
 686 0458 1349     		ldr	r1, .L44+64
ARM GAS  /tmp/ccjwnJoa.s 			page 17


 687 045a 2046     		mov	r0, r4
 688 045c FFF7FEFF 		bl	sprintf
 689              	.LVL107:
 167:Src/commandParser.c **** 
 690              		.loc 1 167 0
 691 0460 2046     		mov	r0, r4
 692 0462 FFF7FEFF 		bl	printUSB
 693              	.LVL108:
 694              		.loc 1 171 0
 695 0466 B5E6     		b	.L1
 696              	.L45:
 697              		.align	2
 698              	.L44:
 699 0468 E4010000 		.word	.LC25
 700 046c E8010000 		.word	.LC26
 701 0470 F0010000 		.word	.LC27
 702 0474 10020000 		.word	.LC28
 703 0478 30020000 		.word	.LC29
 704 047c 68020000 		.word	.LC30
 705 0480 7C020000 		.word	.LC31
 706 0484 88020000 		.word	.LC32
 707 0488 AC020000 		.word	.LC33
 708 048c C8020000 		.word	.LC34
 709 0490 E8020000 		.word	.LC35
 710 0494 F8020000 		.word	.LC36
 711 0498 08030000 		.word	.LC37
 712 049c 18030000 		.word	.LC38
 713 04a0 28030000 		.word	.LC39
 714 04a4 00000000 		.word	.LANCHOR0
 715 04a8 44030000 		.word	.LC40
 716              		.cfi_endproc
 717              	.LFE69:
 719              		.global	txStr
 720              		.section	.rodata
 721              		.align	2
 722              		.set	.LANCHOR1,. + 0
 723              	.LC0:
 724 0000 FC       		.byte	-4
 725 0001 FF       		.byte	-1
 726 0002 02       		.byte	2
 727 0003 05       		.byte	5
 728              		.section	.bss.txStr,"aw",%nobits
 729              		.align	2
 730              		.set	.LANCHOR0,. + 0
 733              	txStr:
 734 0000 00000000 		.space	128
 734      00000000 
 734      00000000 
 734      00000000 
 734      00000000 
 735              		.section	.rodata.commandParser.str1.4,"aMS",%progbits,1
 736              		.align	2
 737              	.LC1:
 738 0000 73696747 		.ascii	"sigGen\000"
 738      656E00
 739 0007 00       		.space	1
 740              	.LC2:
ARM GAS  /tmp/ccjwnJoa.s 			page 18


 741 0008 3E205369 		.ascii	"> Signal Generator: Frequency = %0.2f MHz, Power = "
 741      676E616C 
 741      2047656E 
 741      65726174 
 741      6F723A20 
 742 003b 25302E32 		.ascii	"%0.2f dBm\012\000"
 742      66206442 
 742      6D0A00
 743 0046 0000     		.space	2
 744              	.LC3:
 745 0048 73776565 		.ascii	"sweep\000"
 745      7000
 746 004e 0000     		.space	2
 747              	.LC4:
 748 0050 3E205377 		.ascii	"> Sweep: Start = %0.2f MHz, fFinish = %0.2f dBm Pow"
 748      6565703A 
 748      20537461 
 748      7274203D 
 748      2025302E 
 749 0083 6572203D 		.ascii	"er = %0.2f dBm\012\000"
 749      2025302E 
 749      32662064 
 749      426D0A00 
 750 0093 00       		.space	1
 751              	.LC5:
 752 0094 7365744D 		.ascii	"setMaxPower\000"
 752      6178506F 
 752      77657200 
 753              	.LC6:
 754 00a0 3E20506F 		.ascii	"> Power set to: %d dBm\012\000"
 754      77657220 
 754      73657420 
 754      746F3A20 
 754      25642064 
 755              	.LC7:
 756 00b8 73657441 		.ascii	"setAttenuation\000"
 756      7474656E 
 756      75617469 
 756      6F6E00
 757 00c7 00       		.space	1
 758              	.LC8:
 759 00c8 3E204174 		.ascii	"> Attenuation set to: %0.2f dB\012\000"
 759      74656E75 
 759      6174696F 
 759      6E207365 
 759      7420746F 
 760              	.LC9:
 761 00e8 656E6162 		.ascii	"enableRF\000"
 761      6C655246 
 761      00
 762 00f1 000000   		.space	3
 763              	.LC10:
 764 00f4 3E205246 		.ascii	"> RF Enabled \015\012\000"
 764      20456E61 
 764      626C6564 
 764      200D0A00 
 765              	.LC11:
ARM GAS  /tmp/ccjwnJoa.s 			page 19


 766 0104 64697361 		.ascii	"disableRF\000"
 766      626C6552 
 766      4600
 767 010e 0000     		.space	2
 768              	.LC12:
 769 0110 3E205246 		.ascii	"> RF Disabled \015\012\000"
 769      20446973 
 769      61626C65 
 769      64200D0A 
 769      00
 770 0121 000000   		.space	3
 771              	.LC13:
 772 0124 656E6162 		.ascii	"enablePA\000"
 772      6C655041 
 772      00
 773 012d 000000   		.space	3
 774              	.LC14:
 775 0130 3E205041 		.ascii	"> PA Enabled \015\012\000"
 775      20456E61 
 775      626C6564 
 775      200D0A00 
 776              	.LC15:
 777 0140 64697361 		.ascii	"disablePA\000"
 777      626C6550 
 777      4100
 778 014a 0000     		.space	2
 779              	.LC16:
 780 014c 3E205041 		.ascii	"> PA Disabled \015\012\000"
 780      20446973 
 780      61626C65 
 780      64200D0A 
 780      00
 781 015d 000000   		.space	3
 782              	.LC17:
 783 0160 61646300 		.ascii	"adc\000"
 784              	.LC18:
 785 0164 3E204D65 		.ascii	"> Measured Voltage= %0.2f V\012\000"
 785      61737572 
 785      65642056 
 785      6F6C7461 
 785      67653D20 
 786 0181 000000   		.space	3
 787              	.LC19:
 788 0184 3E204F75 		.ascii	"> Output Power at SMA = %0.2f dBm\012\000"
 788      74707574 
 788      20506F77 
 788      65722061 
 788      7420534D 
 789 01a7 00       		.space	1
 790              	.LC20:
 791 01a8 73746174 		.ascii	"status\000"
 791      757300
 792 01af 00       		.space	1
 793              	.LC21:
 794 01b0 76657262 		.ascii	"verbose\000"
 794      6F736500 
 795              	.LC22:
ARM GAS  /tmp/ccjwnJoa.s 			page 20


 796 01b8 00       		.ascii	"\000"
 797 01b9 000000   		.space	3
 798              	.LC23:
 799 01bc 57484F41 		.ascii	"WHOAMI\000"
 799      4D4900
 800 01c3 00       		.space	1
 801              	.LC24:
 802 01c4 3E204A6F 		.ascii	"> Josh's Signal Generator!\015\012\000"
 802      73682773 
 802      20536967 
 802      6E616C20 
 802      47656E65 
 803 01e1 000000   		.space	3
 804              	.LC25:
 805 01e4 6C7300   		.ascii	"ls\000"
 806 01e7 00       		.space	1
 807              	.LC26:
 808 01e8 68656C70 		.ascii	"help\000"
 808      00
 809 01ed 000000   		.space	3
 810              	.LC27:
 811 01f0 3E202D2D 		.ascii	"> --  Available Commands  --\015\012\000"
 811      20204176 
 811      61696C61 
 811      626C6520 
 811      436F6D6D 
 812 020f 00       		.space	1
 813              	.LC28:
 814 0210 3E207369 		.ascii	"> sigGen(frequency, power)\015\012\000"
 814      6747656E 
 814      28667265 
 814      7175656E 
 814      63792C20 
 815 022d 000000   		.space	3
 816              	.LC29:
 817 0230 3E207377 		.ascii	"> sweep(startFreq, stopFreq, numSteps, power, time)"
 817      65657028 
 817      73746172 
 817      74467265 
 817      712C2073 
 818 0263 0D0A00   		.ascii	"\015\012\000"
 819 0266 0000     		.space	2
 820              	.LC30:
 821 0268 3E207374 		.ascii	"> status(verbose)\015\012\000"
 821      61747573 
 821      28766572 
 821      626F7365 
 821      290D0A00 
 822              	.LC31:
 823 027c 3E205748 		.ascii	"> WHOAMI\015\012\000"
 823      4F414D49 
 823      0D0A00
 824 0287 00       		.space	1
 825              	.LC32:
 826 0288 3E205573 		.ascii	"> Use the below at your own risk:\015\012\000"
 826      65207468 
 826      65206265 
ARM GAS  /tmp/ccjwnJoa.s 			page 21


 826      6C6F7720 
 826      61742079 
 827              	.LC33:
 828 02ac 3E207365 		.ascii	"> setMaxPower(power(dBm))\015\012\000"
 828      744D6178 
 828      506F7765 
 828      7228706F 
 828      77657228 
 829              	.LC34:
 830 02c8 3E207365 		.ascii	"> setAttenuation(atten(dB))\015\012\000"
 830      74417474 
 830      656E7561 
 830      74696F6E 
 830      28617474 
 831 02e6 0000     		.space	2
 832              	.LC35:
 833 02e8 3E20656E 		.ascii	"> enableRF\015\012\000"
 833      61626C65 
 833      52460D0A 
 833      00
 834 02f5 000000   		.space	3
 835              	.LC36:
 836 02f8 3E206469 		.ascii	"> disableRF\015\012\000"
 836      7361626C 
 836      6552460D 
 836      0A00
 837 0306 0000     		.space	2
 838              	.LC37:
 839 0308 3E20656E 		.ascii	"> enablePA\015\012\000"
 839      61626C65 
 839      50410D0A 
 839      00
 840 0315 000000   		.space	3
 841              	.LC38:
 842 0318 3E206469 		.ascii	"> disablePA\015\012\000"
 842      7361626C 
 842      6550410D 
 842      0A00
 843 0326 0000     		.space	2
 844              	.LC39:
 845 0328 3E204E6F 		.ascii	"> Not found, try again\015\012\000"
 845      7420666F 
 845      756E642C 
 845      20747279 
 845      20616761 
 846 0341 000000   		.space	3
 847              	.LC40:
 848 0344 3E202573 		.ascii	"> %s\012\000"
 848      0A00
 849              		.text
 850              	.Letext0:
 851              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 852              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 853              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 854              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 855              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 856              		.file 7 "Inc/main.h"
ARM GAS  /tmp/ccjwnJoa.s 			page 22


 857              		.file 8 "Inc/max2871.h"
 858              		.file 9 "Inc/commandParser.h"
 859              		.file 10 "Inc/txChain.h"
 860              		.file 11 "/usr/include/newlib/sys/lock.h"
 861              		.file 12 "/usr/include/newlib/sys/_types.h"
 862              		.file 13 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 863              		.file 14 "/usr/include/newlib/sys/reent.h"
 864              		.file 15 "/usr/include/newlib/stdlib.h"
 865              		.file 16 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 866              		.file 17 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 867              		.file 18 "Inc/usbd_cdc_if.h"
 868              		.file 19 "/usr/include/newlib/stdio.h"
 869              		.file 20 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccjwnJoa.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 commandParser.c
     /tmp/ccjwnJoa.s:18     .text.commandParser:0000000000000000 $t
     /tmp/ccjwnJoa.s:25     .text.commandParser:0000000000000000 commandParser
     /tmp/ccjwnJoa.s:587    .text.commandParser:0000000000000384 $d
     /tmp/ccjwnJoa.s:615    .text.commandParser:00000000000003ec $t
     /tmp/ccjwnJoa.s:699    .text.commandParser:0000000000000468 $d
     /tmp/ccjwnJoa.s:733    .bss.txStr:0000000000000000 txStr
     /tmp/ccjwnJoa.s:721    .rodata:0000000000000000 $d
     /tmp/ccjwnJoa.s:729    .bss.txStr:0000000000000000 $d
     /tmp/ccjwnJoa.s:736    .rodata.commandParser.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_d2f
__aeabi_f2d
scanUSB
strncmp
max2871PrintStatus
txChainPrintStatus
atof
sigGen
sprintf
printUSB
sweep
atoi
max2871SetPower
setAttenuation
max2871RFEnable
max2871RFDisable
enablePA
disablePA
readAD8319
