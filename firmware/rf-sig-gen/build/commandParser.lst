ARM GAS  /tmp/cc7MEjWH.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"commandParser.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_d2f
  16              		.global	__aeabi_f2d
  17              		.section	.text.commandParser,"ax",%progbits
  18              		.align	1
  19              		.global	commandParser
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu softvfp
  25              	commandParser:
  26              	.LFB69:
  27              		.file 1 "Src/commandParser.c"
   1:Src/commandParser.c **** #include "main.h"
   2:Src/commandParser.c **** #include "commandParser.h"
   3:Src/commandParser.c **** #include "usbd_cdc_if.h"
   4:Src/commandParser.c **** #include "dwt_stm32_delay.h"
   5:Src/commandParser.c **** #include <stdio.h>
   6:Src/commandParser.c **** #include <string.h>
   7:Src/commandParser.c **** #include "max2871.h"
   8:Src/commandParser.c **** #include "txChain.h"
   9:Src/commandParser.c **** 
  10:Src/commandParser.c **** char txStr[128] = "";
  11:Src/commandParser.c **** 
  12:Src/commandParser.c **** void commandParser(struct MAX2871Struct *max2871Status, struct txStruct *txStatus)
  13:Src/commandParser.c **** {
  28              		.loc 1 13 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 264
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 28
  36              		.cfi_offset 4, -28
  37              		.cfi_offset 5, -24
  38              		.cfi_offset 6, -20
  39              		.cfi_offset 7, -16
  40              		.cfi_offset 8, -12
  41              		.cfi_offset 9, -8
  42              		.cfi_offset 14, -4
  43 0004 C5B0     		sub	sp, sp, #276
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 304
ARM GAS  /tmp/cc7MEjWH.s 			page 2


  46 0006 0646     		mov	r6, r0
  47 0008 0D46     		mov	r5, r1
  14:Src/commandParser.c **** 	#define BUF_SIZE 128
  15:Src/commandParser.c **** 	#define CMD_SIZE 32
  16:Src/commandParser.c **** 	#define NUM_ARGS 6
  17:Src/commandParser.c **** 
  18:Src/commandParser.c **** 	char usrMsg[BUF_SIZE];
  19:Src/commandParser.c **** 	char command[CMD_SIZE] = "";
  48              		.loc 1 19 0
  49 000a 0024     		movs	r4, #0
  50 000c 1C94     		str	r4, [sp, #112]
  51 000e 1D94     		str	r4, [sp, #116]
  52 0010 1E94     		str	r4, [sp, #120]
  53 0012 1F94     		str	r4, [sp, #124]
  54 0014 2094     		str	r4, [sp, #128]
  55 0016 2194     		str	r4, [sp, #132]
  56 0018 2294     		str	r4, [sp, #136]
  57 001a 2394     		str	r4, [sp, #140]
  58              	.LVL1:
  20:Src/commandParser.c **** 	char args[NUM_ARGS][16];
  21:Src/commandParser.c **** 	uint8_t argNum = 0;
  22:Src/commandParser.c **** 	// Get whatever the user has sent
  23:Src/commandParser.c **** 	scanUSB((uint8_t *) usrMsg, BUF_SIZE);
  59              		.loc 1 23 0
  60 001c 8021     		movs	r1, #128
  61              	.LVL2:
  62 001e 24A8     		add	r0, sp, #144
  63              	.LVL3:
  64 0020 FFF7FEFF 		bl	scanUSB
  65              	.LVL4:
  66              	.LBB2:
  24:Src/commandParser.c **** 
  25:Src/commandParser.c **** 	// Split on delim
  26:Src/commandParser.c **** 	for (uint8_t i = 0; i < FIFO_SIZE; i++)
  67              		.loc 1 26 0
  68 0024 2346     		mov	r3, r4
  69 0026 06E0     		b	.L2
  70              	.LVL5:
  71              	.L3:
  27:Src/commandParser.c **** 	{
  28:Src/commandParser.c **** 		if ((usrMsg[i] == '(') || (usrMsg[i] == ')') || (usrMsg[i] == ','))
  29:Src/commandParser.c **** 			usrMsg[i] = '\0';
  72              		.loc 1 29 0
  73 0028 44AA     		add	r2, sp, #272
  74 002a 1144     		add	r1, r1, r2
  75 002c 0022     		movs	r2, #0
  76 002e 01F8802C 		strb	r2, [r1, #-128]
  77              	.L4:
  26:Src/commandParser.c **** 	{
  78              		.loc 1 26 0 discriminator 2
  79 0032 0133     		adds	r3, r3, #1
  80              	.LVL6:
  81 0034 DBB2     		uxtb	r3, r3
  82              	.LVL7:
  83              	.L2:
  26:Src/commandParser.c **** 	{
  84              		.loc 1 26 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc7MEjWH.s 			page 3


  85 0036 13F0800F 		tst	r3, #128
  86 003a 0CD1     		bne	.L31
  28:Src/commandParser.c **** 			usrMsg[i] = '\0';
  87              		.loc 1 28 0 is_stmt 1
  88 003c 1946     		mov	r1, r3
  89 003e 44AA     		add	r2, sp, #272
  90 0040 1A44     		add	r2, r2, r3
  91 0042 12F8800C 		ldrb	r0, [r2, #-128]	@ zero_extendqisi2
  92 0046 A0F12802 		sub	r2, r0, #40
  93 004a D2B2     		uxtb	r2, r2
  94 004c 012A     		cmp	r2, #1
  95 004e EBD9     		bls	.L3
  28:Src/commandParser.c **** 			usrMsg[i] = '\0';
  96              		.loc 1 28 0 is_stmt 0 discriminator 1
  97 0050 2C28     		cmp	r0, #44
  98 0052 EED1     		bne	.L4
  99 0054 E8E7     		b	.L3
 100              	.L31:
 101              	.LBE2:
  30:Src/commandParser.c **** 	}
  31:Src/commandParser.c **** 
  32:Src/commandParser.c **** 	// Determine the command word
  33:Src/commandParser.c **** 	uint8_t i = 0;
 102              		.loc 1 33 0 is_stmt 1
 103 0056 0023     		movs	r3, #0
 104              	.LVL8:
 105 0058 05E0     		b	.L6
 106              	.LVL9:
 107              	.L7:
  34:Src/commandParser.c **** 	while (usrMsg[i] != '\0')
  35:Src/commandParser.c **** 	{
  36:Src/commandParser.c **** 		command[i] = usrMsg[i];
 108              		.loc 1 36 0
 109 005a 44A9     		add	r1, sp, #272
 110 005c 1944     		add	r1, r1, r3
 111 005e 01F8A02C 		strb	r2, [r1, #-160]
  37:Src/commandParser.c **** 		i++;
 112              		.loc 1 37 0
 113 0062 0133     		adds	r3, r3, #1
 114              	.LVL10:
 115 0064 DBB2     		uxtb	r3, r3
 116              	.LVL11:
 117              	.L6:
  34:Src/commandParser.c **** 	while (usrMsg[i] != '\0')
 118              		.loc 1 34 0
 119 0066 44AA     		add	r2, sp, #272
 120 0068 1A44     		add	r2, r2, r3
 121 006a 12F8802C 		ldrb	r2, [r2, #-128]	@ zero_extendqisi2
 122 006e 002A     		cmp	r2, #0
 123 0070 F3D1     		bne	.L7
  21:Src/commandParser.c **** 	// Get whatever the user has sent
 124              		.loc 1 21 0
 125 0072 0027     		movs	r7, #0
 126 0074 14E0     		b	.L8
 127              	.LVL12:
 128              	.L11:
 129              	.LBB3:
ARM GAS  /tmp/cc7MEjWH.s 			page 4


  38:Src/commandParser.c **** 	}
  39:Src/commandParser.c **** 
  40:Src/commandParser.c **** 	// Find arguments
  41:Src/commandParser.c **** 	while (i < FIFO_SIZE)
  42:Src/commandParser.c **** 	{
  43:Src/commandParser.c **** 		// If null term, (was delim) skip
  44:Src/commandParser.c **** 		if (usrMsg[i] == '\0')
  45:Src/commandParser.c **** 			i++;
  46:Src/commandParser.c **** 		else
  47:Src/commandParser.c **** 		{
  48:Src/commandParser.c **** 			// Otherwise, copy arguments into their own strings
  49:Src/commandParser.c **** 			uint8_t j = 0;
  50:Src/commandParser.c **** 			while (usrMsg[i] != '\0')
  51:Src/commandParser.c **** 			{
  52:Src/commandParser.c **** 				args[argNum][j] = '\0';
 130              		.loc 1 52 0
 131 0076 1446     		mov	r4, r2
  53:Src/commandParser.c **** 				args[argNum][j++] = usrMsg[i];
 132              		.loc 1 53 0
 133 0078 0132     		adds	r2, r2, #1
 134              	.LVL13:
 135 007a D2B2     		uxtb	r2, r2
 136              	.LVL14:
 137 007c 04A9     		add	r1, sp, #16
 138 007e 01EB0711 		add	r1, r1, r7, lsl #4
 139 0082 0855     		strb	r0, [r1, r4]
  54:Src/commandParser.c **** 				i++;
 140              		.loc 1 54 0
 141 0084 0133     		adds	r3, r3, #1
 142              	.LVL15:
 143 0086 DBB2     		uxtb	r3, r3
 144              	.LVL16:
 145              	.L9:
  50:Src/commandParser.c **** 			{
 146              		.loc 1 50 0
 147 0088 44A9     		add	r1, sp, #272
 148 008a 1944     		add	r1, r1, r3
 149 008c 11F8800C 		ldrb	r0, [r1, #-128]	@ zero_extendqisi2
 150 0090 0028     		cmp	r0, #0
 151 0092 F0D1     		bne	.L11
  55:Src/commandParser.c **** 			}
  56:Src/commandParser.c **** 			args[argNum][j] = '\0';
 152              		.loc 1 56 0
 153 0094 04A9     		add	r1, sp, #16
 154 0096 01EB0711 		add	r1, r1, r7, lsl #4
 155 009a 8854     		strb	r0, [r1, r2]
  57:Src/commandParser.c **** 			argNum++;
 156              		.loc 1 57 0
 157 009c 0137     		adds	r7, r7, #1
 158              	.LVL17:
 159 009e FFB2     		uxtb	r7, r7
 160              	.LVL18:
 161              	.L8:
 162              	.LBE3:
  41:Src/commandParser.c **** 	{
 163              		.loc 1 41 0
 164 00a0 13F0800F 		tst	r3, #128
ARM GAS  /tmp/cc7MEjWH.s 			page 5


 165 00a4 09D1     		bne	.L32
  44:Src/commandParser.c **** 			i++;
 166              		.loc 1 44 0
 167 00a6 44AA     		add	r2, sp, #272
 168 00a8 1A44     		add	r2, r2, r3
 169 00aa 12F8802C 		ldrb	r2, [r2, #-128]	@ zero_extendqisi2
 170 00ae 12B9     		cbnz	r2, .L29
  45:Src/commandParser.c **** 		else
 171              		.loc 1 45 0
 172 00b0 0133     		adds	r3, r3, #1
 173              	.LVL19:
 174 00b2 DBB2     		uxtb	r3, r3
 175              	.LVL20:
 176 00b4 F4E7     		b	.L8
 177              	.L29:
 178              	.LBB4:
  49:Src/commandParser.c **** 			while (usrMsg[i] != '\0')
 179              		.loc 1 49 0
 180 00b6 0022     		movs	r2, #0
 181 00b8 E6E7     		b	.L9
 182              	.L32:
 183              	.LBE4:
  58:Src/commandParser.c **** 		}
  59:Src/commandParser.c **** 
  60:Src/commandParser.c **** 	}
  61:Src/commandParser.c **** 
  62:Src/commandParser.c **** 	// Find command based on command word, and call function
  63:Src/commandParser.c **** 
  64:Src/commandParser.c **** 	if (strncmp("sigGen", command, 6) == 0)
 184              		.loc 1 64 0
 185 00ba 0622     		movs	r2, #6
 186 00bc 1CA9     		add	r1, sp, #112
 187 00be AC48     		ldr	r0, .L43
 188 00c0 FFF7FEFF 		bl	strncmp
 189              	.LVL21:
 190 00c4 08B3     		cbz	r0, .L33
  65:Src/commandParser.c **** 	{
  66:Src/commandParser.c **** 		sigGen(atof(args[0]), atof(args[1]), max2871Status, txStatus);
  67:Src/commandParser.c **** 
  68:Src/commandParser.c **** 		sprintf((char *)txStr, "> Signal Generator: Frequency = %0.3f MHz, Power = %0.2f dBm\n", max2871S
  69:Src/commandParser.c **** 		printUSB(txStr);
  70:Src/commandParser.c **** 	}
  71:Src/commandParser.c **** 
  72:Src/commandParser.c **** 	// else if (strncmp("sweep", command, 5) == 0)
  73:Src/commandParser.c **** 	// {
  74:Src/commandParser.c **** 	// 	sprintf((char *)txStr, "> Sweep: Start = %0.2f MHz, fFinish = %0.2f dBm Power = %0.2f dBm\n", 
  75:Src/commandParser.c **** 	// 	printUSB(txStr);
  76:Src/commandParser.c **** 
  77:Src/commandParser.c **** 	// 	sweep(atof(args[0]), atof(args[1]), atof(args[2]), atof(args[3]), atof(args[4]), max2871Status
  78:Src/commandParser.c **** 	// }
  79:Src/commandParser.c **** 
  80:Src/commandParser.c **** 	else if (strncmp("enableRF", command, 8) == 0)
 191              		.loc 1 80 0
 192 00c6 0822     		movs	r2, #8
 193 00c8 1CA9     		add	r1, sp, #112
 194 00ca AA48     		ldr	r0, .L43+4
 195 00cc FFF7FEFF 		bl	strncmp
ARM GAS  /tmp/cc7MEjWH.s 			page 6


 196              	.LVL22:
 197 00d0 0028     		cmp	r0, #0
 198 00d2 46D0     		beq	.L34
  81:Src/commandParser.c **** 	{
  82:Src/commandParser.c **** 		max2871RFEnable(max2871Status);
  83:Src/commandParser.c **** 		enablePA(txStatus);
  84:Src/commandParser.c **** 		printUSB("> RF Enabled \r\n");
  85:Src/commandParser.c **** 	}
  86:Src/commandParser.c **** 
  87:Src/commandParser.c **** 	else if (strncmp("disableRF", command, 9) == 0)
 199              		.loc 1 87 0
 200 00d4 0922     		movs	r2, #9
 201 00d6 1CA9     		add	r1, sp, #112
 202 00d8 A748     		ldr	r0, .L43+8
 203 00da FFF7FEFF 		bl	strncmp
 204              	.LVL23:
 205 00de 0028     		cmp	r0, #0
 206 00e0 49D0     		beq	.L35
  88:Src/commandParser.c **** 	{
  89:Src/commandParser.c **** 		max2871RFDisable(max2871Status);
  90:Src/commandParser.c **** 		disablePA(txStatus);
  91:Src/commandParser.c **** 		printUSB("> RF Disabled \r\n");
  92:Src/commandParser.c **** 	}
  93:Src/commandParser.c **** 
  94:Src/commandParser.c **** 	else if (strncmp("status", command, 6) == 0)
 207              		.loc 1 94 0
 208 00e2 0622     		movs	r2, #6
 209 00e4 1CA9     		add	r1, sp, #112
 210 00e6 A548     		ldr	r0, .L43+12
 211 00e8 FFF7FEFF 		bl	strncmp
 212              	.LVL24:
 213 00ec 0028     		cmp	r0, #0
 214 00ee 58D1     		bne	.L17
  95:Src/commandParser.c **** 	{
  96:Src/commandParser.c **** 		if (strncmp("v", args[0], 1) == 0)
 215              		.loc 1 96 0
 216 00f0 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 217 00f4 762B     		cmp	r3, #118
 218 00f6 48D0     		beq	.L36
  97:Src/commandParser.c **** 		{
  98:Src/commandParser.c **** 			args[0][0] = (int32_t) "";
  99:Src/commandParser.c **** 			max2871PrintStatus(VERBOSE,max2871Status);
 100:Src/commandParser.c **** 			txChainPrintStatus(VERBOSE,txStatus);
 101:Src/commandParser.c **** 		}
 102:Src/commandParser.c **** 		else
 103:Src/commandParser.c **** 		{
 104:Src/commandParser.c **** 			max2871PrintStatus(nVERBOSE,max2871Status);
 219              		.loc 1 104 0
 220 00f8 3146     		mov	r1, r6
 221 00fa 0020     		movs	r0, #0
 222 00fc FFF7FEFF 		bl	max2871PrintStatus
 223              	.LVL25:
 105:Src/commandParser.c **** 			txChainPrintStatus(nVERBOSE,txStatus);
 224              		.loc 1 105 0
 225 0100 2946     		mov	r1, r5
 226 0102 0020     		movs	r0, #0
 227 0104 FFF7FEFF 		bl	txChainPrintStatus
ARM GAS  /tmp/cc7MEjWH.s 			page 7


 228              	.LVL26:
 229 0108 28E0     		b	.L1
 230              	.L33:
  66:Src/commandParser.c **** 
 231              		.loc 1 66 0
 232 010a 04A8     		add	r0, sp, #16
 233 010c FFF7FEFF 		bl	atof
 234              	.LVL27:
 235 0110 8046     		mov	r8, r0
 236 0112 8946     		mov	r9, r1
 237 0114 08A8     		add	r0, sp, #32
 238 0116 FFF7FEFF 		bl	atof
 239              	.LVL28:
 240 011a FFF7FEFF 		bl	__aeabi_d2f
 241              	.LVL29:
 242 011e 0446     		mov	r4, r0
 243 0120 4046     		mov	r0, r8
 244 0122 4946     		mov	r1, r9
 245 0124 FFF7FEFF 		bl	__aeabi_d2f
 246              	.LVL30:
 247 0128 2B46     		mov	r3, r5
 248 012a 3246     		mov	r2, r6
 249 012c 2146     		mov	r1, r4
 250 012e FFF7FEFF 		bl	sigGen
 251              	.LVL31:
  68:Src/commandParser.c **** 		printUSB(txStr);
 252              		.loc 1 68 0
 253 0132 2D68     		ldr	r5, [r5]	@ float
 254              	.LVL32:
 255 0134 7068     		ldr	r0, [r6, #4]	@ float
 256 0136 FFF7FEFF 		bl	__aeabi_f2d
 257              	.LVL33:
 258 013a 0646     		mov	r6, r0
 259              	.LVL34:
 260 013c 0F46     		mov	r7, r1
 261              	.LVL35:
 262 013e 904C     		ldr	r4, .L43+16
 263 0140 2846     		mov	r0, r5
 264 0142 FFF7FEFF 		bl	__aeabi_f2d
 265              	.LVL36:
 266 0146 CDE90001 		strd	r0, [sp]
 267 014a 3246     		mov	r2, r6
 268 014c 3B46     		mov	r3, r7
 269 014e 8D49     		ldr	r1, .L43+20
 270 0150 2046     		mov	r0, r4
 271 0152 FFF7FEFF 		bl	sprintf
 272              	.LVL37:
  69:Src/commandParser.c **** 	}
 273              		.loc 1 69 0
 274 0156 2046     		mov	r0, r4
 275 0158 FFF7FEFF 		bl	printUSB
 276              	.LVL38:
 277              	.L1:
 106:Src/commandParser.c **** 		}
 107:Src/commandParser.c **** 	}
 108:Src/commandParser.c **** 	
 109:Src/commandParser.c **** 	else if (strncmp("WHOAMI", command, 5) == 0)
ARM GAS  /tmp/cc7MEjWH.s 			page 8


 110:Src/commandParser.c **** 	{
 111:Src/commandParser.c **** 		printUSB("> Josh's Signal Generator!\r\n");
 112:Src/commandParser.c **** 	}
 113:Src/commandParser.c **** 	
 114:Src/commandParser.c **** 	// USE BELOW AT YOUR OWN RISK
 115:Src/commandParser.c **** 	else if (strncmp("setMaxPower", command, 11) == 0)
 116:Src/commandParser.c **** 	{
 117:Src/commandParser.c **** 		max2871SetPower(atoi(args[0]), max2871Status);
 118:Src/commandParser.c **** 		int8_t powerArray[4] = {-4, -1, 2, 5};
 119:Src/commandParser.c **** 		sprintf((char *)txStr, "> Power set to: %d dBm\n", powerArray[max2871Status->rfPower]);
 120:Src/commandParser.c **** 		printUSB(txStr);
 121:Src/commandParser.c **** 	}
 122:Src/commandParser.c **** 
 123:Src/commandParser.c **** 	else if (strncmp("setAttenuation", command, 14) == 0)
 124:Src/commandParser.c **** 	{
 125:Src/commandParser.c **** 		setAttenuation(atof(args[0]), txStatus);
 126:Src/commandParser.c **** 		sprintf((char *)txStr, "> Attenuation set to: %0.2f dB\n", txStatus->attenuation);
 127:Src/commandParser.c **** 		printUSB(txStr);
 128:Src/commandParser.c **** 	}
 129:Src/commandParser.c **** 
 130:Src/commandParser.c **** 	else if (strncmp("enableLO", command, 8) == 0)
 131:Src/commandParser.c **** 	{
 132:Src/commandParser.c **** 		max2871RFEnable(max2871Status);
 133:Src/commandParser.c **** 		printUSB("> LO Enabled \r\n");
 134:Src/commandParser.c **** 	}
 135:Src/commandParser.c **** 
 136:Src/commandParser.c **** 	else if (strncmp("disableLO", command, 8) == 0)
 137:Src/commandParser.c **** 	{
 138:Src/commandParser.c **** 		max2871RFDisable(max2871Status);
 139:Src/commandParser.c **** 		printUSB("> LO Disabled \r\n");
 140:Src/commandParser.c **** 	}
 141:Src/commandParser.c **** 
 142:Src/commandParser.c **** 	else if (strncmp("enablePA", command, 8) == 0)
 143:Src/commandParser.c **** 	{
 144:Src/commandParser.c **** 		enablePA(txStatus);
 145:Src/commandParser.c **** 		printUSB("> PA Enabled \r\n");
 146:Src/commandParser.c **** 	}
 147:Src/commandParser.c **** 
 148:Src/commandParser.c **** 	else if (strncmp("disablePA", command, 8) == 0)
 149:Src/commandParser.c **** 	{
 150:Src/commandParser.c **** 		disablePA(txStatus);
 151:Src/commandParser.c **** 		printUSB("> PA Disabled \r\n");
 152:Src/commandParser.c **** 	}
 153:Src/commandParser.c **** 
 154:Src/commandParser.c **** 	else if (strncmp("adc", command, 3) == 0)
 155:Src/commandParser.c **** 	{
 156:Src/commandParser.c **** 		readAD8319(txStatus);
 157:Src/commandParser.c **** 
 158:Src/commandParser.c **** 		sprintf((char *)txStr, "> Measured Voltage= %0.2f V\n", readAD8319(txStatus));
 159:Src/commandParser.c **** 		printUSB(txStr);
 160:Src/commandParser.c **** 
 161:Src/commandParser.c **** 		sprintf((char *)txStr, "> Output Power at SMA = %0.2f dBm\n", txStatus->measOutputPower);
 162:Src/commandParser.c **** 		printUSB(txStr);
 163:Src/commandParser.c **** 	}
 164:Src/commandParser.c **** 
 165:Src/commandParser.c **** 	else if ((strncmp("ls", command,2) == 0) || (strncmp("help", command, 4) == 0))
 166:Src/commandParser.c **** 	{
ARM GAS  /tmp/cc7MEjWH.s 			page 9


 167:Src/commandParser.c **** 		printUSB((char *)"> --  Available Commands  --\r\n");
 168:Src/commandParser.c **** 		printUSB((char *)"> sigGen(frequency, power)\r\n");
 169:Src/commandParser.c **** 		printUSB((char *)"> sweep(startFreq, stopFreq, numSteps, power, time)\r\n");
 170:Src/commandParser.c **** 		printUSB((char *)"> enableRF\r\n");
 171:Src/commandParser.c **** 		printUSB((char *)"> disableRF\r\n");
 172:Src/commandParser.c **** 		printUSB((char *)"> status(verbose)\r\n");
 173:Src/commandParser.c **** 		printUSB((char *)"> WHOAMI\r\n");
 174:Src/commandParser.c **** 		printUSB((char *)"> --- Use the below at your own risk ---\r\n");
 175:Src/commandParser.c **** 		printUSB((char *)"> setMaxPower(power(dBm))\r\n");
 176:Src/commandParser.c **** 		printUSB((char *)"> setAttenuation(atten(dB))\r\n");
 177:Src/commandParser.c **** 		printUSB((char *)"> enableLO\r\n");
 178:Src/commandParser.c **** 		printUSB((char *)"> disableLO\r\n");
 179:Src/commandParser.c **** 		printUSB((char *)"> enablePA\r\n");
 180:Src/commandParser.c **** 		printUSB((char *)"> disablePA\r\n");
 181:Src/commandParser.c **** 	}
 182:Src/commandParser.c **** 	else
 183:Src/commandParser.c **** 	{
 184:Src/commandParser.c **** 		printUSB("> Not found, try again\r\n");
 185:Src/commandParser.c **** 		sprintf((char *)txStr, "> %s\n", command);
 186:Src/commandParser.c **** 		printUSB(txStr);
 187:Src/commandParser.c **** 
 188:Src/commandParser.c **** 	}
 189:Src/commandParser.c **** 
 190:Src/commandParser.c **** }
 278              		.loc 1 190 0
 279 015c 45B0     		add	sp, sp, #276
 280              	.LCFI2:
 281              		.cfi_remember_state
 282              		.cfi_def_cfa_offset 28
 283              		@ sp needed
 284 015e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 285              	.LVL39:
 286              	.L34:
 287              	.LCFI3:
 288              		.cfi_restore_state
  82:Src/commandParser.c **** 		enablePA(txStatus);
 289              		.loc 1 82 0
 290 0162 3046     		mov	r0, r6
 291 0164 FFF7FEFF 		bl	max2871RFEnable
 292              	.LVL40:
  83:Src/commandParser.c **** 		printUSB("> RF Enabled \r\n");
 293              		.loc 1 83 0
 294 0168 2846     		mov	r0, r5
 295 016a FFF7FEFF 		bl	enablePA
 296              	.LVL41:
  84:Src/commandParser.c **** 	}
 297              		.loc 1 84 0
 298 016e 8648     		ldr	r0, .L43+24
 299 0170 FFF7FEFF 		bl	printUSB
 300              	.LVL42:
 301 0174 F2E7     		b	.L1
 302              	.L35:
  89:Src/commandParser.c **** 		disablePA(txStatus);
 303              		.loc 1 89 0
 304 0176 3046     		mov	r0, r6
 305 0178 FFF7FEFF 		bl	max2871RFDisable
 306              	.LVL43:
ARM GAS  /tmp/cc7MEjWH.s 			page 10


  90:Src/commandParser.c **** 		printUSB("> RF Disabled \r\n");
 307              		.loc 1 90 0
 308 017c 2846     		mov	r0, r5
 309 017e FFF7FEFF 		bl	disablePA
 310              	.LVL44:
  91:Src/commandParser.c **** 	}
 311              		.loc 1 91 0
 312 0182 8248     		ldr	r0, .L43+28
 313 0184 FFF7FEFF 		bl	printUSB
 314              	.LVL45:
 315 0188 E8E7     		b	.L1
 316              	.L36:
  98:Src/commandParser.c **** 			max2871PrintStatus(VERBOSE,max2871Status);
 317              		.loc 1 98 0
 318 018a 814B     		ldr	r3, .L43+32
 319 018c 8DF81030 		strb	r3, [sp, #16]
  99:Src/commandParser.c **** 			txChainPrintStatus(VERBOSE,txStatus);
 320              		.loc 1 99 0
 321 0190 3146     		mov	r1, r6
 322 0192 0120     		movs	r0, #1
 323 0194 FFF7FEFF 		bl	max2871PrintStatus
 324              	.LVL46:
 100:Src/commandParser.c **** 		}
 325              		.loc 1 100 0
 326 0198 2946     		mov	r1, r5
 327 019a 0120     		movs	r0, #1
 328 019c FFF7FEFF 		bl	txChainPrintStatus
 329              	.LVL47:
 330 01a0 DCE7     		b	.L1
 331              	.L17:
 109:Src/commandParser.c **** 	{
 332              		.loc 1 109 0
 333 01a2 0522     		movs	r2, #5
 334 01a4 1CA9     		add	r1, sp, #112
 335 01a6 7B48     		ldr	r0, .L43+36
 336 01a8 FFF7FEFF 		bl	strncmp
 337              	.LVL48:
 338 01ac 0028     		cmp	r0, #0
 339 01ae 30D0     		beq	.L37
 115:Src/commandParser.c **** 	{
 340              		.loc 1 115 0
 341 01b0 0B22     		movs	r2, #11
 342 01b2 1CA9     		add	r1, sp, #112
 343 01b4 7848     		ldr	r0, .L43+40
 344 01b6 FFF7FEFF 		bl	strncmp
 345              	.LVL49:
 346 01ba 0028     		cmp	r0, #0
 347 01bc 2DD0     		beq	.L38
 123:Src/commandParser.c **** 	{
 348              		.loc 1 123 0
 349 01be 0E22     		movs	r2, #14
 350 01c0 1CA9     		add	r1, sp, #112
 351 01c2 7648     		ldr	r0, .L43+44
 352 01c4 FFF7FEFF 		bl	strncmp
 353              	.LVL50:
 354 01c8 0028     		cmp	r0, #0
 355 01ca 3CD0     		beq	.L39
ARM GAS  /tmp/cc7MEjWH.s 			page 11


 130:Src/commandParser.c **** 	{
 356              		.loc 1 130 0
 357 01cc 0822     		movs	r2, #8
 358 01ce 1CA9     		add	r1, sp, #112
 359 01d0 7348     		ldr	r0, .L43+48
 360 01d2 FFF7FEFF 		bl	strncmp
 361              	.LVL51:
 362 01d6 0028     		cmp	r0, #0
 363 01d8 4BD0     		beq	.L40
 136:Src/commandParser.c **** 	{
 364              		.loc 1 136 0
 365 01da 0822     		movs	r2, #8
 366 01dc 1CA9     		add	r1, sp, #112
 367 01de 7148     		ldr	r0, .L43+52
 368 01e0 FFF7FEFF 		bl	strncmp
 369              	.LVL52:
 370 01e4 0028     		cmp	r0, #0
 371 01e6 4BD0     		beq	.L41
 142:Src/commandParser.c **** 	{
 372              		.loc 1 142 0
 373 01e8 0822     		movs	r2, #8
 374 01ea 1CA9     		add	r1, sp, #112
 375 01ec 6E48     		ldr	r0, .L43+56
 376 01ee FFF7FEFF 		bl	strncmp
 377              	.LVL53:
 378 01f2 0028     		cmp	r0, #0
 379 01f4 4BD0     		beq	.L42
 148:Src/commandParser.c **** 	{
 380              		.loc 1 148 0
 381 01f6 0822     		movs	r2, #8
 382 01f8 1CA9     		add	r1, sp, #112
 383 01fa 6C48     		ldr	r0, .L43+60
 384 01fc FFF7FEFF 		bl	strncmp
 385              	.LVL54:
 386 0200 0028     		cmp	r0, #0
 387 0202 4BD1     		bne	.L25
 150:Src/commandParser.c **** 		printUSB("> PA Disabled \r\n");
 388              		.loc 1 150 0
 389 0204 2846     		mov	r0, r5
 390 0206 FFF7FEFF 		bl	disablePA
 391              	.LVL55:
 151:Src/commandParser.c **** 	}
 392              		.loc 1 151 0
 393 020a 6948     		ldr	r0, .L43+64
 394 020c FFF7FEFF 		bl	printUSB
 395              	.LVL56:
 396 0210 A4E7     		b	.L1
 397              	.L37:
 111:Src/commandParser.c **** 	}
 398              		.loc 1 111 0
 399 0212 6848     		ldr	r0, .L43+68
 400 0214 FFF7FEFF 		bl	printUSB
 401              	.LVL57:
 402 0218 A0E7     		b	.L1
 403              	.L38:
 404              	.LBB5:
 117:Src/commandParser.c **** 		int8_t powerArray[4] = {-4, -1, 2, 5};
ARM GAS  /tmp/cc7MEjWH.s 			page 12


 405              		.loc 1 117 0 discriminator 2
 406 021a 04A8     		add	r0, sp, #16
 407 021c FFF7FEFF 		bl	atoi
 408              	.LVL58:
 409 0220 3146     		mov	r1, r6
 410 0222 40B2     		sxtb	r0, r0
 411 0224 FFF7FEFF 		bl	max2871SetPower
 412              	.LVL59:
 118:Src/commandParser.c **** 		sprintf((char *)txStr, "> Power set to: %d dBm\n", powerArray[max2871Status->rfPower]);
 413              		.loc 1 118 0 discriminator 2
 414 0228 03AB     		add	r3, sp, #12
 415 022a 634A     		ldr	r2, .L43+72
 416 022c 1268     		ldr	r2, [r2]
 417 022e 0392     		str	r2, [sp, #12]
 119:Src/commandParser.c **** 		printUSB(txStr);
 418              		.loc 1 119 0 discriminator 2
 419 0230 B27A     		ldrb	r2, [r6, #10]	@ zero_extendqisi2
 420 0232 534C     		ldr	r4, .L43+16
 421 0234 9A56     		ldrsb	r2, [r3, r2]
 422 0236 6149     		ldr	r1, .L43+76
 423 0238 2046     		mov	r0, r4
 424 023a FFF7FEFF 		bl	sprintf
 425              	.LVL60:
 120:Src/commandParser.c **** 	}
 426              		.loc 1 120 0 discriminator 2
 427 023e 2046     		mov	r0, r4
 428 0240 FFF7FEFF 		bl	printUSB
 429              	.LVL61:
 430              	.LBE5:
 431 0244 8AE7     		b	.L1
 432              	.L39:
 125:Src/commandParser.c **** 		sprintf((char *)txStr, "> Attenuation set to: %0.2f dB\n", txStatus->attenuation);
 433              		.loc 1 125 0
 434 0246 04A8     		add	r0, sp, #16
 435 0248 FFF7FEFF 		bl	atof
 436              	.LVL62:
 437 024c FFF7FEFF 		bl	__aeabi_d2f
 438              	.LVL63:
 439 0250 2946     		mov	r1, r5
 440 0252 FFF7FEFF 		bl	setAttenuation
 441              	.LVL64:
 126:Src/commandParser.c **** 		printUSB(txStr);
 442              		.loc 1 126 0
 443 0256 A868     		ldr	r0, [r5, #8]	@ float
 444 0258 FFF7FEFF 		bl	__aeabi_f2d
 445              	.LVL65:
 446 025c 484C     		ldr	r4, .L43+16
 447 025e 0246     		mov	r2, r0
 448 0260 0B46     		mov	r3, r1
 449 0262 5749     		ldr	r1, .L43+80
 450 0264 2046     		mov	r0, r4
 451 0266 FFF7FEFF 		bl	sprintf
 452              	.LVL66:
 127:Src/commandParser.c **** 	}
 453              		.loc 1 127 0
 454 026a 2046     		mov	r0, r4
 455 026c FFF7FEFF 		bl	printUSB
ARM GAS  /tmp/cc7MEjWH.s 			page 13


 456              	.LVL67:
 457 0270 74E7     		b	.L1
 458              	.L40:
 132:Src/commandParser.c **** 		printUSB("> LO Enabled \r\n");
 459              		.loc 1 132 0
 460 0272 3046     		mov	r0, r6
 461 0274 FFF7FEFF 		bl	max2871RFEnable
 462              	.LVL68:
 133:Src/commandParser.c **** 	}
 463              		.loc 1 133 0
 464 0278 5248     		ldr	r0, .L43+84
 465 027a FFF7FEFF 		bl	printUSB
 466              	.LVL69:
 467 027e 6DE7     		b	.L1
 468              	.L41:
 138:Src/commandParser.c **** 		printUSB("> LO Disabled \r\n");
 469              		.loc 1 138 0
 470 0280 3046     		mov	r0, r6
 471 0282 FFF7FEFF 		bl	max2871RFDisable
 472              	.LVL70:
 139:Src/commandParser.c **** 	}
 473              		.loc 1 139 0
 474 0286 5048     		ldr	r0, .L43+88
 475 0288 FFF7FEFF 		bl	printUSB
 476              	.LVL71:
 477 028c 66E7     		b	.L1
 478              	.L42:
 144:Src/commandParser.c **** 		printUSB("> PA Enabled \r\n");
 479              		.loc 1 144 0
 480 028e 2846     		mov	r0, r5
 481 0290 FFF7FEFF 		bl	enablePA
 482              	.LVL72:
 145:Src/commandParser.c **** 	}
 483              		.loc 1 145 0
 484 0294 4D48     		ldr	r0, .L43+92
 485 0296 FFF7FEFF 		bl	printUSB
 486              	.LVL73:
 487 029a 5FE7     		b	.L1
 488              	.L25:
 154:Src/commandParser.c **** 	{
 489              		.loc 1 154 0
 490 029c 0322     		movs	r2, #3
 491 029e 1CA9     		add	r1, sp, #112
 492 02a0 4B48     		ldr	r0, .L43+96
 493 02a2 FFF7FEFF 		bl	strncmp
 494              	.LVL74:
 495 02a6 F0B9     		cbnz	r0, .L26
 156:Src/commandParser.c **** 
 496              		.loc 1 156 0
 497 02a8 2846     		mov	r0, r5
 498 02aa FFF7FEFF 		bl	readAD8319
 499              	.LVL75:
 158:Src/commandParser.c **** 		printUSB(txStr);
 500              		.loc 1 158 0
 501 02ae 2846     		mov	r0, r5
 502 02b0 FFF7FEFF 		bl	readAD8319
 503              	.LVL76:
ARM GAS  /tmp/cc7MEjWH.s 			page 14


 504 02b4 FFF7FEFF 		bl	__aeabi_f2d
 505              	.LVL77:
 506 02b8 314C     		ldr	r4, .L43+16
 507 02ba 0246     		mov	r2, r0
 508 02bc 0B46     		mov	r3, r1
 509 02be 4549     		ldr	r1, .L43+100
 510 02c0 2046     		mov	r0, r4
 511 02c2 FFF7FEFF 		bl	sprintf
 512              	.LVL78:
 159:Src/commandParser.c **** 
 513              		.loc 1 159 0
 514 02c6 2046     		mov	r0, r4
 515 02c8 FFF7FEFF 		bl	printUSB
 516              	.LVL79:
 161:Src/commandParser.c **** 		printUSB(txStr);
 517              		.loc 1 161 0
 518 02cc 2868     		ldr	r0, [r5]	@ float
 519 02ce FFF7FEFF 		bl	__aeabi_f2d
 520              	.LVL80:
 521 02d2 0246     		mov	r2, r0
 522 02d4 0B46     		mov	r3, r1
 523 02d6 4049     		ldr	r1, .L43+104
 524 02d8 2046     		mov	r0, r4
 525 02da FFF7FEFF 		bl	sprintf
 526              	.LVL81:
 162:Src/commandParser.c **** 	}
 527              		.loc 1 162 0
 528 02de 2046     		mov	r0, r4
 529 02e0 FFF7FEFF 		bl	printUSB
 530              	.LVL82:
 531 02e4 3AE7     		b	.L1
 532              	.L26:
 165:Src/commandParser.c **** 	{
 533              		.loc 1 165 0
 534 02e6 0222     		movs	r2, #2
 535 02e8 1CA9     		add	r1, sp, #112
 536 02ea 3C48     		ldr	r0, .L43+108
 537 02ec FFF7FEFF 		bl	strncmp
 538              	.LVL83:
 539 02f0 28B1     		cbz	r0, .L27
 165:Src/commandParser.c **** 	{
 540              		.loc 1 165 0 is_stmt 0 discriminator 1
 541 02f2 0422     		movs	r2, #4
 542 02f4 1CA9     		add	r1, sp, #112
 543 02f6 3A48     		ldr	r0, .L43+112
 544 02f8 FFF7FEFF 		bl	strncmp
 545              	.LVL84:
 546 02fc 50BB     		cbnz	r0, .L28
 547              	.L27:
 167:Src/commandParser.c **** 		printUSB((char *)"> sigGen(frequency, power)\r\n");
 548              		.loc 1 167 0 is_stmt 1
 549 02fe 3948     		ldr	r0, .L43+116
 550 0300 FFF7FEFF 		bl	printUSB
 551              	.LVL85:
 168:Src/commandParser.c **** 		printUSB((char *)"> sweep(startFreq, stopFreq, numSteps, power, time)\r\n");
 552              		.loc 1 168 0
 553 0304 3848     		ldr	r0, .L43+120
ARM GAS  /tmp/cc7MEjWH.s 			page 15


 554 0306 FFF7FEFF 		bl	printUSB
 555              	.LVL86:
 169:Src/commandParser.c **** 		printUSB((char *)"> enableRF\r\n");
 556              		.loc 1 169 0
 557 030a 3848     		ldr	r0, .L43+124
 558 030c FFF7FEFF 		bl	printUSB
 559              	.LVL87:
 170:Src/commandParser.c **** 		printUSB((char *)"> disableRF\r\n");
 560              		.loc 1 170 0
 561 0310 3748     		ldr	r0, .L43+128
 562 0312 FFF7FEFF 		bl	printUSB
 563              	.LVL88:
 171:Src/commandParser.c **** 		printUSB((char *)"> status(verbose)\r\n");
 564              		.loc 1 171 0
 565 0316 3748     		ldr	r0, .L43+132
 566 0318 FFF7FEFF 		bl	printUSB
 567              	.LVL89:
 172:Src/commandParser.c **** 		printUSB((char *)"> WHOAMI\r\n");
 568              		.loc 1 172 0
 569 031c 3648     		ldr	r0, .L43+136
 570 031e FFF7FEFF 		bl	printUSB
 571              	.LVL90:
 173:Src/commandParser.c **** 		printUSB((char *)"> --- Use the below at your own risk ---\r\n");
 572              		.loc 1 173 0
 573 0322 3648     		ldr	r0, .L43+140
 574 0324 FFF7FEFF 		bl	printUSB
 575              	.LVL91:
 174:Src/commandParser.c **** 		printUSB((char *)"> setMaxPower(power(dBm))\r\n");
 576              		.loc 1 174 0
 577 0328 3548     		ldr	r0, .L43+144
 578 032a FFF7FEFF 		bl	printUSB
 579              	.LVL92:
 175:Src/commandParser.c **** 		printUSB((char *)"> setAttenuation(atten(dB))\r\n");
 580              		.loc 1 175 0
 581 032e 3548     		ldr	r0, .L43+148
 582 0330 FFF7FEFF 		bl	printUSB
 583              	.LVL93:
 176:Src/commandParser.c **** 		printUSB((char *)"> enableLO\r\n");
 584              		.loc 1 176 0
 585 0334 3448     		ldr	r0, .L43+152
 586 0336 FFF7FEFF 		bl	printUSB
 587              	.LVL94:
 177:Src/commandParser.c **** 		printUSB((char *)"> disableLO\r\n");
 588              		.loc 1 177 0
 589 033a 3448     		ldr	r0, .L43+156
 590 033c FFF7FEFF 		bl	printUSB
 591              	.LVL95:
 178:Src/commandParser.c **** 		printUSB((char *)"> enablePA\r\n");
 592              		.loc 1 178 0
 593 0340 3348     		ldr	r0, .L43+160
 594 0342 FFF7FEFF 		bl	printUSB
 595              	.LVL96:
 179:Src/commandParser.c **** 		printUSB((char *)"> disablePA\r\n");
 596              		.loc 1 179 0
 597 0346 3348     		ldr	r0, .L43+164
 598 0348 FFF7FEFF 		bl	printUSB
 599              	.LVL97:
ARM GAS  /tmp/cc7MEjWH.s 			page 16


 180:Src/commandParser.c **** 	}
 600              		.loc 1 180 0
 601 034c 3248     		ldr	r0, .L43+168
 602 034e FFF7FEFF 		bl	printUSB
 603              	.LVL98:
 604 0352 03E7     		b	.L1
 605              	.L28:
 184:Src/commandParser.c **** 		sprintf((char *)txStr, "> %s\n", command);
 606              		.loc 1 184 0
 607 0354 3148     		ldr	r0, .L43+172
 608 0356 FFF7FEFF 		bl	printUSB
 609              	.LVL99:
 185:Src/commandParser.c **** 		printUSB(txStr);
 610              		.loc 1 185 0
 611 035a 094C     		ldr	r4, .L43+16
 612 035c 1CAA     		add	r2, sp, #112
 613 035e 3049     		ldr	r1, .L43+176
 614 0360 2046     		mov	r0, r4
 615 0362 FFF7FEFF 		bl	sprintf
 616              	.LVL100:
 186:Src/commandParser.c **** 
 617              		.loc 1 186 0
 618 0366 2046     		mov	r0, r4
 619 0368 FFF7FEFF 		bl	printUSB
 620              	.LVL101:
 621              		.loc 1 190 0
 622 036c F6E6     		b	.L1
 623              	.L44:
 624 036e 00BF     		.align	2
 625              	.L43:
 626 0370 00000000 		.word	.LC1
 627 0374 48000000 		.word	.LC3
 628 0378 64000000 		.word	.LC5
 629 037c 84000000 		.word	.LC7
 630 0380 00000000 		.word	.LANCHOR0
 631 0384 08000000 		.word	.LC2
 632 0388 54000000 		.word	.LC4
 633 038c 70000000 		.word	.LC6
 634 0390 8C000000 		.word	.LC8
 635 0394 90000000 		.word	.LC9
 636 0398 B8000000 		.word	.LC11
 637 039c DC000000 		.word	.LC13
 638 03a0 0C010000 		.word	.LC15
 639 03a4 28010000 		.word	.LC17
 640 03a8 48010000 		.word	.LC19
 641 03ac 64010000 		.word	.LC21
 642 03b0 70010000 		.word	.LC22
 643 03b4 98000000 		.word	.LC10
 644 03b8 00000000 		.word	.LANCHOR1
 645 03bc C4000000 		.word	.LC12
 646 03c0 EC000000 		.word	.LC14
 647 03c4 18010000 		.word	.LC16
 648 03c8 34010000 		.word	.LC18
 649 03cc 54010000 		.word	.LC20
 650 03d0 84010000 		.word	.LC23
 651 03d4 88010000 		.word	.LC24
 652 03d8 A8010000 		.word	.LC25
ARM GAS  /tmp/cc7MEjWH.s 			page 17


 653 03dc CC010000 		.word	.LC26
 654 03e0 D0010000 		.word	.LC27
 655 03e4 D8010000 		.word	.LC28
 656 03e8 F8010000 		.word	.LC29
 657 03ec 18020000 		.word	.LC30
 658 03f0 50020000 		.word	.LC31
 659 03f4 60020000 		.word	.LC32
 660 03f8 70020000 		.word	.LC33
 661 03fc 84020000 		.word	.LC34
 662 0400 90020000 		.word	.LC35
 663 0404 BC020000 		.word	.LC36
 664 0408 D8020000 		.word	.LC37
 665 040c F8020000 		.word	.LC38
 666 0410 08030000 		.word	.LC39
 667 0414 18030000 		.word	.LC40
 668 0418 28030000 		.word	.LC41
 669 041c 38030000 		.word	.LC42
 670 0420 54030000 		.word	.LC43
 671              		.cfi_endproc
 672              	.LFE69:
 674              		.global	txStr
 675              		.section	.rodata
 676              		.align	2
 677              		.set	.LANCHOR1,. + 0
 678              	.LC0:
 679 0000 FC       		.byte	-4
 680 0001 FF       		.byte	-1
 681 0002 02       		.byte	2
 682 0003 05       		.byte	5
 683              		.section	.bss.txStr,"aw",%nobits
 684              		.align	2
 685              		.set	.LANCHOR0,. + 0
 688              	txStr:
 689 0000 00000000 		.space	128
 689      00000000 
 689      00000000 
 689      00000000 
 689      00000000 
 690              		.section	.rodata.commandParser.str1.4,"aMS",%progbits,1
 691              		.align	2
 692              	.LC1:
 693 0000 73696747 		.ascii	"sigGen\000"
 693      656E00
 694 0007 00       		.space	1
 695              	.LC2:
 696 0008 3E205369 		.ascii	"> Signal Generator: Frequency = %0.3f MHz, Power = "
 696      676E616C 
 696      2047656E 
 696      65726174 
 696      6F723A20 
 697 003b 25302E32 		.ascii	"%0.2f dBm\012\000"
 697      66206442 
 697      6D0A00
 698 0046 0000     		.space	2
 699              	.LC3:
 700 0048 656E6162 		.ascii	"enableRF\000"
 700      6C655246 
ARM GAS  /tmp/cc7MEjWH.s 			page 18


 700      00
 701 0051 000000   		.space	3
 702              	.LC4:
 703 0054 3E205246 		.ascii	"> RF Enabled \015\012\000"
 703      20456E61 
 703      626C6564 
 703      200D0A00 
 704              	.LC5:
 705 0064 64697361 		.ascii	"disableRF\000"
 705      626C6552 
 705      4600
 706 006e 0000     		.space	2
 707              	.LC6:
 708 0070 3E205246 		.ascii	"> RF Disabled \015\012\000"
 708      20446973 
 708      61626C65 
 708      64200D0A 
 708      00
 709 0081 000000   		.space	3
 710              	.LC7:
 711 0084 73746174 		.ascii	"status\000"
 711      757300
 712 008b 00       		.space	1
 713              	.LC8:
 714 008c 00       		.ascii	"\000"
 715 008d 000000   		.space	3
 716              	.LC9:
 717 0090 57484F41 		.ascii	"WHOAMI\000"
 717      4D4900
 718 0097 00       		.space	1
 719              	.LC10:
 720 0098 3E204A6F 		.ascii	"> Josh's Signal Generator!\015\012\000"
 720      73682773 
 720      20536967 
 720      6E616C20 
 720      47656E65 
 721 00b5 000000   		.space	3
 722              	.LC11:
 723 00b8 7365744D 		.ascii	"setMaxPower\000"
 723      6178506F 
 723      77657200 
 724              	.LC12:
 725 00c4 3E20506F 		.ascii	"> Power set to: %d dBm\012\000"
 725      77657220 
 725      73657420 
 725      746F3A20 
 725      25642064 
 726              	.LC13:
 727 00dc 73657441 		.ascii	"setAttenuation\000"
 727      7474656E 
 727      75617469 
 727      6F6E00
 728 00eb 00       		.space	1
 729              	.LC14:
 730 00ec 3E204174 		.ascii	"> Attenuation set to: %0.2f dB\012\000"
 730      74656E75 
 730      6174696F 
ARM GAS  /tmp/cc7MEjWH.s 			page 19


 730      6E207365 
 730      7420746F 
 731              	.LC15:
 732 010c 656E6162 		.ascii	"enableLO\000"
 732      6C654C4F 
 732      00
 733 0115 000000   		.space	3
 734              	.LC16:
 735 0118 3E204C4F 		.ascii	"> LO Enabled \015\012\000"
 735      20456E61 
 735      626C6564 
 735      200D0A00 
 736              	.LC17:
 737 0128 64697361 		.ascii	"disableLO\000"
 737      626C654C 
 737      4F00
 738 0132 0000     		.space	2
 739              	.LC18:
 740 0134 3E204C4F 		.ascii	"> LO Disabled \015\012\000"
 740      20446973 
 740      61626C65 
 740      64200D0A 
 740      00
 741 0145 000000   		.space	3
 742              	.LC19:
 743 0148 656E6162 		.ascii	"enablePA\000"
 743      6C655041 
 743      00
 744 0151 000000   		.space	3
 745              	.LC20:
 746 0154 3E205041 		.ascii	"> PA Enabled \015\012\000"
 746      20456E61 
 746      626C6564 
 746      200D0A00 
 747              	.LC21:
 748 0164 64697361 		.ascii	"disablePA\000"
 748      626C6550 
 748      4100
 749 016e 0000     		.space	2
 750              	.LC22:
 751 0170 3E205041 		.ascii	"> PA Disabled \015\012\000"
 751      20446973 
 751      61626C65 
 751      64200D0A 
 751      00
 752 0181 000000   		.space	3
 753              	.LC23:
 754 0184 61646300 		.ascii	"adc\000"
 755              	.LC24:
 756 0188 3E204D65 		.ascii	"> Measured Voltage= %0.2f V\012\000"
 756      61737572 
 756      65642056 
 756      6F6C7461 
 756      67653D20 
 757 01a5 000000   		.space	3
 758              	.LC25:
 759 01a8 3E204F75 		.ascii	"> Output Power at SMA = %0.2f dBm\012\000"
ARM GAS  /tmp/cc7MEjWH.s 			page 20


 759      74707574 
 759      20506F77 
 759      65722061 
 759      7420534D 
 760 01cb 00       		.space	1
 761              	.LC26:
 762 01cc 6C7300   		.ascii	"ls\000"
 763 01cf 00       		.space	1
 764              	.LC27:
 765 01d0 68656C70 		.ascii	"help\000"
 765      00
 766 01d5 000000   		.space	3
 767              	.LC28:
 768 01d8 3E202D2D 		.ascii	"> --  Available Commands  --\015\012\000"
 768      20204176 
 768      61696C61 
 768      626C6520 
 768      436F6D6D 
 769 01f7 00       		.space	1
 770              	.LC29:
 771 01f8 3E207369 		.ascii	"> sigGen(frequency, power)\015\012\000"
 771      6747656E 
 771      28667265 
 771      7175656E 
 771      63792C20 
 772 0215 000000   		.space	3
 773              	.LC30:
 774 0218 3E207377 		.ascii	"> sweep(startFreq, stopFreq, numSteps, power, time)"
 774      65657028 
 774      73746172 
 774      74467265 
 774      712C2073 
 775 024b 0D0A00   		.ascii	"\015\012\000"
 776 024e 0000     		.space	2
 777              	.LC31:
 778 0250 3E20656E 		.ascii	"> enableRF\015\012\000"
 778      61626C65 
 778      52460D0A 
 778      00
 779 025d 000000   		.space	3
 780              	.LC32:
 781 0260 3E206469 		.ascii	"> disableRF\015\012\000"
 781      7361626C 
 781      6552460D 
 781      0A00
 782 026e 0000     		.space	2
 783              	.LC33:
 784 0270 3E207374 		.ascii	"> status(verbose)\015\012\000"
 784      61747573 
 784      28766572 
 784      626F7365 
 784      290D0A00 
 785              	.LC34:
 786 0284 3E205748 		.ascii	"> WHOAMI\015\012\000"
 786      4F414D49 
 786      0D0A00
 787 028f 00       		.space	1
ARM GAS  /tmp/cc7MEjWH.s 			page 21


 788              	.LC35:
 789 0290 3E202D2D 		.ascii	"> --- Use the below at your own risk ---\015\012\000"
 789      2D205573 
 789      65207468 
 789      65206265 
 789      6C6F7720 
 790 02bb 00       		.space	1
 791              	.LC36:
 792 02bc 3E207365 		.ascii	"> setMaxPower(power(dBm))\015\012\000"
 792      744D6178 
 792      506F7765 
 792      7228706F 
 792      77657228 
 793              	.LC37:
 794 02d8 3E207365 		.ascii	"> setAttenuation(atten(dB))\015\012\000"
 794      74417474 
 794      656E7561 
 794      74696F6E 
 794      28617474 
 795 02f6 0000     		.space	2
 796              	.LC38:
 797 02f8 3E20656E 		.ascii	"> enableLO\015\012\000"
 797      61626C65 
 797      4C4F0D0A 
 797      00
 798 0305 000000   		.space	3
 799              	.LC39:
 800 0308 3E206469 		.ascii	"> disableLO\015\012\000"
 800      7361626C 
 800      654C4F0D 
 800      0A00
 801 0316 0000     		.space	2
 802              	.LC40:
 803 0318 3E20656E 		.ascii	"> enablePA\015\012\000"
 803      61626C65 
 803      50410D0A 
 803      00
 804 0325 000000   		.space	3
 805              	.LC41:
 806 0328 3E206469 		.ascii	"> disablePA\015\012\000"
 806      7361626C 
 806      6550410D 
 806      0A00
 807 0336 0000     		.space	2
 808              	.LC42:
 809 0338 3E204E6F 		.ascii	"> Not found, try again\015\012\000"
 809      7420666F 
 809      756E642C 
 809      20747279 
 809      20616761 
 810 0351 000000   		.space	3
 811              	.LC43:
 812 0354 3E202573 		.ascii	"> %s\012\000"
 812      0A00
 813              		.text
 814              	.Letext0:
 815              		.file 2 "/usr/include/newlib/machine/_default_types.h"
ARM GAS  /tmp/cc7MEjWH.s 			page 22


 816              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 817              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 818              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 819              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 820              		.file 7 "Inc/main.h"
 821              		.file 8 "Inc/max2871.h"
 822              		.file 9 "Inc/commandParser.h"
 823              		.file 10 "Inc/txChain.h"
 824              		.file 11 "/usr/include/newlib/sys/lock.h"
 825              		.file 12 "/usr/include/newlib/sys/_types.h"
 826              		.file 13 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 827              		.file 14 "/usr/include/newlib/sys/reent.h"
 828              		.file 15 "/usr/include/newlib/stdlib.h"
 829              		.file 16 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 830              		.file 17 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 831              		.file 18 "Inc/usbd_cdc_if.h"
 832              		.file 19 "/usr/include/newlib/stdio.h"
 833              		.file 20 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cc7MEjWH.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 commandParser.c
     /tmp/cc7MEjWH.s:18     .text.commandParser:0000000000000000 $t
     /tmp/cc7MEjWH.s:25     .text.commandParser:0000000000000000 commandParser
     /tmp/cc7MEjWH.s:626    .text.commandParser:0000000000000370 $d
     /tmp/cc7MEjWH.s:688    .bss.txStr:0000000000000000 txStr
     /tmp/cc7MEjWH.s:676    .rodata:0000000000000000 $d
     /tmp/cc7MEjWH.s:684    .bss.txStr:0000000000000000 $d
     /tmp/cc7MEjWH.s:691    .rodata.commandParser.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_d2f
__aeabi_f2d
scanUSB
strncmp
max2871PrintStatus
txChainPrintStatus
atof
sigGen
sprintf
printUSB
max2871RFEnable
enablePA
max2871RFDisable
disablePA
atoi
max2871SetPower
setAttenuation
readAD8319
